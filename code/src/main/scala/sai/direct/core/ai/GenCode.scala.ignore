package sai.direct.core.ai

import sai.direct.large.parser._
import sai.common.ai.Lattices._
object RTSupport {
  case class Addr(x: String)
  trait AbsValue
  case class IntV() extends AbsValue
  case class FloatV() extends AbsValue
  case class CharV() extends AbsValue
  case class BoolV() extends AbsValue
  case class ListV() extends AbsValue
  case class VectorV() extends AbsValue
  case class VoidV() extends AbsValue
  case class SymV() extends AbsValue
  type Value = Set[AbsValue]
  case class CompiledClo(f: (List[Value], Map[Addr,Value]) => (Value, Map[Addr,Value]), λ: Lam, ρ: Map[String,Addr]) extends AbsValue {
    def canEqual(a: Any) = a.isInstanceOf[CompiledClo]
    override def equals(that: Any): Boolean = that match {
      case that: CompiledClo => that.canEqual(this) && this.hashCode == that.hashCode && this.λ == that.λ && this.ρ == that.ρ
      case _ => false
    }
    override def hashCode: Int = {
      val prime = 31
      var result = 1
      result = prime * result + λ.hashCode
      result = prime * result + ρ.hashCode
      result
    }
  }
  def apply_closures_norep(f: Value, args: List[Value], σ: Map[Addr,Value]) = {
    var σ0 = σ
    val vs: Set[Value] = for (CompiledClo(fun, λ, ρ) <- f) yield {
      val (v, vσ) = fun(args, σ0)
      σ0 = vσ; v
    }
    (vs.reduce(Lattice[Value].⊔(_,_)), σ0)
  }
}
import RTSupport._

/*****************************************
  Emitting Generated Code                  
*******************************************/
class Snippet extends ((Unit)=>(Unit)) {
def apply(x2:Unit): Unit = {
var x6 = null.asInstanceOf[scala.Function0[Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]]]
val x3 = Map[Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]], Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]]()
var x5: scala.collection.immutable.Map[Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]], Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]] = x3
var x4: scala.collection.immutable.Map[Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]], Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]] = x3
val x0 = Map[java.lang.String, Addr]()
val x1 = Map[Addr, scala.collection.immutable.Set[AbsValue]]()
val x10 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("plus"), App(Lam(List("__$0"), App(Lam(List("mult"), App(Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),List(Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))))))),List(Void()))),List(Set_!("plus", Lam(List("p1"), Lam(List("p2"), Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x"))))))))))))),List(Void())),x0,x1)
val x15 = collection.immutable.Set[AbsValue]()
val x16 = Map.empty[Addr, scala.collection.immutable.Set[AbsValue]]
val x17 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x15,x16)
val x24 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("plus"), App(Lam(List("__$0"), App(Lam(List("mult"), App(Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),List(Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))))))),List(Void()))),List(Set_!("plus", Lam(List("p1"), Lam(List("p2"), Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x"))))))))))))),x0,x1)
val x34 = {(x35:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x36:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x39 = Addr("plus")
val x47 = x5
val x41 = x0 + ("plus" -> x39)
val x38 = x36
val x37 = x35
val x42 = x37.head
val x43 = x38.getOrElse(x39, x15)
val x44 = x42.union(x43)
val x45 = x38 + (x39 -> x44)
val x46 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("__$0"), App(Lam(List("mult"), App(Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),List(Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))))))),List(Void()))),List(Set_!("plus", Lam(List("p1"), Lam(List("p2"), Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x")))))))))))),x41,x45)
val x48 = x47.contains(x46)
val x9602 = if (x48) {
val x49 = x47(x46)
x49
} else {
val x50 = x4
val x51 = x50.getOrElse(x46, x17)
val x52 = x51._1
val x53 = x51._2
val x54 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x52,x53)
val x55 = x47 + (x46 -> x54)
x5 = x55
val x58 = x5
val x57 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("__$0"), App(Lam(List("mult"), App(Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),List(Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))))))),List(Void()))),x41,x45)
val x59 = x58.contains(x57)
val x9114 = if (x59) {
val x60 = x58(x57)
x60
} else {
val x61 = x50.getOrElse(x57, x17)
val x62 = x61._1
val x63 = x61._2
val x64 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x62,x63)
val x65 = x58 + (x57 -> x64)
x5 = x65
val x67 = {(x68:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x69:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x72 = Addr("__$0")
val x80 = x5
val x74 = x41 + ("__$0" -> x72)
val x71 = x69
val x70 = x68
val x75 = x70.head
val x76 = x71.getOrElse(x72, x15)
val x77 = x75.union(x76)
val x78 = x71 + (x72 -> x77)
val x79 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("mult"), App(Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),List(Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))))))),List(Void())),x74,x78)
val x81 = x80.contains(x79)
val x9094 = if (x81) {
val x82 = x80(x79)
x82
} else {
val x83 = x4
val x84 = x83.getOrElse(x79, x17)
val x85 = x84._1
val x86 = x84._2
val x87 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x85,x86)
val x88 = x80 + (x79 -> x87)
x5 = x88
val x91 = x5
val x90 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("mult"), App(Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),List(Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))))))),x74,x78)
val x92 = x91.contains(x90)
val x9046 = if (x92) {
val x93 = x91(x90)
x93
} else {
val x94 = x83.getOrElse(x90, x17)
val x95 = x94._1
val x96 = x94._2
val x97 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x95,x96)
val x98 = x91 + (x90 -> x97)
x5 = x98
val x100 = {(x101:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x102:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x105 = Addr("mult")
val x113 = x5
val x107 = x74 + ("mult" -> x105)
val x104 = x102
val x103 = x101
val x108 = x103.head
val x109 = x104.getOrElse(x105, x15)
val x110 = x108.union(x109)
val x111 = x104 + (x105 -> x110)
val x112 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),List(Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf"))))))))))),x107,x111)
val x114 = x113.contains(x112)
val x9026 = if (x114) {
val x115 = x113(x112)
x115
} else {
val x116 = x4
val x117 = x116.getOrElse(x112, x17)
val x118 = x117._1
val x119 = x117._2
val x120 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x118,x119)
val x121 = x113 + (x112 -> x120)
x5 = x121
val x124 = x5
val x123 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),x107,x111)
val x125 = x124.contains(x123)
val x8698 = if (x125) {
val x126 = x124(x123)
x126
} else {
val x127 = x116.getOrElse(x123, x17)
val x128 = x127._1
val x129 = x127._2
val x130 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x128,x129)
val x131 = x124 + (x123 -> x130)
x5 = x131
val x133 = {(x134:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x135:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x138 = Addr("__$1")
val x146 = x5
val x140 = x107 + ("__$1" -> x138)
val x137 = x135
val x136 = x134
val x141 = x136.head
val x142 = x137.getOrElse(x138, x15)
val x143 = x141.union(x142)
val x144 = x137 + (x138 -> x143)
val x145 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void())),x140,x144)
val x147 = x146.contains(x145)
val x8678 = if (x147) {
val x148 = x146(x145)
x148
} else {
val x149 = x4
val x150 = x149.getOrElse(x145, x17)
val x151 = x150._1
val x152 = x150._2
val x153 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x151,x152)
val x154 = x146 + (x145 -> x153)
x5 = x154
val x157 = x5
val x156 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),x140,x144)
val x158 = x157.contains(x156)
val x8630 = if (x158) {
val x159 = x157(x156)
x159
} else {
val x160 = x149.getOrElse(x156, x17)
val x161 = x160._1
val x162 = x160._2
val x163 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x161,x162)
val x164 = x157 + (x156 -> x163)
x5 = x164
val x166 = {(x167:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x168:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x171 = Addr("pred")
val x179 = x5
val x173 = x140 + ("pred" -> x171)
val x170 = x168
val x169 = x167
val x174 = x169.head
val x175 = x170.getOrElse(x171, x15)
val x176 = x174.union(x175)
val x177 = x170 + (x171 -> x176)
val x178 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id")))))))))),x173,x177)
val x180 = x179.contains(x178)
val x8610 = if (x180) {
val x181 = x179(x178)
x181
} else {
val x182 = x4
val x183 = x182.getOrElse(x178, x17)
val x184 = x183._1
val x185 = x183._2
val x186 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x184,x185)
val x187 = x179 + (x178 -> x186)
x5 = x187
val x190 = x5
val x189 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),x173,x177)
val x191 = x190.contains(x189)
val x7933 = if (x191) {
val x192 = x190(x189)
x192
} else {
val x193 = x182.getOrElse(x189, x17)
val x194 = x193._1
val x195 = x193._2
val x196 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x194,x195)
val x197 = x190 + (x189 -> x196)
x5 = x197
val x199 = {(x200:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x201:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x204 = Addr("__$2")
val x212 = x5
val x206 = x173 + ("__$2" -> x204)
val x203 = x201
val x202 = x200
val x207 = x202.head
val x208 = x203.getOrElse(x204, x15)
val x209 = x207.union(x208)
val x210 = x203 + (x204 -> x209)
val x211 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void())),x206,x210)
val x213 = x212.contains(x211)
val x7913 = if (x213) {
val x214 = x212(x211)
x214
} else {
val x215 = x4
val x216 = x215.getOrElse(x211, x17)
val x217 = x216._1
val x218 = x216._2
val x219 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x217,x218)
val x220 = x212 + (x211 -> x219)
x5 = x220
val x223 = x5
val x222 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),x206,x210)
val x224 = x223.contains(x222)
val x7865 = if (x224) {
val x225 = x223(x222)
x225
} else {
val x226 = x215.getOrElse(x222, x17)
val x227 = x226._1
val x228 = x226._2
val x229 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x227,x228)
val x230 = x223 + (x222 -> x229)
x5 = x230
val x232 = {(x233:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x234:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x237 = Addr("sub")
val x245 = x5
val x239 = x206 + ("sub" -> x237)
val x236 = x234
val x235 = x233
val x240 = x235.head
val x241 = x236.getOrElse(x237, x15)
val x242 = x240.union(x241)
val x243 = x236 + (x237 -> x242)
val x244 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1")))))))),x239,x243)
val x246 = x245.contains(x244)
val x7845 = if (x246) {
val x247 = x245(x244)
x247
} else {
val x248 = x4
val x249 = x248.getOrElse(x244, x17)
val x250 = x249._1
val x251 = x249._2
val x252 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x250,x251)
val x253 = x245 + (x244 -> x252)
x5 = x253
val x256 = x5
val x255 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),x239,x243)
val x257 = x256.contains(x255)
val x7560 = if (x257) {
val x258 = x256(x255)
x258
} else {
val x259 = x248.getOrElse(x255, x17)
val x260 = x259._1
val x261 = x259._2
val x262 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x260,x261)
val x263 = x256 + (x255 -> x262)
x5 = x263
val x265 = {(x266:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x267:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x270 = Addr("__$3")
val x278 = x5
val x272 = x239 + ("__$3" -> x270)
val x269 = x267
val x268 = x266
val x273 = x268.head
val x274 = x269.getOrElse(x270, x15)
val x275 = x273.union(x274)
val x276 = x269 + (x270 -> x275)
val x277 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void())),x272,x276)
val x279 = x278.contains(x277)
val x7540 = if (x279) {
val x280 = x278(x277)
x280
} else {
val x281 = x4
val x282 = x281.getOrElse(x277, x17)
val x283 = x282._1
val x284 = x282._2
val x285 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x283,x284)
val x286 = x278 + (x277 -> x285)
x5 = x286
val x289 = x5
val x288 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),x272,x276)
val x290 = x289.contains(x288)
val x7492 = if (x290) {
val x291 = x289(x288)
x291
} else {
val x292 = x281.getOrElse(x288, x17)
val x293 = x292._1
val x294 = x292._2
val x295 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x293,x294)
val x296 = x289 + (x288 -> x295)
x5 = x296
val x298 = {(x299:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x300:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x303 = Addr("church0")
val x311 = x5
val x305 = x272 + ("church0" -> x303)
val x302 = x300
val x301 = x299
val x306 = x301.head
val x307 = x302.getOrElse(x303, x15)
val x308 = x306.union(x307)
val x309 = x302 + (x303 -> x308)
val x310 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0")))))),x305,x309)
val x312 = x311.contains(x310)
val x7472 = if (x312) {
val x313 = x311(x310)
x313
} else {
val x314 = x4
val x315 = x314.getOrElse(x310, x17)
val x316 = x315._1
val x317 = x315._2
val x318 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x316,x317)
val x319 = x311 + (x310 -> x318)
x5 = x319
val x322 = x5
val x321 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),x305,x309)
val x323 = x322.contains(x321)
val x7305 = if (x323) {
val x324 = x322(x321)
x324
} else {
val x325 = x314.getOrElse(x321, x17)
val x326 = x325._1
val x327 = x325._2
val x328 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x326,x327)
val x329 = x322 + (x321 -> x328)
x5 = x329
val x331 = {(x332:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x333:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x336 = Addr("__$4")
val x344 = x5
val x338 = x305 + ("__$4" -> x336)
val x335 = x333
val x334 = x332
val x339 = x334.head
val x340 = x335.getOrElse(x336, x15)
val x341 = x339.union(x340)
val x342 = x335 + (x336 -> x341)
val x343 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void())),x338,x342)
val x345 = x344.contains(x343)
val x7285 = if (x345) {
val x346 = x344(x343)
x346
} else {
val x347 = x4
val x348 = x347.getOrElse(x343, x17)
val x349 = x348._1
val x350 = x348._2
val x351 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x349,x350)
val x352 = x344 + (x343 -> x351)
x5 = x352
val x355 = x5
val x354 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),x338,x342)
val x356 = x355.contains(x354)
val x7237 = if (x356) {
val x357 = x355(x354)
x357
} else {
val x358 = x347.getOrElse(x354, x17)
val x359 = x358._1
val x360 = x358._2
val x361 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x359,x360)
val x362 = x355 + (x354 -> x361)
x5 = x362
val x364 = {(x365:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x366:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x369 = Addr("church1")
val x377 = x5
val x371 = x338 + ("church1" -> x369)
val x368 = x366
val x367 = x365
val x372 = x367.head
val x373 = x368.getOrElse(x369, x15)
val x374 = x372.union(x373)
val x375 = x368 + (x369 -> x374)
val x376 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1")))))))),x371,x375)
val x378 = x377.contains(x376)
val x7217 = if (x378) {
val x379 = x377(x376)
x379
} else {
val x380 = x4
val x381 = x380.getOrElse(x376, x17)
val x382 = x381._1
val x383 = x381._2
val x384 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x382,x383)
val x385 = x377 + (x376 -> x384)
x5 = x385
val x388 = x5
val x387 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),x371,x375)
val x389 = x388.contains(x387)
val x6991 = if (x389) {
val x390 = x388(x387)
x390
} else {
val x391 = x380.getOrElse(x387, x17)
val x392 = x391._1
val x393 = x391._2
val x394 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x392,x393)
val x395 = x388 + (x387 -> x394)
x5 = x395
val x397 = {(x398:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x399:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x402 = Addr("__$5")
val x410 = x5
val x404 = x371 + ("__$5" -> x402)
val x401 = x399
val x400 = x398
val x405 = x400.head
val x406 = x401.getOrElse(x402, x15)
val x407 = x405.union(x406)
val x408 = x401 + (x402 -> x407)
val x409 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void())),x404,x408)
val x411 = x410.contains(x409)
val x6971 = if (x411) {
val x412 = x410(x409)
x412
} else {
val x413 = x4
val x414 = x413.getOrElse(x409, x17)
val x415 = x414._1
val x416 = x414._2
val x417 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x415,x416)
val x418 = x410 + (x409 -> x417)
x5 = x418
val x421 = x5
val x420 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),x404,x408)
val x422 = x421.contains(x420)
val x6923 = if (x422) {
val x423 = x421(x420)
x423
} else {
val x424 = x413.getOrElse(x420, x17)
val x425 = x424._1
val x426 = x424._2
val x427 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x425,x426)
val x428 = x421 + (x420 -> x427)
x5 = x428
val x430 = {(x431:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x432:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x435 = Addr("church2")
val x443 = x5
val x437 = x404 + ("church2" -> x435)
val x434 = x432
val x433 = x431
val x438 = x433.head
val x439 = x434.getOrElse(x435, x15)
val x440 = x438.union(x439)
val x441 = x434 + (x435 -> x440)
val x442 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2")))))))))),x437,x441)
val x444 = x443.contains(x442)
val x6903 = if (x444) {
val x445 = x443(x442)
x445
} else {
val x446 = x4
val x447 = x446.getOrElse(x442, x17)
val x448 = x447._1
val x449 = x447._2
val x450 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x448,x449)
val x451 = x443 + (x442 -> x450)
x5 = x451
val x454 = x5
val x453 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),x437,x441)
val x455 = x454.contains(x453)
val x6619 = if (x455) {
val x456 = x454(x453)
x456
} else {
val x457 = x446.getOrElse(x453, x17)
val x458 = x457._1
val x459 = x457._2
val x460 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x458,x459)
val x461 = x454 + (x453 -> x460)
x5 = x461
val x463 = {(x464:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x465:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x468 = Addr("__$6")
val x476 = x5
val x470 = x437 + ("__$6" -> x468)
val x467 = x465
val x466 = x464
val x471 = x466.head
val x472 = x467.getOrElse(x468, x15)
val x473 = x471.union(x472)
val x474 = x467 + (x468 -> x473)
val x475 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void())),x470,x474)
val x477 = x476.contains(x475)
val x6599 = if (x477) {
val x478 = x476(x475)
x478
} else {
val x479 = x4
val x480 = x479.getOrElse(x475, x17)
val x481 = x480._1
val x482 = x480._2
val x483 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x481,x482)
val x484 = x476 + (x475 -> x483)
x5 = x484
val x487 = x5
val x486 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),x470,x474)
val x488 = x487.contains(x486)
val x6551 = if (x488) {
val x489 = x487(x486)
x489
} else {
val x490 = x479.getOrElse(x486, x17)
val x491 = x490._1
val x492 = x490._2
val x493 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x491,x492)
val x494 = x487 + (x486 -> x493)
x5 = x494
val x496 = {(x497:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x498:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x501 = Addr("church3")
val x509 = x5
val x503 = x470 + ("church3" -> x501)
val x500 = x498
val x499 = x497
val x504 = x499.head
val x505 = x500.getOrElse(x501, x15)
val x506 = x504.union(x505)
val x507 = x500 + (x501 -> x506)
val x508 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3")))))))))))),x503,x507)
val x510 = x509.contains(x508)
val x6531 = if (x510) {
val x511 = x509(x508)
x511
} else {
val x512 = x4
val x513 = x512.getOrElse(x508, x17)
val x514 = x513._1
val x515 = x513._2
val x516 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x514,x515)
val x517 = x509 + (x508 -> x516)
x5 = x517
val x520 = x5
val x519 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),x503,x507)
val x521 = x520.contains(x519)
val x6189 = if (x521) {
val x522 = x520(x519)
x522
} else {
val x523 = x512.getOrElse(x519, x17)
val x524 = x523._1
val x525 = x523._2
val x526 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x524,x525)
val x527 = x520 + (x519 -> x526)
x5 = x527
val x529 = {(x530:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x531:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x534 = Addr("__$7")
val x542 = x5
val x536 = x503 + ("__$7" -> x534)
val x533 = x531
val x532 = x530
val x537 = x532.head
val x538 = x533.getOrElse(x534, x15)
val x539 = x537.union(x538)
val x540 = x533 + (x534 -> x539)
val x541 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void())),x536,x540)
val x543 = x542.contains(x541)
val x6169 = if (x543) {
val x544 = x542(x541)
x544
} else {
val x545 = x4
val x546 = x545.getOrElse(x541, x17)
val x547 = x546._1
val x548 = x546._2
val x549 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x547,x548)
val x550 = x542 + (x541 -> x549)
x5 = x550
val x553 = x5
val x552 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),x536,x540)
val x554 = x553.contains(x552)
val x6121 = if (x554) {
val x555 = x553(x552)
x555
} else {
val x556 = x545.getOrElse(x552, x17)
val x557 = x556._1
val x558 = x556._2
val x559 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x557,x558)
val x560 = x553 + (x552 -> x559)
x5 = x560
val x562 = {(x563:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x564:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x567 = Addr("church0?")
val x575 = x5
val x569 = x536 + ("church0?" -> x567)
val x566 = x564
val x565 = x563
val x570 = x565.head
val x571 = x566.getOrElse(x567, x15)
val x572 = x570.union(x571)
val x573 = x566 + (x567 -> x572)
val x574 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true))))))),x569,x573)
val x576 = x575.contains(x574)
val x6101 = if (x576) {
val x577 = x575(x574)
x577
} else {
val x578 = x4
val x579 = x578.getOrElse(x574, x17)
val x580 = x579._1
val x581 = x579._2
val x582 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x580,x581)
val x583 = x575 + (x574 -> x582)
x5 = x583
val x586 = x5
val x585 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),x569,x573)
val x587 = x586.contains(x585)
val x5818 = if (x587) {
val x588 = x586(x585)
x588
} else {
val x589 = x578.getOrElse(x585, x17)
val x590 = x589._1
val x591 = x589._2
val x592 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x590,x591)
val x593 = x586 + (x585 -> x592)
x5 = x593
val x595 = {(x596:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x597:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x600 = Addr("__$8")
val x608 = x5
val x602 = x569 + ("__$8" -> x600)
val x599 = x597
val x598 = x596
val x603 = x598.head
val x604 = x599.getOrElse(x600, x15)
val x605 = x603.union(x604)
val x606 = x599 + (x600 -> x605)
val x607 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void())),x602,x606)
val x609 = x608.contains(x607)
val x5798 = if (x609) {
val x610 = x608(x607)
x610
} else {
val x611 = x4
val x612 = x611.getOrElse(x607, x17)
val x613 = x612._1
val x614 = x612._2
val x615 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x613,x614)
val x616 = x608 + (x607 -> x615)
x5 = x616
val x619 = x5
val x618 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),x602,x606)
val x620 = x619.contains(x618)
val x5750 = if (x620) {
val x621 = x619(x618)
x621
} else {
val x622 = x611.getOrElse(x618, x17)
val x623 = x622._1
val x624 = x622._2
val x625 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x623,x624)
val x626 = x619 + (x618 -> x625)
x5 = x626
val x628 = {(x629:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x630:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x633 = Addr("church=?")
val x641 = x5
val x635 = x602 + ("church=?" -> x633)
val x632 = x630
val x631 = x629
val x636 = x631.head
val x637 = x632.getOrElse(x633, x15)
val x638 = x636.union(x637)
val x639 = x632 + (x633 -> x638)
val x640 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1")))))))))))),x635,x639)
val x642 = x641.contains(x640)
val x5730 = if (x642) {
val x643 = x641(x640)
x643
} else {
val x644 = x4
val x645 = x644.getOrElse(x640, x17)
val x646 = x645._1
val x647 = x645._2
val x648 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x646,x647)
val x649 = x641 + (x640 -> x648)
x5 = x649
val x652 = x5
val x651 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),x635,x639)
val x653 = x652.contains(x651)
val x1421 = if (x653) {
val x654 = x652(x651)
x654
} else {
val x655 = x644.getOrElse(x651, x17)
val x656 = x655._1
val x657 = x655._2
val x658 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x656,x657)
val x659 = x652 + (x651 -> x658)
x5 = x659
val x661 = {(x662:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x663:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x666 = Addr("__$9")
val x674 = x5
val x668 = x635 + ("__$9" -> x666)
val x665 = x663
val x664 = x662
val x669 = x664.head
val x670 = x665.getOrElse(x666, x15)
val x671 = x669.union(x670)
val x672 = x665 + (x666 -> x671)
val x673 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3"))))))),x668,x672)
val x675 = x674.contains(x673)
val x1401 = if (x675) {
val x676 = x674(x673)
x676
} else {
val x677 = x4
val x678 = x677.getOrElse(x673, x17)
val x679 = x678._1
val x680 = x678._2
val x681 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x679,x680)
val x682 = x674 + (x673 -> x681)
x5 = x682
val x685 = x5
val x684 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),x668,x672)
val x686 = x685.contains(x684)
val x1005 = if (x686) {
val x687 = x685(x684)
x687
} else {
val x688 = x677.getOrElse(x684, x17)
val x689 = x688._1
val x690 = x688._2
val x691 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x689,x690)
val x692 = x685 + (x684 -> x691)
x5 = x692
val x695 = x5
val x694 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church=?"),x668,x672)
val x696 = x695.contains(x694)
val x720 = if (x696) {
val x697 = x695(x694)
x697
} else {
val x698 = x677.getOrElse(x694, x17)
val x699 = x698._1
val x700 = x698._2
val x701 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x699,x700)
val x702 = x695 + (x694 -> x701)
x5 = x702
val x706 = x5
val x704 = x668("church=?")
val x705 = x672.getOrElse(x704, x15)
val x707 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x705,x672)
val x708 = x699.union(x705)
val x715 = x672.foldLeft (x700) { case (x709, (x710, x711)) =>
val x712 = x709.getOrElse(x710, x15)
val x713 = x712.union(x711)
val x714 = x709 + (x710 -> x713)

x714
}
val x716 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x708,x715)
val x717 = x706 + (x694 -> x716)
x5 = x717
x707
}
val x724 = x5
val x722 = x720._2
val x723 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))),x668,x722)
val x725 = x724.contains(x723)
val x985 = if (x725) {
val x726 = x724(x723)
x726
} else {
val x727 = x677.getOrElse(x723, x17)
val x728 = x727._1
val x729 = x727._2
val x730 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x728,x729)
val x731 = x724 + (x723 -> x730)
x5 = x731
val x734 = x5
val x733 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("mult"),List(Var("church2"))),x668,x722)
val x735 = x734.contains(x733)
val x818 = if (x735) {
val x736 = x734(x733)
x736
} else {
val x737 = x677.getOrElse(x733, x17)
val x738 = x737._1
val x739 = x737._2
val x740 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x738,x739)
val x741 = x734 + (x733 -> x740)
x5 = x741
val x744 = x5
val x743 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("mult"),x668,x722)
val x745 = x744.contains(x743)
val x769 = if (x745) {
val x746 = x744(x743)
x746
} else {
val x747 = x677.getOrElse(x743, x17)
val x748 = x747._1
val x749 = x747._2
val x750 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x748,x749)
val x751 = x744 + (x743 -> x750)
x5 = x751
val x755 = x5
val x753 = x668("mult")
val x754 = x722.getOrElse(x753, x15)
val x756 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x754,x722)
val x757 = x748.union(x754)
val x764 = x722.foldLeft (x749) { case (x758, (x759, x760)) =>
val x761 = x758.getOrElse(x759, x15)
val x762 = x761.union(x760)
val x763 = x758 + (x759 -> x762)

x763
}
val x765 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x757,x764)
val x766 = x755 + (x743 -> x765)
x5 = x766
x756
}
val x773 = x5
val x771 = x769._2
val x772 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church2"),x668,x771)
val x774 = x773.contains(x772)
val x798 = if (x774) {
val x775 = x773(x772)
x775
} else {
val x776 = x677.getOrElse(x772, x17)
val x777 = x776._1
val x778 = x776._2
val x779 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x777,x778)
val x780 = x773 + (x772 -> x779)
x5 = x780
val x784 = x5
val x782 = x668("church2")
val x783 = x771.getOrElse(x782, x15)
val x785 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x783,x771)
val x786 = x777.union(x783)
val x793 = x771.foldLeft (x778) { case (x787, (x788, x789)) =>
val x790 = x787.getOrElse(x788, x15)
val x791 = x790.union(x789)
val x792 = x787 + (x788 -> x791)

x792
}
val x794 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x786,x793)
val x795 = x784 + (x772 -> x794)
x5 = x795
x785
}
val x770 = x769._1
val x799 = x798._1
val x800 = x798._2
val x801 = apply_closures_norep(x770, List(x799), x800)
val x804 = x5
val x802 = x801._1
val x803 = x801._2
val x805 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x802,x803)
val x806 = x738.union(x802)
val x813 = x803.foldLeft (x739) { case (x807, (x808, x809)) =>
val x810 = x807.getOrElse(x808, x15)
val x811 = x810.union(x809)
val x812 = x807 + (x808 -> x811)

x812
}
val x814 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x806,x813)
val x815 = x804 + (x733 -> x814)
x5 = x815
x805
}
val x822 = x5
val x820 = x818._2
val x821 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))),x668,x820)
val x823 = x822.contains(x821)
val x965 = if (x823) {
val x824 = x822(x821)
x824
} else {
val x825 = x677.getOrElse(x821, x17)
val x826 = x825._1
val x827 = x825._2
val x828 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x826,x827)
val x829 = x822 + (x821 -> x828)
x5 = x829
val x832 = x5
val x831 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("plus"),List(Var("church1"))),x668,x820)
val x833 = x832.contains(x831)
val x916 = if (x833) {
val x834 = x832(x831)
x834
} else {
val x835 = x677.getOrElse(x831, x17)
val x836 = x835._1
val x837 = x835._2
val x838 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x836,x837)
val x839 = x832 + (x831 -> x838)
x5 = x839
val x842 = x5
val x841 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("plus"),x668,x820)
val x843 = x842.contains(x841)
val x867 = if (x843) {
val x844 = x842(x841)
x844
} else {
val x845 = x677.getOrElse(x841, x17)
val x846 = x845._1
val x847 = x845._2
val x848 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x846,x847)
val x849 = x842 + (x841 -> x848)
x5 = x849
val x853 = x5
val x851 = x668("plus")
val x852 = x820.getOrElse(x851, x15)
val x854 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x852,x820)
val x855 = x846.union(x852)
val x862 = x820.foldLeft (x847) { case (x856, (x857, x858)) =>
val x859 = x856.getOrElse(x857, x15)
val x860 = x859.union(x858)
val x861 = x856 + (x857 -> x860)

x861
}
val x863 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x855,x862)
val x864 = x853 + (x841 -> x863)
x5 = x864
x854
}
val x871 = x5
val x869 = x867._2
val x870 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x668,x869)
val x872 = x871.contains(x870)
val x896 = if (x872) {
val x873 = x871(x870)
x873
} else {
val x874 = x677.getOrElse(x870, x17)
val x875 = x874._1
val x876 = x874._2
val x877 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x875,x876)
val x878 = x871 + (x870 -> x877)
x5 = x878
val x882 = x5
val x880 = x668("church1")
val x881 = x869.getOrElse(x880, x15)
val x883 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x881,x869)
val x884 = x875.union(x881)
val x891 = x869.foldLeft (x876) { case (x885, (x886, x887)) =>
val x888 = x885.getOrElse(x886, x15)
val x889 = x888.union(x887)
val x890 = x885 + (x886 -> x889)

x890
}
val x892 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x884,x891)
val x893 = x882 + (x870 -> x892)
x5 = x893
x883
}
val x868 = x867._1
val x897 = x896._1
val x898 = x896._2
val x899 = apply_closures_norep(x868, List(x897), x898)
val x902 = x5
val x900 = x899._1
val x901 = x899._2
val x903 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x900,x901)
val x904 = x836.union(x900)
val x911 = x901.foldLeft (x837) { case (x905, (x906, x907)) =>
val x908 = x905.getOrElse(x906, x15)
val x909 = x908.union(x907)
val x910 = x905 + (x906 -> x909)

x910
}
val x912 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x904,x911)
val x913 = x902 + (x831 -> x912)
x5 = x913
x903
}
val x920 = x5
val x918 = x916._2
val x919 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church3"),x668,x918)
val x921 = x920.contains(x919)
val x945 = if (x921) {
val x922 = x920(x919)
x922
} else {
val x923 = x677.getOrElse(x919, x17)
val x924 = x923._1
val x925 = x923._2
val x926 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x924,x925)
val x927 = x920 + (x919 -> x926)
x5 = x927
val x931 = x5
val x929 = x668("church3")
val x930 = x918.getOrElse(x929, x15)
val x932 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x930,x918)
val x933 = x924.union(x930)
val x940 = x918.foldLeft (x925) { case (x934, (x935, x936)) =>
val x937 = x934.getOrElse(x935, x15)
val x938 = x937.union(x936)
val x939 = x934 + (x935 -> x938)

x939
}
val x941 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x933,x940)
val x942 = x931 + (x919 -> x941)
x5 = x942
x932
}
val x917 = x916._1
val x946 = x945._1
val x947 = x945._2
val x948 = apply_closures_norep(x917, List(x946), x947)
val x951 = x5
val x949 = x948._1
val x950 = x948._2
val x952 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x949,x950)
val x953 = x826.union(x949)
val x960 = x950.foldLeft (x827) { case (x954, (x955, x956)) =>
val x957 = x954.getOrElse(x955, x15)
val x958 = x957.union(x956)
val x959 = x954 + (x955 -> x958)

x959
}
val x961 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x953,x960)
val x962 = x951 + (x821 -> x961)
x5 = x962
x952
}
val x819 = x818._1
val x966 = x965._1
val x967 = x965._2
val x968 = apply_closures_norep(x819, List(x966), x967)
val x971 = x5
val x969 = x968._1
val x970 = x968._2
val x972 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x969,x970)
val x973 = x728.union(x969)
val x980 = x970.foldLeft (x729) { case (x974, (x975, x976)) =>
val x977 = x974.getOrElse(x975, x15)
val x978 = x977.union(x976)
val x979 = x974 + (x975 -> x978)

x979
}
val x981 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x973,x980)
val x982 = x971 + (x723 -> x981)
x5 = x982
x972
}
val x721 = x720._1
val x986 = x985._1
val x987 = x985._2
val x988 = apply_closures_norep(x721, List(x986), x987)
val x991 = x5
val x989 = x988._1
val x990 = x988._2
val x992 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x989,x990)
val x993 = x689.union(x989)
val x1000 = x990.foldLeft (x690) { case (x994, (x995, x996)) =>
val x997 = x994.getOrElse(x995, x15)
val x998 = x997.union(x996)
val x999 = x994 + (x995 -> x998)

x999
}
val x1001 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x993,x1000)
val x1002 = x991 + (x684 -> x1001)
x5 = x1002
x992
}
val x1009 = x5
val x1007 = x1005._2
val x1008 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3"))))),x668,x1007)
val x1010 = x1009.contains(x1008)
val x1381 = if (x1010) {
val x1011 = x1009(x1008)
x1011
} else {
val x1012 = x677.getOrElse(x1008, x17)
val x1013 = x1012._1
val x1014 = x1012._2
val x1015 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1013,x1014)
val x1016 = x1009 + (x1008 -> x1015)
x5 = x1016
val x1019 = x5
val x1018 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),x668,x1007)
val x1020 = x1019.contains(x1018)
val x1217 = if (x1020) {
val x1021 = x1019(x1018)
x1021
} else {
val x1022 = x677.getOrElse(x1018, x17)
val x1023 = x1022._1
val x1024 = x1022._2
val x1025 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1023,x1024)
val x1026 = x1019 + (x1018 -> x1025)
x5 = x1026
val x1029 = x5
val x1028 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("plus"),x668,x1007)
val x1030 = x1029.contains(x1028)
val x1053 = if (x1030) {
val x1031 = x1029(x1028)
x1031
} else {
val x1032 = x677.getOrElse(x1028, x17)
val x1033 = x1032._1
val x1034 = x1032._2
val x1035 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1033,x1034)
val x1036 = x1029 + (x1028 -> x1035)
x5 = x1036
val x1039 = x5
val x851 = x668("plus")
val x1038 = x1007.getOrElse(x851, x15)
val x1040 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1038,x1007)
val x1041 = x1033.union(x1038)
val x1048 = x1007.foldLeft (x1034) { case (x1042, (x1043, x1044)) =>
val x1045 = x1042.getOrElse(x1043, x15)
val x1046 = x1045.union(x1044)
val x1047 = x1042 + (x1043 -> x1046)

x1047
}
val x1049 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1041,x1048)
val x1050 = x1039 + (x1028 -> x1049)
x5 = x1050
x1040
}
val x1057 = x5
val x1055 = x1053._2
val x1056 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))),x668,x1055)
val x1058 = x1057.contains(x1056)
val x1197 = if (x1058) {
val x1059 = x1057(x1056)
x1059
} else {
val x1060 = x677.getOrElse(x1056, x17)
val x1061 = x1060._1
val x1062 = x1060._2
val x1063 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1061,x1062)
val x1064 = x1057 + (x1056 -> x1063)
x5 = x1064
val x1067 = x5
val x1066 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("mult"),List(Var("church2"))),x668,x1055)
val x1068 = x1067.contains(x1066)
val x1149 = if (x1068) {
val x1069 = x1067(x1066)
x1069
} else {
val x1070 = x677.getOrElse(x1066, x17)
val x1071 = x1070._1
val x1072 = x1070._2
val x1073 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1071,x1072)
val x1074 = x1067 + (x1066 -> x1073)
x5 = x1074
val x1077 = x5
val x1076 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("mult"),x668,x1055)
val x1078 = x1077.contains(x1076)
val x1101 = if (x1078) {
val x1079 = x1077(x1076)
x1079
} else {
val x1080 = x677.getOrElse(x1076, x17)
val x1081 = x1080._1
val x1082 = x1080._2
val x1083 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1081,x1082)
val x1084 = x1077 + (x1076 -> x1083)
x5 = x1084
val x1087 = x5
val x753 = x668("mult")
val x1086 = x1055.getOrElse(x753, x15)
val x1088 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1086,x1055)
val x1089 = x1081.union(x1086)
val x1096 = x1055.foldLeft (x1082) { case (x1090, (x1091, x1092)) =>
val x1093 = x1090.getOrElse(x1091, x15)
val x1094 = x1093.union(x1092)
val x1095 = x1090 + (x1091 -> x1094)

x1095
}
val x1097 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1089,x1096)
val x1098 = x1087 + (x1076 -> x1097)
x5 = x1098
x1088
}
val x1105 = x5
val x1103 = x1101._2
val x1104 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church2"),x668,x1103)
val x1106 = x1105.contains(x1104)
val x1129 = if (x1106) {
val x1107 = x1105(x1104)
x1107
} else {
val x1108 = x677.getOrElse(x1104, x17)
val x1109 = x1108._1
val x1110 = x1108._2
val x1111 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1109,x1110)
val x1112 = x1105 + (x1104 -> x1111)
x5 = x1112
val x1115 = x5
val x782 = x668("church2")
val x1114 = x1103.getOrElse(x782, x15)
val x1116 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1114,x1103)
val x1117 = x1109.union(x1114)
val x1124 = x1103.foldLeft (x1110) { case (x1118, (x1119, x1120)) =>
val x1121 = x1118.getOrElse(x1119, x15)
val x1122 = x1121.union(x1120)
val x1123 = x1118 + (x1119 -> x1122)

x1123
}
val x1125 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1117,x1124)
val x1126 = x1115 + (x1104 -> x1125)
x5 = x1126
x1116
}
val x1102 = x1101._1
val x1130 = x1129._1
val x1131 = x1129._2
val x1132 = apply_closures_norep(x1102, List(x1130), x1131)
val x1135 = x5
val x1133 = x1132._1
val x1134 = x1132._2
val x1136 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1133,x1134)
val x1137 = x1071.union(x1133)
val x1144 = x1134.foldLeft (x1072) { case (x1138, (x1139, x1140)) =>
val x1141 = x1138.getOrElse(x1139, x15)
val x1142 = x1141.union(x1140)
val x1143 = x1138 + (x1139 -> x1142)

x1143
}
val x1145 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1137,x1144)
val x1146 = x1135 + (x1066 -> x1145)
x5 = x1146
x1136
}
val x1153 = x5
val x1151 = x1149._2
val x1152 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x668,x1151)
val x1154 = x1153.contains(x1152)
val x1177 = if (x1154) {
val x1155 = x1153(x1152)
x1155
} else {
val x1156 = x677.getOrElse(x1152, x17)
val x1157 = x1156._1
val x1158 = x1156._2
val x1159 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1157,x1158)
val x1160 = x1153 + (x1152 -> x1159)
x5 = x1160
val x1163 = x5
val x880 = x668("church1")
val x1162 = x1151.getOrElse(x880, x15)
val x1164 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1162,x1151)
val x1165 = x1157.union(x1162)
val x1172 = x1151.foldLeft (x1158) { case (x1166, (x1167, x1168)) =>
val x1169 = x1166.getOrElse(x1167, x15)
val x1170 = x1169.union(x1168)
val x1171 = x1166 + (x1167 -> x1170)

x1171
}
val x1173 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1165,x1172)
val x1174 = x1163 + (x1152 -> x1173)
x5 = x1174
x1164
}
val x1150 = x1149._1
val x1178 = x1177._1
val x1179 = x1177._2
val x1180 = apply_closures_norep(x1150, List(x1178), x1179)
val x1183 = x5
val x1181 = x1180._1
val x1182 = x1180._2
val x1184 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1181,x1182)
val x1185 = x1061.union(x1181)
val x1192 = x1182.foldLeft (x1062) { case (x1186, (x1187, x1188)) =>
val x1189 = x1186.getOrElse(x1187, x15)
val x1190 = x1189.union(x1188)
val x1191 = x1186 + (x1187 -> x1190)

x1191
}
val x1193 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1185,x1192)
val x1194 = x1183 + (x1056 -> x1193)
x5 = x1194
x1184
}
val x1054 = x1053._1
val x1198 = x1197._1
val x1199 = x1197._2
val x1200 = apply_closures_norep(x1054, List(x1198), x1199)
val x1203 = x5
val x1201 = x1200._1
val x1202 = x1200._2
val x1204 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1201,x1202)
val x1205 = x1023.union(x1201)
val x1212 = x1202.foldLeft (x1024) { case (x1206, (x1207, x1208)) =>
val x1209 = x1206.getOrElse(x1207, x15)
val x1210 = x1209.union(x1208)
val x1211 = x1206 + (x1207 -> x1210)

x1211
}
val x1213 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1205,x1212)
val x1214 = x1203 + (x1018 -> x1213)
x5 = x1214
x1204
}
val x1221 = x5
val x1219 = x1217._2
val x1220 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("mult"),List(Var("church2"))),List(Var("church3"))),x668,x1219)
val x1222 = x1221.contains(x1220)
val x1361 = if (x1222) {
val x1223 = x1221(x1220)
x1223
} else {
val x1224 = x677.getOrElse(x1220, x17)
val x1225 = x1224._1
val x1226 = x1224._2
val x1227 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1225,x1226)
val x1228 = x1221 + (x1220 -> x1227)
x5 = x1228
val x1231 = x5
val x1230 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("mult"),List(Var("church2"))),x668,x1219)
val x1232 = x1231.contains(x1230)
val x1313 = if (x1232) {
val x1233 = x1231(x1230)
x1233
} else {
val x1234 = x677.getOrElse(x1230, x17)
val x1235 = x1234._1
val x1236 = x1234._2
val x1237 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1235,x1236)
val x1238 = x1231 + (x1230 -> x1237)
x5 = x1238
val x1241 = x5
val x1240 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("mult"),x668,x1219)
val x1242 = x1241.contains(x1240)
val x1265 = if (x1242) {
val x1243 = x1241(x1240)
x1243
} else {
val x1244 = x677.getOrElse(x1240, x17)
val x1245 = x1244._1
val x1246 = x1244._2
val x1247 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1245,x1246)
val x1248 = x1241 + (x1240 -> x1247)
x5 = x1248
val x1251 = x5
val x753 = x668("mult")
val x1250 = x1219.getOrElse(x753, x15)
val x1252 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1250,x1219)
val x1253 = x1245.union(x1250)
val x1260 = x1219.foldLeft (x1246) { case (x1254, (x1255, x1256)) =>
val x1257 = x1254.getOrElse(x1255, x15)
val x1258 = x1257.union(x1256)
val x1259 = x1254 + (x1255 -> x1258)

x1259
}
val x1261 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1253,x1260)
val x1262 = x1251 + (x1240 -> x1261)
x5 = x1262
x1252
}
val x1269 = x5
val x1267 = x1265._2
val x1268 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church2"),x668,x1267)
val x1270 = x1269.contains(x1268)
val x1293 = if (x1270) {
val x1271 = x1269(x1268)
x1271
} else {
val x1272 = x677.getOrElse(x1268, x17)
val x1273 = x1272._1
val x1274 = x1272._2
val x1275 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1273,x1274)
val x1276 = x1269 + (x1268 -> x1275)
x5 = x1276
val x1279 = x5
val x782 = x668("church2")
val x1278 = x1267.getOrElse(x782, x15)
val x1280 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1278,x1267)
val x1281 = x1273.union(x1278)
val x1288 = x1267.foldLeft (x1274) { case (x1282, (x1283, x1284)) =>
val x1285 = x1282.getOrElse(x1283, x15)
val x1286 = x1285.union(x1284)
val x1287 = x1282 + (x1283 -> x1286)

x1287
}
val x1289 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1281,x1288)
val x1290 = x1279 + (x1268 -> x1289)
x5 = x1290
x1280
}
val x1266 = x1265._1
val x1294 = x1293._1
val x1295 = x1293._2
val x1296 = apply_closures_norep(x1266, List(x1294), x1295)
val x1299 = x5
val x1297 = x1296._1
val x1298 = x1296._2
val x1300 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1297,x1298)
val x1301 = x1235.union(x1297)
val x1308 = x1298.foldLeft (x1236) { case (x1302, (x1303, x1304)) =>
val x1305 = x1302.getOrElse(x1303, x15)
val x1306 = x1305.union(x1304)
val x1307 = x1302 + (x1303 -> x1306)

x1307
}
val x1309 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1301,x1308)
val x1310 = x1299 + (x1230 -> x1309)
x5 = x1310
x1300
}
val x1317 = x5
val x1315 = x1313._2
val x1316 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church3"),x668,x1315)
val x1318 = x1317.contains(x1316)
val x1341 = if (x1318) {
val x1319 = x1317(x1316)
x1319
} else {
val x1320 = x677.getOrElse(x1316, x17)
val x1321 = x1320._1
val x1322 = x1320._2
val x1323 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1321,x1322)
val x1324 = x1317 + (x1316 -> x1323)
x5 = x1324
val x1327 = x5
val x929 = x668("church3")
val x1326 = x1315.getOrElse(x929, x15)
val x1328 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1326,x1315)
val x1329 = x1321.union(x1326)
val x1336 = x1315.foldLeft (x1322) { case (x1330, (x1331, x1332)) =>
val x1333 = x1330.getOrElse(x1331, x15)
val x1334 = x1333.union(x1332)
val x1335 = x1330 + (x1331 -> x1334)

x1335
}
val x1337 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1329,x1336)
val x1338 = x1327 + (x1316 -> x1337)
x5 = x1338
x1328
}
val x1314 = x1313._1
val x1342 = x1341._1
val x1343 = x1341._2
val x1344 = apply_closures_norep(x1314, List(x1342), x1343)
val x1347 = x5
val x1345 = x1344._1
val x1346 = x1344._2
val x1348 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1345,x1346)
val x1349 = x1225.union(x1345)
val x1356 = x1346.foldLeft (x1226) { case (x1350, (x1351, x1352)) =>
val x1353 = x1350.getOrElse(x1351, x15)
val x1354 = x1353.union(x1352)
val x1355 = x1350 + (x1351 -> x1354)

x1355
}
val x1357 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1349,x1356)
val x1358 = x1347 + (x1220 -> x1357)
x5 = x1358
x1348
}
val x1218 = x1217._1
val x1362 = x1361._1
val x1363 = x1361._2
val x1364 = apply_closures_norep(x1218, List(x1362), x1363)
val x1367 = x5
val x1365 = x1364._1
val x1366 = x1364._2
val x1368 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1365,x1366)
val x1369 = x1013.union(x1365)
val x1376 = x1366.foldLeft (x1014) { case (x1370, (x1371, x1372)) =>
val x1373 = x1370.getOrElse(x1371, x15)
val x1374 = x1373.union(x1372)
val x1375 = x1370 + (x1371 -> x1374)

x1375
}
val x1377 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1369,x1376)
val x1378 = x1367 + (x1008 -> x1377)
x5 = x1378
x1368
}
val x1006 = x1005._1
val x1382 = x1381._1
val x1383 = x1381._2
val x1384 = apply_closures_norep(x1006, List(x1382), x1383)
val x1387 = x5
val x1385 = x1384._1
val x1386 = x1384._2
val x1388 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1385,x1386)
val x1389 = x679.union(x1385)
val x1396 = x1386.foldLeft (x680) { case (x1390, (x1391, x1392)) =>
val x1393 = x1390.getOrElse(x1391, x15)
val x1394 = x1393.union(x1392)
val x1395 = x1390 + (x1391 -> x1394)

x1395
}
val x1397 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1389,x1396)
val x1398 = x1387 + (x673 -> x1397)
x5 = x1398
x1388
}
val x1402 = x1401._1
val x1403 = x1401._2
val x1404 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1402,x1403)
x1404: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x1406 = Set[AbsValue](CompiledClo(x661,Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),x635))
val x1407 = x5
val x1408 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1406,x639)
val x1409 = x656.union(x1406)
val x1416 = x639.foldLeft (x657) { case (x1410, (x1411, x1412)) =>
val x1413 = x1410.getOrElse(x1411, x15)
val x1414 = x1413.union(x1412)
val x1415 = x1410 + (x1411 -> x1414)

x1415
}
val x1417 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1409,x1416)
val x1418 = x1407 + (x651 -> x1417)
x5 = x1418
x1408
}
val x1425 = x5
val x1423 = x1421._2
val x1424 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1")))))))))),x635,x1423)
val x1426 = x1425.contains(x1424)
val x5710 = if (x1426) {
val x1427 = x1425(x1424)
x1427
} else {
val x1428 = x644.getOrElse(x1424, x17)
val x1429 = x1428._1
val x1430 = x1428._2
val x1431 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1429,x1430)
val x1432 = x1425 + (x1424 -> x1431)
x5 = x1432
val x1435 = x5
val x1434 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))),x635,x1423)
val x1436 = x1435.contains(x1434)
val x5688 = if (x1436) {
val x1437 = x1435(x1434)
x1437
} else {
val x1438 = x644.getOrElse(x1434, x17)
val x1439 = x1438._1
val x1440 = x1438._2
val x1441 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1439,x1440)
val x1442 = x1435 + (x1434 -> x1441)
x5 = x1442
val x1444 = {(x1445:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x1446:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x1449 = Addr("e1")
val x1457 = x5
val x1451 = x635 + ("e1" -> x1449)
val x1448 = x1446
val x1447 = x1445
val x1452 = x1447.head
val x1453 = x1448.getOrElse(x1449, x15)
val x1454 = x1452.union(x1453)
val x1455 = x1448 + (x1449 -> x1454)
val x1456 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1")))))))),x1451,x1455)
val x1458 = x1457.contains(x1456)
val x5668 = if (x1458) {
val x1459 = x1457(x1456)
x1459
} else {
val x1460 = x4
val x1461 = x1460.getOrElse(x1456, x17)
val x1462 = x1461._1
val x1463 = x1461._2
val x1464 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1462,x1463)
val x1465 = x1457 + (x1456 -> x1464)
x5 = x1465
val x1467 = {(x1468:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x1469:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x1472 = Addr("e2")
val x1480 = x5
val x1474 = x1451 + ("e2" -> x1472)
val x1471 = x1469
val x1470 = x1468
val x1475 = x1470.head
val x1476 = x1471.getOrElse(x1472, x15)
val x1477 = x1475.union(x1476)
val x1478 = x1471 + (x1472 -> x1477)
val x1479 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))),x1474,x1478)
val x1481 = x1480.contains(x1479)
val x5648 = if (x1481) {
val x1482 = x1480(x1479)
x1482
} else {
val x1483 = x4
val x1484 = x1483.getOrElse(x1479, x17)
val x1485 = x1484._1
val x1486 = x1484._2
val x1487 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1485,x1486)
val x1488 = x1480 + (x1479 -> x1487)
x5 = x1488
val x1491 = x5
val x1490 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church0?"),List(Var("e1"))),x1474,x1478)
val x1492 = x1491.contains(x1490)
val x1575 = if (x1492) {
val x1493 = x1491(x1490)
x1493
} else {
val x1494 = x1483.getOrElse(x1490, x17)
val x1495 = x1494._1
val x1496 = x1494._2
val x1497 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1495,x1496)
val x1498 = x1491 + (x1490 -> x1497)
x5 = x1498
val x1501 = x5
val x1500 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church0?"),x1474,x1478)
val x1502 = x1501.contains(x1500)
val x1526 = if (x1502) {
val x1503 = x1501(x1500)
x1503
} else {
val x1504 = x1483.getOrElse(x1500, x17)
val x1505 = x1504._1
val x1506 = x1504._2
val x1507 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1505,x1506)
val x1508 = x1501 + (x1500 -> x1507)
x5 = x1508
val x1512 = x5
val x1510 = x1474("church0?")
val x1511 = x1478.getOrElse(x1510, x15)
val x1513 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1511,x1478)
val x1514 = x1505.union(x1511)
val x1521 = x1478.foldLeft (x1506) { case (x1515, (x1516, x1517)) =>
val x1518 = x1515.getOrElse(x1516, x15)
val x1519 = x1518.union(x1517)
val x1520 = x1515 + (x1516 -> x1519)

x1520
}
val x1522 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1514,x1521)
val x1523 = x1512 + (x1500 -> x1522)
x5 = x1523
x1513
}
val x1530 = x5
val x1528 = x1526._2
val x1529 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e1"),x1474,x1528)
val x1531 = x1530.contains(x1529)
val x1555 = if (x1531) {
val x1532 = x1530(x1529)
x1532
} else {
val x1533 = x1483.getOrElse(x1529, x17)
val x1534 = x1533._1
val x1535 = x1533._2
val x1536 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1534,x1535)
val x1537 = x1530 + (x1529 -> x1536)
x5 = x1537
val x1541 = x5
val x1539 = x1474("e1")
val x1540 = x1528.getOrElse(x1539, x15)
val x1542 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1540,x1528)
val x1543 = x1534.union(x1540)
val x1550 = x1528.foldLeft (x1535) { case (x1544, (x1545, x1546)) =>
val x1547 = x1544.getOrElse(x1545, x15)
val x1548 = x1547.union(x1546)
val x1549 = x1544 + (x1545 -> x1548)

x1549
}
val x1551 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1543,x1550)
val x1552 = x1541 + (x1529 -> x1551)
x5 = x1552
x1542
}
val x1527 = x1526._1
val x1556 = x1555._1
val x1557 = x1555._2
val x1558 = apply_closures_norep(x1527, List(x1556), x1557)
val x1561 = x5
val x1559 = x1558._1
val x1560 = x1558._2
val x1562 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1559,x1560)
val x1563 = x1495.union(x1559)
val x1570 = x1560.foldLeft (x1496) { case (x1564, (x1565, x1566)) =>
val x1567 = x1564.getOrElse(x1565, x15)
val x1568 = x1567.union(x1566)
val x1569 = x1564 + (x1565 -> x1568)

x1569
}
val x1571 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1563,x1570)
val x1572 = x1561 + (x1490 -> x1571)
x5 = x1572
x1562
}
val x1579 = x5
val x1577 = x1575._2
val x1578 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church0?"),List(Var("e2"))),x1474,x1577)
val x1580 = x1579.contains(x1578)
val x1662 = if (x1580) {
val x1581 = x1579(x1578)
x1581
} else {
val x1582 = x1483.getOrElse(x1578, x17)
val x1583 = x1582._1
val x1584 = x1582._2
val x1585 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1583,x1584)
val x1586 = x1579 + (x1578 -> x1585)
x5 = x1586
val x1589 = x5
val x1588 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church0?"),x1474,x1577)
val x1590 = x1589.contains(x1588)
val x1613 = if (x1590) {
val x1591 = x1589(x1588)
x1591
} else {
val x1592 = x1483.getOrElse(x1588, x17)
val x1593 = x1592._1
val x1594 = x1592._2
val x1595 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1593,x1594)
val x1596 = x1589 + (x1588 -> x1595)
x5 = x1596
val x1599 = x5
val x1510 = x1474("church0?")
val x1598 = x1577.getOrElse(x1510, x15)
val x1600 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1598,x1577)
val x1601 = x1593.union(x1598)
val x1608 = x1577.foldLeft (x1594) { case (x1602, (x1603, x1604)) =>
val x1605 = x1602.getOrElse(x1603, x15)
val x1606 = x1605.union(x1604)
val x1607 = x1602 + (x1603 -> x1606)

x1607
}
val x1609 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1601,x1608)
val x1610 = x1599 + (x1588 -> x1609)
x5 = x1610
x1600
}
val x1617 = x5
val x1615 = x1613._2
val x1616 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x1615)
val x1618 = x1617.contains(x1616)
val x1642 = if (x1618) {
val x1619 = x1617(x1616)
x1619
} else {
val x1620 = x1483.getOrElse(x1616, x17)
val x1621 = x1620._1
val x1622 = x1620._2
val x1623 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1621,x1622)
val x1624 = x1617 + (x1616 -> x1623)
x5 = x1624
val x1628 = x5
val x1626 = x1474("e2")
val x1627 = x1615.getOrElse(x1626, x15)
val x1629 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1627,x1615)
val x1630 = x1621.union(x1627)
val x1637 = x1615.foldLeft (x1622) { case (x1631, (x1632, x1633)) =>
val x1634 = x1631.getOrElse(x1632, x15)
val x1635 = x1634.union(x1633)
val x1636 = x1631 + (x1632 -> x1635)

x1636
}
val x1638 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1630,x1637)
val x1639 = x1628 + (x1616 -> x1638)
x5 = x1639
x1629
}
val x1614 = x1613._1
val x1643 = x1642._1
val x1644 = x1642._2
val x1645 = apply_closures_norep(x1614, List(x1643), x1644)
val x1648 = x5
val x1646 = x1645._1
val x1647 = x1645._2
val x1649 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1646,x1647)
val x1650 = x1583.union(x1646)
val x1657 = x1647.foldLeft (x1584) { case (x1651, (x1652, x1653)) =>
val x1654 = x1651.getOrElse(x1652, x15)
val x1655 = x1654.union(x1653)
val x1656 = x1651 + (x1652 -> x1655)

x1656
}
val x1658 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1650,x1657)
val x1659 = x1648 + (x1578 -> x1658)
x5 = x1659
x1649
}
val x1666 = x5
val x1665 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1")))))),x1474,x1577)
val x1667 = x1666.contains(x1665)
val x2939 = if (x1667) {
val x1668 = x1666(x1665)
x1668
} else {
val x1669 = x1483.getOrElse(x1665, x17)
val x1670 = x1669._1
val x1671 = x1669._2
val x1672 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1670,x1671)
val x1673 = x1666 + (x1665 -> x1672)
x5 = x1673
val x1675 = x5
val x1676 = x1675.contains(x1578)
val x1745 = if (x1676) {
val x1677 = x1675(x1578)
x1677
} else {
val x1582 = x1483.getOrElse(x1578, x17)
val x1583 = x1582._1
val x1584 = x1582._2
val x1585 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1583,x1584)
val x1678 = x1675 + (x1578 -> x1585)
x5 = x1678
val x1680 = x5
val x1588 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church0?"),x1474,x1577)
val x1681 = x1680.contains(x1588)
val x1697 = if (x1681) {
val x1682 = x1680(x1588)
x1682
} else {
val x1510 = x1474("church0?")
val x1598 = x1577.getOrElse(x1510, x15)
val x1600 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1598,x1577)
val x1592 = x1483.getOrElse(x1588, x17)
val x1593 = x1592._1
val x1594 = x1592._2
val x1595 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1593,x1594)
val x1683 = x1680 + (x1588 -> x1595)
x5 = x1683
val x1685 = x5
val x1601 = x1593.union(x1598)
val x1692 = x1577.foldLeft (x1594) { case (x1686, (x1687, x1688)) =>
val x1689 = x1686.getOrElse(x1687, x15)
val x1690 = x1689.union(x1688)
val x1691 = x1686 + (x1687 -> x1690)

x1691
}
val x1693 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1601,x1692)
val x1694 = x1685 + (x1588 -> x1693)
x5 = x1694
x1600
}
val x1701 = x5
val x1699 = x1697._2
val x1700 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x1699)
val x1702 = x1701.contains(x1700)
val x1725 = if (x1702) {
val x1703 = x1701(x1700)
x1703
} else {
val x1704 = x1483.getOrElse(x1700, x17)
val x1705 = x1704._1
val x1706 = x1704._2
val x1707 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1705,x1706)
val x1708 = x1701 + (x1700 -> x1707)
x5 = x1708
val x1711 = x5
val x1626 = x1474("e2")
val x1710 = x1699.getOrElse(x1626, x15)
val x1712 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1710,x1699)
val x1713 = x1705.union(x1710)
val x1720 = x1699.foldLeft (x1706) { case (x1714, (x1715, x1716)) =>
val x1717 = x1714.getOrElse(x1715, x15)
val x1718 = x1717.union(x1716)
val x1719 = x1714 + (x1715 -> x1718)

x1719
}
val x1721 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1713,x1720)
val x1722 = x1711 + (x1700 -> x1721)
x5 = x1722
x1712
}
val x1698 = x1697._1
val x1726 = x1725._1
val x1727 = x1725._2
val x1728 = apply_closures_norep(x1698, List(x1726), x1727)
val x1731 = x5
val x1729 = x1728._1
val x1730 = x1728._2
val x1732 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1729,x1730)
val x1733 = x1583.union(x1729)
val x1740 = x1730.foldLeft (x1584) { case (x1734, (x1735, x1736)) =>
val x1737 = x1734.getOrElse(x1735, x15)
val x1738 = x1737.union(x1736)
val x1739 = x1734 + (x1735 -> x1738)

x1739
}
val x1741 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1733,x1740)
val x1742 = x1731 + (x1578 -> x1741)
x5 = x1742
x1732
}
val x1749 = x5
val x1747 = x1745._2
val x1748 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](BoolLit(false),x1474,x1747)
val x1750 = x1749.contains(x1748)
val x1773 = if (x1750) {
val x1751 = x1749(x1748)
x1751
} else {
val x1752 = x1483.getOrElse(x1748, x17)
val x1753 = x1752._1
val x1754 = x1752._2
val x1755 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1753,x1754)
val x1756 = x1749 + (x1748 -> x1755)
x5 = x1756
val x1758 = Set[AbsValue](BoolV())
val x1759 = x5
val x1760 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1758,x1747)
val x1761 = x1753.union(x1758)
val x1768 = x1747.foldLeft (x1754) { case (x1762, (x1763, x1764)) =>
val x1765 = x1762.getOrElse(x1763, x15)
val x1766 = x1765.union(x1764)
val x1767 = x1762 + (x1763 -> x1766)

x1767
}
val x1769 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1761,x1768)
val x1770 = x1759 + (x1748 -> x1769)
x5 = x1770
x1760
}
val x1777 = x5
val x1776 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))),x1474,x1747)
val x1778 = x1777.contains(x1776)
val x2152 = if (x1778) {
val x1779 = x1777(x1776)
x1779
} else {
val x1780 = x1483.getOrElse(x1776, x17)
val x1781 = x1780._1
val x1782 = x1780._2
val x1783 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1781,x1782)
val x1784 = x1777 + (x1776 -> x1783)
x5 = x1784
val x1787 = x5
val x1786 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),x1474,x1747)
val x1788 = x1787.contains(x1786)
val x1988 = if (x1788) {
val x1789 = x1787(x1786)
x1789
} else {
val x1790 = x1483.getOrElse(x1786, x17)
val x1791 = x1790._1
val x1792 = x1790._2
val x1793 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1791,x1792)
val x1794 = x1787 + (x1786 -> x1793)
x5 = x1794
val x1797 = x5
val x1796 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church=?"),x1474,x1747)
val x1798 = x1797.contains(x1796)
val x1822 = if (x1798) {
val x1799 = x1797(x1796)
x1799
} else {
val x1800 = x1483.getOrElse(x1796, x17)
val x1801 = x1800._1
val x1802 = x1800._2
val x1803 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1801,x1802)
val x1804 = x1797 + (x1796 -> x1803)
x5 = x1804
val x1808 = x5
val x1806 = x1474("church=?")
val x1807 = x1747.getOrElse(x1806, x15)
val x1809 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1807,x1747)
val x1810 = x1801.union(x1807)
val x1817 = x1747.foldLeft (x1802) { case (x1811, (x1812, x1813)) =>
val x1814 = x1811.getOrElse(x1812, x15)
val x1815 = x1814.union(x1813)
val x1816 = x1811 + (x1812 -> x1815)

x1816
}
val x1818 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1810,x1817)
val x1819 = x1808 + (x1796 -> x1818)
x5 = x1819
x1809
}
val x1826 = x5
val x1824 = x1822._2
val x1825 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))),x1474,x1824)
val x1827 = x1826.contains(x1825)
val x1968 = if (x1827) {
val x1828 = x1826(x1825)
x1828
} else {
val x1829 = x1483.getOrElse(x1825, x17)
val x1830 = x1829._1
val x1831 = x1829._2
val x1832 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1830,x1831)
val x1833 = x1826 + (x1825 -> x1832)
x5 = x1833
val x1836 = x5
val x1835 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e1"))),x1474,x1824)
val x1837 = x1836.contains(x1835)
val x1919 = if (x1837) {
val x1838 = x1836(x1835)
x1838
} else {
val x1839 = x1483.getOrElse(x1835, x17)
val x1840 = x1839._1
val x1841 = x1839._2
val x1842 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1840,x1841)
val x1843 = x1836 + (x1835 -> x1842)
x5 = x1843
val x1846 = x5
val x1845 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x1824)
val x1847 = x1846.contains(x1845)
val x1871 = if (x1847) {
val x1848 = x1846(x1845)
x1848
} else {
val x1849 = x1483.getOrElse(x1845, x17)
val x1850 = x1849._1
val x1851 = x1849._2
val x1852 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1850,x1851)
val x1853 = x1846 + (x1845 -> x1852)
x5 = x1853
val x1857 = x5
val x1855 = x1474("sub")
val x1856 = x1824.getOrElse(x1855, x15)
val x1858 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1856,x1824)
val x1859 = x1850.union(x1856)
val x1866 = x1824.foldLeft (x1851) { case (x1860, (x1861, x1862)) =>
val x1863 = x1860.getOrElse(x1861, x15)
val x1864 = x1863.union(x1862)
val x1865 = x1860 + (x1861 -> x1864)

x1865
}
val x1867 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1859,x1866)
val x1868 = x1857 + (x1845 -> x1867)
x5 = x1868
x1858
}
val x1875 = x5
val x1873 = x1871._2
val x1874 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e1"),x1474,x1873)
val x1876 = x1875.contains(x1874)
val x1899 = if (x1876) {
val x1877 = x1875(x1874)
x1877
} else {
val x1878 = x1483.getOrElse(x1874, x17)
val x1879 = x1878._1
val x1880 = x1878._2
val x1881 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1879,x1880)
val x1882 = x1875 + (x1874 -> x1881)
x5 = x1882
val x1885 = x5
val x1539 = x1474("e1")
val x1884 = x1873.getOrElse(x1539, x15)
val x1886 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1884,x1873)
val x1887 = x1879.union(x1884)
val x1894 = x1873.foldLeft (x1880) { case (x1888, (x1889, x1890)) =>
val x1891 = x1888.getOrElse(x1889, x15)
val x1892 = x1891.union(x1890)
val x1893 = x1888 + (x1889 -> x1892)

x1893
}
val x1895 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1887,x1894)
val x1896 = x1885 + (x1874 -> x1895)
x5 = x1896
x1886
}
val x1872 = x1871._1
val x1900 = x1899._1
val x1901 = x1899._2
val x1902 = apply_closures_norep(x1872, List(x1900), x1901)
val x1905 = x5
val x1903 = x1902._1
val x1904 = x1902._2
val x1906 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1903,x1904)
val x1907 = x1840.union(x1903)
val x1914 = x1904.foldLeft (x1841) { case (x1908, (x1909, x1910)) =>
val x1911 = x1908.getOrElse(x1909, x15)
val x1912 = x1911.union(x1910)
val x1913 = x1908 + (x1909 -> x1912)

x1913
}
val x1915 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1907,x1914)
val x1916 = x1905 + (x1835 -> x1915)
x5 = x1916
x1906
}
val x1923 = x5
val x1921 = x1919._2
val x1922 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x1921)
val x1924 = x1923.contains(x1922)
val x1948 = if (x1924) {
val x1925 = x1923(x1922)
x1925
} else {
val x1926 = x1483.getOrElse(x1922, x17)
val x1927 = x1926._1
val x1928 = x1926._2
val x1929 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1927,x1928)
val x1930 = x1923 + (x1922 -> x1929)
x5 = x1930
val x1934 = x5
val x1932 = x1474("church1")
val x1933 = x1921.getOrElse(x1932, x15)
val x1935 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1933,x1921)
val x1936 = x1927.union(x1933)
val x1943 = x1921.foldLeft (x1928) { case (x1937, (x1938, x1939)) =>
val x1940 = x1937.getOrElse(x1938, x15)
val x1941 = x1940.union(x1939)
val x1942 = x1937 + (x1938 -> x1941)

x1942
}
val x1944 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1936,x1943)
val x1945 = x1934 + (x1922 -> x1944)
x5 = x1945
x1935
}
val x1920 = x1919._1
val x1949 = x1948._1
val x1950 = x1948._2
val x1951 = apply_closures_norep(x1920, List(x1949), x1950)
val x1954 = x5
val x1952 = x1951._1
val x1953 = x1951._2
val x1955 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1952,x1953)
val x1956 = x1830.union(x1952)
val x1963 = x1953.foldLeft (x1831) { case (x1957, (x1958, x1959)) =>
val x1960 = x1957.getOrElse(x1958, x15)
val x1961 = x1960.union(x1959)
val x1962 = x1957 + (x1958 -> x1961)

x1962
}
val x1964 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1956,x1963)
val x1965 = x1954 + (x1825 -> x1964)
x5 = x1965
x1955
}
val x1823 = x1822._1
val x1969 = x1968._1
val x1970 = x1968._2
val x1971 = apply_closures_norep(x1823, List(x1969), x1970)
val x1974 = x5
val x1972 = x1971._1
val x1973 = x1971._2
val x1975 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1972,x1973)
val x1976 = x1791.union(x1972)
val x1983 = x1973.foldLeft (x1792) { case (x1977, (x1978, x1979)) =>
val x1980 = x1977.getOrElse(x1978, x15)
val x1981 = x1980.union(x1979)
val x1982 = x1977 + (x1978 -> x1981)

x1982
}
val x1984 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1976,x1983)
val x1985 = x1974 + (x1786 -> x1984)
x5 = x1985
x1975
}
val x1992 = x5
val x1990 = x1988._2
val x1991 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))),x1474,x1990)
val x1993 = x1992.contains(x1991)
val x2132 = if (x1993) {
val x1994 = x1992(x1991)
x1994
} else {
val x1995 = x1483.getOrElse(x1991, x17)
val x1996 = x1995._1
val x1997 = x1995._2
val x1998 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1996,x1997)
val x1999 = x1992 + (x1991 -> x1998)
x5 = x1999
val x2002 = x5
val x2001 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e2"))),x1474,x1990)
val x2003 = x2002.contains(x2001)
val x2084 = if (x2003) {
val x2004 = x2002(x2001)
x2004
} else {
val x2005 = x1483.getOrElse(x2001, x17)
val x2006 = x2005._1
val x2007 = x2005._2
val x2008 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2006,x2007)
val x2009 = x2002 + (x2001 -> x2008)
x5 = x2009
val x2012 = x5
val x2011 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x1990)
val x2013 = x2012.contains(x2011)
val x2036 = if (x2013) {
val x2014 = x2012(x2011)
x2014
} else {
val x2015 = x1483.getOrElse(x2011, x17)
val x2016 = x2015._1
val x2017 = x2015._2
val x2018 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2016,x2017)
val x2019 = x2012 + (x2011 -> x2018)
x5 = x2019
val x2022 = x5
val x1855 = x1474("sub")
val x2021 = x1990.getOrElse(x1855, x15)
val x2023 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2021,x1990)
val x2024 = x2016.union(x2021)
val x2031 = x1990.foldLeft (x2017) { case (x2025, (x2026, x2027)) =>
val x2028 = x2025.getOrElse(x2026, x15)
val x2029 = x2028.union(x2027)
val x2030 = x2025 + (x2026 -> x2029)

x2030
}
val x2032 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2024,x2031)
val x2033 = x2022 + (x2011 -> x2032)
x5 = x2033
x2023
}
val x2040 = x5
val x2038 = x2036._2
val x2039 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x2038)
val x2041 = x2040.contains(x2039)
val x2064 = if (x2041) {
val x2042 = x2040(x2039)
x2042
} else {
val x2043 = x1483.getOrElse(x2039, x17)
val x2044 = x2043._1
val x2045 = x2043._2
val x2046 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2044,x2045)
val x2047 = x2040 + (x2039 -> x2046)
x5 = x2047
val x2050 = x5
val x1626 = x1474("e2")
val x2049 = x2038.getOrElse(x1626, x15)
val x2051 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2049,x2038)
val x2052 = x2044.union(x2049)
val x2059 = x2038.foldLeft (x2045) { case (x2053, (x2054, x2055)) =>
val x2056 = x2053.getOrElse(x2054, x15)
val x2057 = x2056.union(x2055)
val x2058 = x2053 + (x2054 -> x2057)

x2058
}
val x2060 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2052,x2059)
val x2061 = x2050 + (x2039 -> x2060)
x5 = x2061
x2051
}
val x2037 = x2036._1
val x2065 = x2064._1
val x2066 = x2064._2
val x2067 = apply_closures_norep(x2037, List(x2065), x2066)
val x2070 = x5
val x2068 = x2067._1
val x2069 = x2067._2
val x2071 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2068,x2069)
val x2072 = x2006.union(x2068)
val x2079 = x2069.foldLeft (x2007) { case (x2073, (x2074, x2075)) =>
val x2076 = x2073.getOrElse(x2074, x15)
val x2077 = x2076.union(x2075)
val x2078 = x2073 + (x2074 -> x2077)

x2078
}
val x2080 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2072,x2079)
val x2081 = x2070 + (x2001 -> x2080)
x5 = x2081
x2071
}
val x2088 = x5
val x2086 = x2084._2
val x2087 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x2086)
val x2089 = x2088.contains(x2087)
val x2112 = if (x2089) {
val x2090 = x2088(x2087)
x2090
} else {
val x2091 = x1483.getOrElse(x2087, x17)
val x2092 = x2091._1
val x2093 = x2091._2
val x2094 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2092,x2093)
val x2095 = x2088 + (x2087 -> x2094)
x5 = x2095
val x2098 = x5
val x1932 = x1474("church1")
val x2097 = x2086.getOrElse(x1932, x15)
val x2099 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2097,x2086)
val x2100 = x2092.union(x2097)
val x2107 = x2086.foldLeft (x2093) { case (x2101, (x2102, x2103)) =>
val x2104 = x2101.getOrElse(x2102, x15)
val x2105 = x2104.union(x2103)
val x2106 = x2101 + (x2102 -> x2105)

x2106
}
val x2108 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2100,x2107)
val x2109 = x2098 + (x2087 -> x2108)
x5 = x2109
x2099
}
val x2085 = x2084._1
val x2113 = x2112._1
val x2114 = x2112._2
val x2115 = apply_closures_norep(x2085, List(x2113), x2114)
val x2118 = x5
val x2116 = x2115._1
val x2117 = x2115._2
val x2119 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2116,x2117)
val x2120 = x1996.union(x2116)
val x2127 = x2117.foldLeft (x1997) { case (x2121, (x2122, x2123)) =>
val x2124 = x2121.getOrElse(x2122, x15)
val x2125 = x2124.union(x2123)
val x2126 = x2121 + (x2122 -> x2125)

x2126
}
val x2128 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2120,x2127)
val x2129 = x2118 + (x1991 -> x2128)
x5 = x2129
x2119
}
val x1989 = x1988._1
val x2133 = x2132._1
val x2134 = x2132._2
val x2135 = apply_closures_norep(x1989, List(x2133), x2134)
val x2138 = x5
val x2136 = x2135._1
val x2137 = x2135._2
val x2139 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2136,x2137)
val x2140 = x1781.union(x2136)
val x2147 = x2137.foldLeft (x1782) { case (x2141, (x2142, x2143)) =>
val x2144 = x2141.getOrElse(x2142, x15)
val x2145 = x2144.union(x2143)
val x2146 = x2141 + (x2142 -> x2145)

x2146
}
val x2148 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2140,x2147)
val x2149 = x2138 + (x1776 -> x2148)
x5 = x2149
x2139
}
val x2155 = x5
val x2156 = x2155.contains(x1748)
val x2175 = if (x2156) {
val x2157 = x2155(x1748)
x2157
} else {
val x1752 = x1483.getOrElse(x1748, x17)
val x1753 = x1752._1
val x1754 = x1752._2
val x1755 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1753,x1754)
val x2158 = x2155 + (x1748 -> x1755)
x5 = x2158
val x2160 = Set[AbsValue](BoolV())
val x2161 = x5
val x2162 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2160,x1747)
val x2163 = x1753.union(x2160)
val x2170 = x1747.foldLeft (x1754) { case (x2164, (x2165, x2166)) =>
val x2167 = x2164.getOrElse(x2165, x15)
val x2168 = x2167.union(x2166)
val x2169 = x2164 + (x2165 -> x2168)

x2169
}
val x2171 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2163,x2170)
val x2172 = x2161 + (x1748 -> x2171)
x5 = x2172
x2162
}
val x2178 = x5
val x2179 = x2178.contains(x1776)
val x2533 = if (x2179) {
val x2180 = x2178(x1776)
x2180
} else {
val x1780 = x1483.getOrElse(x1776, x17)
val x1781 = x1780._1
val x1782 = x1780._2
val x1783 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1781,x1782)
val x2181 = x2178 + (x1776 -> x1783)
x5 = x2181
val x2183 = x5
val x1786 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),x1474,x1747)
val x2184 = x2183.contains(x1786)
val x2369 = if (x2184) {
val x2185 = x2183(x1786)
x2185
} else {
val x1790 = x1483.getOrElse(x1786, x17)
val x1791 = x1790._1
val x1792 = x1790._2
val x1793 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1791,x1792)
val x2186 = x2183 + (x1786 -> x1793)
x5 = x2186
val x2188 = x5
val x1796 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church=?"),x1474,x1747)
val x2189 = x2188.contains(x1796)
val x2205 = if (x2189) {
val x2190 = x2188(x1796)
x2190
} else {
val x1806 = x1474("church=?")
val x1807 = x1747.getOrElse(x1806, x15)
val x1809 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1807,x1747)
val x1800 = x1483.getOrElse(x1796, x17)
val x1801 = x1800._1
val x1802 = x1800._2
val x1803 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1801,x1802)
val x2191 = x2188 + (x1796 -> x1803)
x5 = x2191
val x2193 = x5
val x1810 = x1801.union(x1807)
val x2200 = x1747.foldLeft (x1802) { case (x2194, (x2195, x2196)) =>
val x2197 = x2194.getOrElse(x2195, x15)
val x2198 = x2197.union(x2196)
val x2199 = x2194 + (x2195 -> x2198)

x2199
}
val x2201 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1810,x2200)
val x2202 = x2193 + (x1796 -> x2201)
x5 = x2202
x1809
}
val x2209 = x5
val x2207 = x2205._2
val x2208 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))),x1474,x2207)
val x2210 = x2209.contains(x2208)
val x2349 = if (x2210) {
val x2211 = x2209(x2208)
x2211
} else {
val x2212 = x1483.getOrElse(x2208, x17)
val x2213 = x2212._1
val x2214 = x2212._2
val x2215 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2213,x2214)
val x2216 = x2209 + (x2208 -> x2215)
x5 = x2216
val x2219 = x5
val x2218 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e1"))),x1474,x2207)
val x2220 = x2219.contains(x2218)
val x2301 = if (x2220) {
val x2221 = x2219(x2218)
x2221
} else {
val x2222 = x1483.getOrElse(x2218, x17)
val x2223 = x2222._1
val x2224 = x2222._2
val x2225 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2223,x2224)
val x2226 = x2219 + (x2218 -> x2225)
x5 = x2226
val x2229 = x5
val x2228 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x2207)
val x2230 = x2229.contains(x2228)
val x2253 = if (x2230) {
val x2231 = x2229(x2228)
x2231
} else {
val x2232 = x1483.getOrElse(x2228, x17)
val x2233 = x2232._1
val x2234 = x2232._2
val x2235 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2233,x2234)
val x2236 = x2229 + (x2228 -> x2235)
x5 = x2236
val x2239 = x5
val x1855 = x1474("sub")
val x2238 = x2207.getOrElse(x1855, x15)
val x2240 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2238,x2207)
val x2241 = x2233.union(x2238)
val x2248 = x2207.foldLeft (x2234) { case (x2242, (x2243, x2244)) =>
val x2245 = x2242.getOrElse(x2243, x15)
val x2246 = x2245.union(x2244)
val x2247 = x2242 + (x2243 -> x2246)

x2247
}
val x2249 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2241,x2248)
val x2250 = x2239 + (x2228 -> x2249)
x5 = x2250
x2240
}
val x2257 = x5
val x2255 = x2253._2
val x2256 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e1"),x1474,x2255)
val x2258 = x2257.contains(x2256)
val x2281 = if (x2258) {
val x2259 = x2257(x2256)
x2259
} else {
val x2260 = x1483.getOrElse(x2256, x17)
val x2261 = x2260._1
val x2262 = x2260._2
val x2263 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2261,x2262)
val x2264 = x2257 + (x2256 -> x2263)
x5 = x2264
val x2267 = x5
val x1539 = x1474("e1")
val x2266 = x2255.getOrElse(x1539, x15)
val x2268 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2266,x2255)
val x2269 = x2261.union(x2266)
val x2276 = x2255.foldLeft (x2262) { case (x2270, (x2271, x2272)) =>
val x2273 = x2270.getOrElse(x2271, x15)
val x2274 = x2273.union(x2272)
val x2275 = x2270 + (x2271 -> x2274)

x2275
}
val x2277 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2269,x2276)
val x2278 = x2267 + (x2256 -> x2277)
x5 = x2278
x2268
}
val x2254 = x2253._1
val x2282 = x2281._1
val x2283 = x2281._2
val x2284 = apply_closures_norep(x2254, List(x2282), x2283)
val x2287 = x5
val x2285 = x2284._1
val x2286 = x2284._2
val x2288 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2285,x2286)
val x2289 = x2223.union(x2285)
val x2296 = x2286.foldLeft (x2224) { case (x2290, (x2291, x2292)) =>
val x2293 = x2290.getOrElse(x2291, x15)
val x2294 = x2293.union(x2292)
val x2295 = x2290 + (x2291 -> x2294)

x2295
}
val x2297 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2289,x2296)
val x2298 = x2287 + (x2218 -> x2297)
x5 = x2298
x2288
}
val x2305 = x5
val x2303 = x2301._2
val x2304 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x2303)
val x2306 = x2305.contains(x2304)
val x2329 = if (x2306) {
val x2307 = x2305(x2304)
x2307
} else {
val x2308 = x1483.getOrElse(x2304, x17)
val x2309 = x2308._1
val x2310 = x2308._2
val x2311 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2309,x2310)
val x2312 = x2305 + (x2304 -> x2311)
x5 = x2312
val x2315 = x5
val x1932 = x1474("church1")
val x2314 = x2303.getOrElse(x1932, x15)
val x2316 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2314,x2303)
val x2317 = x2309.union(x2314)
val x2324 = x2303.foldLeft (x2310) { case (x2318, (x2319, x2320)) =>
val x2321 = x2318.getOrElse(x2319, x15)
val x2322 = x2321.union(x2320)
val x2323 = x2318 + (x2319 -> x2322)

x2323
}
val x2325 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2317,x2324)
val x2326 = x2315 + (x2304 -> x2325)
x5 = x2326
x2316
}
val x2302 = x2301._1
val x2330 = x2329._1
val x2331 = x2329._2
val x2332 = apply_closures_norep(x2302, List(x2330), x2331)
val x2335 = x5
val x2333 = x2332._1
val x2334 = x2332._2
val x2336 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2333,x2334)
val x2337 = x2213.union(x2333)
val x2344 = x2334.foldLeft (x2214) { case (x2338, (x2339, x2340)) =>
val x2341 = x2338.getOrElse(x2339, x15)
val x2342 = x2341.union(x2340)
val x2343 = x2338 + (x2339 -> x2342)

x2343
}
val x2345 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2337,x2344)
val x2346 = x2335 + (x2208 -> x2345)
x5 = x2346
x2336
}
val x2206 = x2205._1
val x2350 = x2349._1
val x2351 = x2349._2
val x2352 = apply_closures_norep(x2206, List(x2350), x2351)
val x2355 = x5
val x2353 = x2352._1
val x2354 = x2352._2
val x2356 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2353,x2354)
val x2357 = x1791.union(x2353)
val x2364 = x2354.foldLeft (x1792) { case (x2358, (x2359, x2360)) =>
val x2361 = x2358.getOrElse(x2359, x15)
val x2362 = x2361.union(x2360)
val x2363 = x2358 + (x2359 -> x2362)

x2363
}
val x2365 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2357,x2364)
val x2366 = x2355 + (x1786 -> x2365)
x5 = x2366
x2356
}
val x2373 = x5
val x2371 = x2369._2
val x2372 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))),x1474,x2371)
val x2374 = x2373.contains(x2372)
val x2513 = if (x2374) {
val x2375 = x2373(x2372)
x2375
} else {
val x2376 = x1483.getOrElse(x2372, x17)
val x2377 = x2376._1
val x2378 = x2376._2
val x2379 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2377,x2378)
val x2380 = x2373 + (x2372 -> x2379)
x5 = x2380
val x2383 = x5
val x2382 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e2"))),x1474,x2371)
val x2384 = x2383.contains(x2382)
val x2465 = if (x2384) {
val x2385 = x2383(x2382)
x2385
} else {
val x2386 = x1483.getOrElse(x2382, x17)
val x2387 = x2386._1
val x2388 = x2386._2
val x2389 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2387,x2388)
val x2390 = x2383 + (x2382 -> x2389)
x5 = x2390
val x2393 = x5
val x2392 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x2371)
val x2394 = x2393.contains(x2392)
val x2417 = if (x2394) {
val x2395 = x2393(x2392)
x2395
} else {
val x2396 = x1483.getOrElse(x2392, x17)
val x2397 = x2396._1
val x2398 = x2396._2
val x2399 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2397,x2398)
val x2400 = x2393 + (x2392 -> x2399)
x5 = x2400
val x2403 = x5
val x1855 = x1474("sub")
val x2402 = x2371.getOrElse(x1855, x15)
val x2404 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2402,x2371)
val x2405 = x2397.union(x2402)
val x2412 = x2371.foldLeft (x2398) { case (x2406, (x2407, x2408)) =>
val x2409 = x2406.getOrElse(x2407, x15)
val x2410 = x2409.union(x2408)
val x2411 = x2406 + (x2407 -> x2410)

x2411
}
val x2413 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2405,x2412)
val x2414 = x2403 + (x2392 -> x2413)
x5 = x2414
x2404
}
val x2421 = x5
val x2419 = x2417._2
val x2420 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x2419)
val x2422 = x2421.contains(x2420)
val x2445 = if (x2422) {
val x2423 = x2421(x2420)
x2423
} else {
val x2424 = x1483.getOrElse(x2420, x17)
val x2425 = x2424._1
val x2426 = x2424._2
val x2427 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2425,x2426)
val x2428 = x2421 + (x2420 -> x2427)
x5 = x2428
val x2431 = x5
val x1626 = x1474("e2")
val x2430 = x2419.getOrElse(x1626, x15)
val x2432 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2430,x2419)
val x2433 = x2425.union(x2430)
val x2440 = x2419.foldLeft (x2426) { case (x2434, (x2435, x2436)) =>
val x2437 = x2434.getOrElse(x2435, x15)
val x2438 = x2437.union(x2436)
val x2439 = x2434 + (x2435 -> x2438)

x2439
}
val x2441 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2433,x2440)
val x2442 = x2431 + (x2420 -> x2441)
x5 = x2442
x2432
}
val x2418 = x2417._1
val x2446 = x2445._1
val x2447 = x2445._2
val x2448 = apply_closures_norep(x2418, List(x2446), x2447)
val x2451 = x5
val x2449 = x2448._1
val x2450 = x2448._2
val x2452 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2449,x2450)
val x2453 = x2387.union(x2449)
val x2460 = x2450.foldLeft (x2388) { case (x2454, (x2455, x2456)) =>
val x2457 = x2454.getOrElse(x2455, x15)
val x2458 = x2457.union(x2456)
val x2459 = x2454 + (x2455 -> x2458)

x2459
}
val x2461 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2453,x2460)
val x2462 = x2451 + (x2382 -> x2461)
x5 = x2462
x2452
}
val x2469 = x5
val x2467 = x2465._2
val x2468 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x2467)
val x2470 = x2469.contains(x2468)
val x2493 = if (x2470) {
val x2471 = x2469(x2468)
x2471
} else {
val x2472 = x1483.getOrElse(x2468, x17)
val x2473 = x2472._1
val x2474 = x2472._2
val x2475 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2473,x2474)
val x2476 = x2469 + (x2468 -> x2475)
x5 = x2476
val x2479 = x5
val x1932 = x1474("church1")
val x2478 = x2467.getOrElse(x1932, x15)
val x2480 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2478,x2467)
val x2481 = x2473.union(x2478)
val x2488 = x2467.foldLeft (x2474) { case (x2482, (x2483, x2484)) =>
val x2485 = x2482.getOrElse(x2483, x15)
val x2486 = x2485.union(x2484)
val x2487 = x2482 + (x2483 -> x2486)

x2487
}
val x2489 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2481,x2488)
val x2490 = x2479 + (x2468 -> x2489)
x5 = x2490
x2480
}
val x2466 = x2465._1
val x2494 = x2493._1
val x2495 = x2493._2
val x2496 = apply_closures_norep(x2466, List(x2494), x2495)
val x2499 = x5
val x2497 = x2496._1
val x2498 = x2496._2
val x2500 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2497,x2498)
val x2501 = x2377.union(x2497)
val x2508 = x2498.foldLeft (x2378) { case (x2502, (x2503, x2504)) =>
val x2505 = x2502.getOrElse(x2503, x15)
val x2506 = x2505.union(x2504)
val x2507 = x2502 + (x2503 -> x2506)

x2507
}
val x2509 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2501,x2508)
val x2510 = x2499 + (x2372 -> x2509)
x5 = x2510
x2500
}
val x2370 = x2369._1
val x2514 = x2513._1
val x2515 = x2513._2
val x2516 = apply_closures_norep(x2370, List(x2514), x2515)
val x2519 = x5
val x2517 = x2516._1
val x2518 = x2516._2
val x2520 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2517,x2518)
val x2521 = x1781.union(x2517)
val x2528 = x2518.foldLeft (x1782) { case (x2522, (x2523, x2524)) =>
val x2525 = x2522.getOrElse(x2523, x15)
val x2526 = x2525.union(x2524)
val x2527 = x2522 + (x2523 -> x2526)

x2527
}
val x2529 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2521,x2528)
val x2530 = x2519 + (x1776 -> x2529)
x5 = x2530
x2520
}
val x2537 = x5
val x2538 = x2537.contains(x1748)
val x2557 = if (x2538) {
val x2539 = x2537(x1748)
x2539
} else {
val x1752 = x1483.getOrElse(x1748, x17)
val x1753 = x1752._1
val x1754 = x1752._2
val x1755 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1753,x1754)
val x2540 = x2537 + (x1748 -> x1755)
x5 = x2540
val x2542 = Set[AbsValue](BoolV())
val x2543 = x5
val x2544 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2542,x1747)
val x2545 = x1753.union(x2542)
val x2552 = x1747.foldLeft (x1754) { case (x2546, (x2547, x2548)) =>
val x2549 = x2546.getOrElse(x2547, x15)
val x2550 = x2549.union(x2548)
val x2551 = x2546 + (x2547 -> x2550)

x2551
}
val x2553 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2545,x2552)
val x2554 = x2543 + (x1748 -> x2553)
x5 = x2554
x2544
}
val x2560 = x5
val x2561 = x2560.contains(x1776)
val x2915 = if (x2561) {
val x2562 = x2560(x1776)
x2562
} else {
val x1780 = x1483.getOrElse(x1776, x17)
val x1781 = x1780._1
val x1782 = x1780._2
val x1783 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1781,x1782)
val x2563 = x2560 + (x1776 -> x1783)
x5 = x2563
val x2565 = x5
val x1786 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),x1474,x1747)
val x2566 = x2565.contains(x1786)
val x2751 = if (x2566) {
val x2567 = x2565(x1786)
x2567
} else {
val x1790 = x1483.getOrElse(x1786, x17)
val x1791 = x1790._1
val x1792 = x1790._2
val x1793 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1791,x1792)
val x2568 = x2565 + (x1786 -> x1793)
x5 = x2568
val x2570 = x5
val x1796 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church=?"),x1474,x1747)
val x2571 = x2570.contains(x1796)
val x2587 = if (x2571) {
val x2572 = x2570(x1796)
x2572
} else {
val x1806 = x1474("church=?")
val x1807 = x1747.getOrElse(x1806, x15)
val x1809 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1807,x1747)
val x1800 = x1483.getOrElse(x1796, x17)
val x1801 = x1800._1
val x1802 = x1800._2
val x1803 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1801,x1802)
val x2573 = x2570 + (x1796 -> x1803)
x5 = x2573
val x2575 = x5
val x1810 = x1801.union(x1807)
val x2582 = x1747.foldLeft (x1802) { case (x2576, (x2577, x2578)) =>
val x2579 = x2576.getOrElse(x2577, x15)
val x2580 = x2579.union(x2578)
val x2581 = x2576 + (x2577 -> x2580)

x2581
}
val x2583 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1810,x2582)
val x2584 = x2575 + (x1796 -> x2583)
x5 = x2584
x1809
}
val x2591 = x5
val x2589 = x2587._2
val x2590 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))),x1474,x2589)
val x2592 = x2591.contains(x2590)
val x2731 = if (x2592) {
val x2593 = x2591(x2590)
x2593
} else {
val x2594 = x1483.getOrElse(x2590, x17)
val x2595 = x2594._1
val x2596 = x2594._2
val x2597 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2595,x2596)
val x2598 = x2591 + (x2590 -> x2597)
x5 = x2598
val x2601 = x5
val x2600 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e1"))),x1474,x2589)
val x2602 = x2601.contains(x2600)
val x2683 = if (x2602) {
val x2603 = x2601(x2600)
x2603
} else {
val x2604 = x1483.getOrElse(x2600, x17)
val x2605 = x2604._1
val x2606 = x2604._2
val x2607 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2605,x2606)
val x2608 = x2601 + (x2600 -> x2607)
x5 = x2608
val x2611 = x5
val x2610 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x2589)
val x2612 = x2611.contains(x2610)
val x2635 = if (x2612) {
val x2613 = x2611(x2610)
x2613
} else {
val x2614 = x1483.getOrElse(x2610, x17)
val x2615 = x2614._1
val x2616 = x2614._2
val x2617 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2615,x2616)
val x2618 = x2611 + (x2610 -> x2617)
x5 = x2618
val x2621 = x5
val x1855 = x1474("sub")
val x2620 = x2589.getOrElse(x1855, x15)
val x2622 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2620,x2589)
val x2623 = x2615.union(x2620)
val x2630 = x2589.foldLeft (x2616) { case (x2624, (x2625, x2626)) =>
val x2627 = x2624.getOrElse(x2625, x15)
val x2628 = x2627.union(x2626)
val x2629 = x2624 + (x2625 -> x2628)

x2629
}
val x2631 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2623,x2630)
val x2632 = x2621 + (x2610 -> x2631)
x5 = x2632
x2622
}
val x2639 = x5
val x2637 = x2635._2
val x2638 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e1"),x1474,x2637)
val x2640 = x2639.contains(x2638)
val x2663 = if (x2640) {
val x2641 = x2639(x2638)
x2641
} else {
val x2642 = x1483.getOrElse(x2638, x17)
val x2643 = x2642._1
val x2644 = x2642._2
val x2645 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2643,x2644)
val x2646 = x2639 + (x2638 -> x2645)
x5 = x2646
val x2649 = x5
val x1539 = x1474("e1")
val x2648 = x2637.getOrElse(x1539, x15)
val x2650 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2648,x2637)
val x2651 = x2643.union(x2648)
val x2658 = x2637.foldLeft (x2644) { case (x2652, (x2653, x2654)) =>
val x2655 = x2652.getOrElse(x2653, x15)
val x2656 = x2655.union(x2654)
val x2657 = x2652 + (x2653 -> x2656)

x2657
}
val x2659 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2651,x2658)
val x2660 = x2649 + (x2638 -> x2659)
x5 = x2660
x2650
}
val x2636 = x2635._1
val x2664 = x2663._1
val x2665 = x2663._2
val x2666 = apply_closures_norep(x2636, List(x2664), x2665)
val x2669 = x5
val x2667 = x2666._1
val x2668 = x2666._2
val x2670 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2667,x2668)
val x2671 = x2605.union(x2667)
val x2678 = x2668.foldLeft (x2606) { case (x2672, (x2673, x2674)) =>
val x2675 = x2672.getOrElse(x2673, x15)
val x2676 = x2675.union(x2674)
val x2677 = x2672 + (x2673 -> x2676)

x2677
}
val x2679 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2671,x2678)
val x2680 = x2669 + (x2600 -> x2679)
x5 = x2680
x2670
}
val x2687 = x5
val x2685 = x2683._2
val x2686 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x2685)
val x2688 = x2687.contains(x2686)
val x2711 = if (x2688) {
val x2689 = x2687(x2686)
x2689
} else {
val x2690 = x1483.getOrElse(x2686, x17)
val x2691 = x2690._1
val x2692 = x2690._2
val x2693 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2691,x2692)
val x2694 = x2687 + (x2686 -> x2693)
x5 = x2694
val x2697 = x5
val x1932 = x1474("church1")
val x2696 = x2685.getOrElse(x1932, x15)
val x2698 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2696,x2685)
val x2699 = x2691.union(x2696)
val x2706 = x2685.foldLeft (x2692) { case (x2700, (x2701, x2702)) =>
val x2703 = x2700.getOrElse(x2701, x15)
val x2704 = x2703.union(x2702)
val x2705 = x2700 + (x2701 -> x2704)

x2705
}
val x2707 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2699,x2706)
val x2708 = x2697 + (x2686 -> x2707)
x5 = x2708
x2698
}
val x2684 = x2683._1
val x2712 = x2711._1
val x2713 = x2711._2
val x2714 = apply_closures_norep(x2684, List(x2712), x2713)
val x2717 = x5
val x2715 = x2714._1
val x2716 = x2714._2
val x2718 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2715,x2716)
val x2719 = x2595.union(x2715)
val x2726 = x2716.foldLeft (x2596) { case (x2720, (x2721, x2722)) =>
val x2723 = x2720.getOrElse(x2721, x15)
val x2724 = x2723.union(x2722)
val x2725 = x2720 + (x2721 -> x2724)

x2725
}
val x2727 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2719,x2726)
val x2728 = x2717 + (x2590 -> x2727)
x5 = x2728
x2718
}
val x2588 = x2587._1
val x2732 = x2731._1
val x2733 = x2731._2
val x2734 = apply_closures_norep(x2588, List(x2732), x2733)
val x2737 = x5
val x2735 = x2734._1
val x2736 = x2734._2
val x2738 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2735,x2736)
val x2739 = x1791.union(x2735)
val x2746 = x2736.foldLeft (x1792) { case (x2740, (x2741, x2742)) =>
val x2743 = x2740.getOrElse(x2741, x15)
val x2744 = x2743.union(x2742)
val x2745 = x2740 + (x2741 -> x2744)

x2745
}
val x2747 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2739,x2746)
val x2748 = x2737 + (x1786 -> x2747)
x5 = x2748
x2738
}
val x2755 = x5
val x2753 = x2751._2
val x2754 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))),x1474,x2753)
val x2756 = x2755.contains(x2754)
val x2895 = if (x2756) {
val x2757 = x2755(x2754)
x2757
} else {
val x2758 = x1483.getOrElse(x2754, x17)
val x2759 = x2758._1
val x2760 = x2758._2
val x2761 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2759,x2760)
val x2762 = x2755 + (x2754 -> x2761)
x5 = x2762
val x2765 = x5
val x2764 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e2"))),x1474,x2753)
val x2766 = x2765.contains(x2764)
val x2847 = if (x2766) {
val x2767 = x2765(x2764)
x2767
} else {
val x2768 = x1483.getOrElse(x2764, x17)
val x2769 = x2768._1
val x2770 = x2768._2
val x2771 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2769,x2770)
val x2772 = x2765 + (x2764 -> x2771)
x5 = x2772
val x2775 = x5
val x2774 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x2753)
val x2776 = x2775.contains(x2774)
val x2799 = if (x2776) {
val x2777 = x2775(x2774)
x2777
} else {
val x2778 = x1483.getOrElse(x2774, x17)
val x2779 = x2778._1
val x2780 = x2778._2
val x2781 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2779,x2780)
val x2782 = x2775 + (x2774 -> x2781)
x5 = x2782
val x2785 = x5
val x1855 = x1474("sub")
val x2784 = x2753.getOrElse(x1855, x15)
val x2786 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2784,x2753)
val x2787 = x2779.union(x2784)
val x2794 = x2753.foldLeft (x2780) { case (x2788, (x2789, x2790)) =>
val x2791 = x2788.getOrElse(x2789, x15)
val x2792 = x2791.union(x2790)
val x2793 = x2788 + (x2789 -> x2792)

x2793
}
val x2795 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2787,x2794)
val x2796 = x2785 + (x2774 -> x2795)
x5 = x2796
x2786
}
val x2803 = x5
val x2801 = x2799._2
val x2802 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x2801)
val x2804 = x2803.contains(x2802)
val x2827 = if (x2804) {
val x2805 = x2803(x2802)
x2805
} else {
val x2806 = x1483.getOrElse(x2802, x17)
val x2807 = x2806._1
val x2808 = x2806._2
val x2809 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2807,x2808)
val x2810 = x2803 + (x2802 -> x2809)
x5 = x2810
val x2813 = x5
val x1626 = x1474("e2")
val x2812 = x2801.getOrElse(x1626, x15)
val x2814 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2812,x2801)
val x2815 = x2807.union(x2812)
val x2822 = x2801.foldLeft (x2808) { case (x2816, (x2817, x2818)) =>
val x2819 = x2816.getOrElse(x2817, x15)
val x2820 = x2819.union(x2818)
val x2821 = x2816 + (x2817 -> x2820)

x2821
}
val x2823 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2815,x2822)
val x2824 = x2813 + (x2802 -> x2823)
x5 = x2824
x2814
}
val x2800 = x2799._1
val x2828 = x2827._1
val x2829 = x2827._2
val x2830 = apply_closures_norep(x2800, List(x2828), x2829)
val x2833 = x5
val x2831 = x2830._1
val x2832 = x2830._2
val x2834 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2831,x2832)
val x2835 = x2769.union(x2831)
val x2842 = x2832.foldLeft (x2770) { case (x2836, (x2837, x2838)) =>
val x2839 = x2836.getOrElse(x2837, x15)
val x2840 = x2839.union(x2838)
val x2841 = x2836 + (x2837 -> x2840)

x2841
}
val x2843 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2835,x2842)
val x2844 = x2833 + (x2764 -> x2843)
x5 = x2844
x2834
}
val x2851 = x5
val x2849 = x2847._2
val x2850 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x2849)
val x2852 = x2851.contains(x2850)
val x2875 = if (x2852) {
val x2853 = x2851(x2850)
x2853
} else {
val x2854 = x1483.getOrElse(x2850, x17)
val x2855 = x2854._1
val x2856 = x2854._2
val x2857 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2855,x2856)
val x2858 = x2851 + (x2850 -> x2857)
x5 = x2858
val x2861 = x5
val x1932 = x1474("church1")
val x2860 = x2849.getOrElse(x1932, x15)
val x2862 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2860,x2849)
val x2863 = x2855.union(x2860)
val x2870 = x2849.foldLeft (x2856) { case (x2864, (x2865, x2866)) =>
val x2867 = x2864.getOrElse(x2865, x15)
val x2868 = x2867.union(x2866)
val x2869 = x2864 + (x2865 -> x2868)

x2869
}
val x2871 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2863,x2870)
val x2872 = x2861 + (x2850 -> x2871)
x5 = x2872
x2862
}
val x2848 = x2847._1
val x2876 = x2875._1
val x2877 = x2875._2
val x2878 = apply_closures_norep(x2848, List(x2876), x2877)
val x2881 = x5
val x2879 = x2878._1
val x2880 = x2878._2
val x2882 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2879,x2880)
val x2883 = x2759.union(x2879)
val x2890 = x2880.foldLeft (x2760) { case (x2884, (x2885, x2886)) =>
val x2887 = x2884.getOrElse(x2885, x15)
val x2888 = x2887.union(x2886)
val x2889 = x2884 + (x2885 -> x2888)

x2889
}
val x2891 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2883,x2890)
val x2892 = x2881 + (x2754 -> x2891)
x5 = x2892
x2882
}
val x2752 = x2751._1
val x2896 = x2895._1
val x2897 = x2895._2
val x2898 = apply_closures_norep(x2752, List(x2896), x2897)
val x2901 = x5
val x2899 = x2898._1
val x2900 = x2898._2
val x2902 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2899,x2900)
val x2903 = x1781.union(x2899)
val x2910 = x2900.foldLeft (x1782) { case (x2904, (x2905, x2906)) =>
val x2907 = x2904.getOrElse(x2905, x15)
val x2908 = x2907.union(x2906)
val x2909 = x2904 + (x2905 -> x2908)

x2909
}
val x2911 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2903,x2910)
val x2912 = x2901 + (x1776 -> x2911)
x5 = x2912
x2902
}
val x2925 = x5
val x2176 = x2175._1
val x2534 = x2533._1
val x2536 = x2176.union(x2534)
val x2559 = x2557._2
val x2917 = x2915._2
val x2924 = x2917.foldLeft (x2559) { case (x2918, (x2919, x2920)) =>
val x2921 = x2918.getOrElse(x2919, x15)
val x2922 = x2921.union(x2920)
val x2923 = x2918 + (x2919 -> x2922)

x2923
}
val x2926 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2536,x2924)
val x2927 = x1670.union(x2536)
val x2934 = x2924.foldLeft (x1671) { case (x2928, (x2929, x2930)) =>
val x2931 = x2928.getOrElse(x2929, x15)
val x2932 = x2931.union(x2930)
val x2933 = x2928 + (x2929 -> x2932)

x2933
}
val x2935 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2927,x2934)
val x2936 = x2925 + (x1665 -> x2935)
x5 = x2936
x2926
}
val x2942 = x5
val x2943 = x2942.contains(x1578)
val x3012 = if (x2943) {
val x2944 = x2942(x1578)
x2944
} else {
val x1582 = x1483.getOrElse(x1578, x17)
val x1583 = x1582._1
val x1584 = x1582._2
val x1585 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1583,x1584)
val x2945 = x2942 + (x1578 -> x1585)
x5 = x2945
val x2947 = x5
val x1588 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church0?"),x1474,x1577)
val x2948 = x2947.contains(x1588)
val x2964 = if (x2948) {
val x2949 = x2947(x1588)
x2949
} else {
val x1510 = x1474("church0?")
val x1598 = x1577.getOrElse(x1510, x15)
val x1600 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1598,x1577)
val x1592 = x1483.getOrElse(x1588, x17)
val x1593 = x1592._1
val x1594 = x1592._2
val x1595 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1593,x1594)
val x2950 = x2947 + (x1588 -> x1595)
x5 = x2950
val x2952 = x5
val x1601 = x1593.union(x1598)
val x2959 = x1577.foldLeft (x1594) { case (x2953, (x2954, x2955)) =>
val x2956 = x2953.getOrElse(x2954, x15)
val x2957 = x2956.union(x2955)
val x2958 = x2953 + (x2954 -> x2957)

x2958
}
val x2960 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1601,x2959)
val x2961 = x2952 + (x1588 -> x2960)
x5 = x2961
x1600
}
val x2968 = x5
val x2966 = x2964._2
val x2967 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x2966)
val x2969 = x2968.contains(x2967)
val x2992 = if (x2969) {
val x2970 = x2968(x2967)
x2970
} else {
val x2971 = x1483.getOrElse(x2967, x17)
val x2972 = x2971._1
val x2973 = x2971._2
val x2974 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2972,x2973)
val x2975 = x2968 + (x2967 -> x2974)
x5 = x2975
val x2978 = x5
val x1626 = x1474("e2")
val x2977 = x2966.getOrElse(x1626, x15)
val x2979 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2977,x2966)
val x2980 = x2972.union(x2977)
val x2987 = x2966.foldLeft (x2973) { case (x2981, (x2982, x2983)) =>
val x2984 = x2981.getOrElse(x2982, x15)
val x2985 = x2984.union(x2983)
val x2986 = x2981 + (x2982 -> x2985)

x2986
}
val x2988 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2980,x2987)
val x2989 = x2978 + (x2967 -> x2988)
x5 = x2989
x2979
}
val x2965 = x2964._1
val x2993 = x2992._1
val x2994 = x2992._2
val x2995 = apply_closures_norep(x2965, List(x2993), x2994)
val x2998 = x5
val x2996 = x2995._1
val x2997 = x2995._2
val x2999 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x2996,x2997)
val x3000 = x1583.union(x2996)
val x3007 = x2997.foldLeft (x1584) { case (x3001, (x3002, x3003)) =>
val x3004 = x3001.getOrElse(x3002, x15)
val x3005 = x3004.union(x3003)
val x3006 = x3001 + (x3002 -> x3005)

x3006
}
val x3008 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3000,x3007)
val x3009 = x2998 + (x1578 -> x3008)
x5 = x3009
x2999
}
val x3015 = x5
val x3016 = x3015.contains(x1665)
val x4281 = if (x3016) {
val x3017 = x3015(x1665)
x3017
} else {
val x1669 = x1483.getOrElse(x1665, x17)
val x1670 = x1669._1
val x1671 = x1669._2
val x1672 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1670,x1671)
val x3018 = x3015 + (x1665 -> x1672)
x5 = x3018
val x3020 = x5
val x3021 = x3020.contains(x1578)
val x3090 = if (x3021) {
val x3022 = x3020(x1578)
x3022
} else {
val x1582 = x1483.getOrElse(x1578, x17)
val x1583 = x1582._1
val x1584 = x1582._2
val x1585 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1583,x1584)
val x3023 = x3020 + (x1578 -> x1585)
x5 = x3023
val x3025 = x5
val x1588 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church0?"),x1474,x1577)
val x3026 = x3025.contains(x1588)
val x3042 = if (x3026) {
val x3027 = x3025(x1588)
x3027
} else {
val x1510 = x1474("church0?")
val x1598 = x1577.getOrElse(x1510, x15)
val x1600 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1598,x1577)
val x1592 = x1483.getOrElse(x1588, x17)
val x1593 = x1592._1
val x1594 = x1592._2
val x1595 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1593,x1594)
val x3028 = x3025 + (x1588 -> x1595)
x5 = x3028
val x3030 = x5
val x1601 = x1593.union(x1598)
val x3037 = x1577.foldLeft (x1594) { case (x3031, (x3032, x3033)) =>
val x3034 = x3031.getOrElse(x3032, x15)
val x3035 = x3034.union(x3033)
val x3036 = x3031 + (x3032 -> x3035)

x3036
}
val x3038 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1601,x3037)
val x3039 = x3030 + (x1588 -> x3038)
x5 = x3039
x1600
}
val x3046 = x5
val x3044 = x3042._2
val x3045 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x3044)
val x3047 = x3046.contains(x3045)
val x3070 = if (x3047) {
val x3048 = x3046(x3045)
x3048
} else {
val x3049 = x1483.getOrElse(x3045, x17)
val x3050 = x3049._1
val x3051 = x3049._2
val x3052 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3050,x3051)
val x3053 = x3046 + (x3045 -> x3052)
x5 = x3053
val x3056 = x5
val x1626 = x1474("e2")
val x3055 = x3044.getOrElse(x1626, x15)
val x3057 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3055,x3044)
val x3058 = x3050.union(x3055)
val x3065 = x3044.foldLeft (x3051) { case (x3059, (x3060, x3061)) =>
val x3062 = x3059.getOrElse(x3060, x15)
val x3063 = x3062.union(x3061)
val x3064 = x3059 + (x3060 -> x3063)

x3064
}
val x3066 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3058,x3065)
val x3067 = x3056 + (x3045 -> x3066)
x5 = x3067
x3057
}
val x3043 = x3042._1
val x3071 = x3070._1
val x3072 = x3070._2
val x3073 = apply_closures_norep(x3043, List(x3071), x3072)
val x3076 = x5
val x3074 = x3073._1
val x3075 = x3073._2
val x3077 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3074,x3075)
val x3078 = x1583.union(x3074)
val x3085 = x3075.foldLeft (x1584) { case (x3079, (x3080, x3081)) =>
val x3082 = x3079.getOrElse(x3080, x15)
val x3083 = x3082.union(x3081)
val x3084 = x3079 + (x3080 -> x3083)

x3084
}
val x3086 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3078,x3085)
val x3087 = x3076 + (x1578 -> x3086)
x5 = x3087
x3077
}
val x3094 = x5
val x3092 = x3090._2
val x3093 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](BoolLit(false),x1474,x3092)
val x3095 = x3094.contains(x3093)
val x3118 = if (x3095) {
val x3096 = x3094(x3093)
x3096
} else {
val x3097 = x1483.getOrElse(x3093, x17)
val x3098 = x3097._1
val x3099 = x3097._2
val x3100 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3098,x3099)
val x3101 = x3094 + (x3093 -> x3100)
x5 = x3101
val x3103 = Set[AbsValue](BoolV())
val x3104 = x5
val x3105 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3103,x3092)
val x3106 = x3098.union(x3103)
val x3113 = x3092.foldLeft (x3099) { case (x3107, (x3108, x3109)) =>
val x3110 = x3107.getOrElse(x3108, x15)
val x3111 = x3110.union(x3109)
val x3112 = x3107 + (x3108 -> x3111)

x3112
}
val x3114 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3106,x3113)
val x3115 = x3104 + (x3093 -> x3114)
x5 = x3115
x3105
}
val x3122 = x5
val x3121 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))),x1474,x3092)
val x3123 = x3122.contains(x3121)
val x3494 = if (x3123) {
val x3124 = x3122(x3121)
x3124
} else {
val x3125 = x1483.getOrElse(x3121, x17)
val x3126 = x3125._1
val x3127 = x3125._2
val x3128 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3126,x3127)
val x3129 = x3122 + (x3121 -> x3128)
x5 = x3129
val x3132 = x5
val x3131 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),x1474,x3092)
val x3133 = x3132.contains(x3131)
val x3330 = if (x3133) {
val x3134 = x3132(x3131)
x3134
} else {
val x3135 = x1483.getOrElse(x3131, x17)
val x3136 = x3135._1
val x3137 = x3135._2
val x3138 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3136,x3137)
val x3139 = x3132 + (x3131 -> x3138)
x5 = x3139
val x3142 = x5
val x3141 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church=?"),x1474,x3092)
val x3143 = x3142.contains(x3141)
val x3166 = if (x3143) {
val x3144 = x3142(x3141)
x3144
} else {
val x3145 = x1483.getOrElse(x3141, x17)
val x3146 = x3145._1
val x3147 = x3145._2
val x3148 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3146,x3147)
val x3149 = x3142 + (x3141 -> x3148)
x5 = x3149
val x3152 = x5
val x1806 = x1474("church=?")
val x3151 = x3092.getOrElse(x1806, x15)
val x3153 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3151,x3092)
val x3154 = x3146.union(x3151)
val x3161 = x3092.foldLeft (x3147) { case (x3155, (x3156, x3157)) =>
val x3158 = x3155.getOrElse(x3156, x15)
val x3159 = x3158.union(x3157)
val x3160 = x3155 + (x3156 -> x3159)

x3160
}
val x3162 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3154,x3161)
val x3163 = x3152 + (x3141 -> x3162)
x5 = x3163
x3153
}
val x3170 = x5
val x3168 = x3166._2
val x3169 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))),x1474,x3168)
val x3171 = x3170.contains(x3169)
val x3310 = if (x3171) {
val x3172 = x3170(x3169)
x3172
} else {
val x3173 = x1483.getOrElse(x3169, x17)
val x3174 = x3173._1
val x3175 = x3173._2
val x3176 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3174,x3175)
val x3177 = x3170 + (x3169 -> x3176)
x5 = x3177
val x3180 = x5
val x3179 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e1"))),x1474,x3168)
val x3181 = x3180.contains(x3179)
val x3262 = if (x3181) {
val x3182 = x3180(x3179)
x3182
} else {
val x3183 = x1483.getOrElse(x3179, x17)
val x3184 = x3183._1
val x3185 = x3183._2
val x3186 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3184,x3185)
val x3187 = x3180 + (x3179 -> x3186)
x5 = x3187
val x3190 = x5
val x3189 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x3168)
val x3191 = x3190.contains(x3189)
val x3214 = if (x3191) {
val x3192 = x3190(x3189)
x3192
} else {
val x3193 = x1483.getOrElse(x3189, x17)
val x3194 = x3193._1
val x3195 = x3193._2
val x3196 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3194,x3195)
val x3197 = x3190 + (x3189 -> x3196)
x5 = x3197
val x3200 = x5
val x1855 = x1474("sub")
val x3199 = x3168.getOrElse(x1855, x15)
val x3201 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3199,x3168)
val x3202 = x3194.union(x3199)
val x3209 = x3168.foldLeft (x3195) { case (x3203, (x3204, x3205)) =>
val x3206 = x3203.getOrElse(x3204, x15)
val x3207 = x3206.union(x3205)
val x3208 = x3203 + (x3204 -> x3207)

x3208
}
val x3210 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3202,x3209)
val x3211 = x3200 + (x3189 -> x3210)
x5 = x3211
x3201
}
val x3218 = x5
val x3216 = x3214._2
val x3217 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e1"),x1474,x3216)
val x3219 = x3218.contains(x3217)
val x3242 = if (x3219) {
val x3220 = x3218(x3217)
x3220
} else {
val x3221 = x1483.getOrElse(x3217, x17)
val x3222 = x3221._1
val x3223 = x3221._2
val x3224 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3222,x3223)
val x3225 = x3218 + (x3217 -> x3224)
x5 = x3225
val x3228 = x5
val x1539 = x1474("e1")
val x3227 = x3216.getOrElse(x1539, x15)
val x3229 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3227,x3216)
val x3230 = x3222.union(x3227)
val x3237 = x3216.foldLeft (x3223) { case (x3231, (x3232, x3233)) =>
val x3234 = x3231.getOrElse(x3232, x15)
val x3235 = x3234.union(x3233)
val x3236 = x3231 + (x3232 -> x3235)

x3236
}
val x3238 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3230,x3237)
val x3239 = x3228 + (x3217 -> x3238)
x5 = x3239
x3229
}
val x3215 = x3214._1
val x3243 = x3242._1
val x3244 = x3242._2
val x3245 = apply_closures_norep(x3215, List(x3243), x3244)
val x3248 = x5
val x3246 = x3245._1
val x3247 = x3245._2
val x3249 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3246,x3247)
val x3250 = x3184.union(x3246)
val x3257 = x3247.foldLeft (x3185) { case (x3251, (x3252, x3253)) =>
val x3254 = x3251.getOrElse(x3252, x15)
val x3255 = x3254.union(x3253)
val x3256 = x3251 + (x3252 -> x3255)

x3256
}
val x3258 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3250,x3257)
val x3259 = x3248 + (x3179 -> x3258)
x5 = x3259
x3249
}
val x3266 = x5
val x3264 = x3262._2
val x3265 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x3264)
val x3267 = x3266.contains(x3265)
val x3290 = if (x3267) {
val x3268 = x3266(x3265)
x3268
} else {
val x3269 = x1483.getOrElse(x3265, x17)
val x3270 = x3269._1
val x3271 = x3269._2
val x3272 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3270,x3271)
val x3273 = x3266 + (x3265 -> x3272)
x5 = x3273
val x3276 = x5
val x1932 = x1474("church1")
val x3275 = x3264.getOrElse(x1932, x15)
val x3277 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3275,x3264)
val x3278 = x3270.union(x3275)
val x3285 = x3264.foldLeft (x3271) { case (x3279, (x3280, x3281)) =>
val x3282 = x3279.getOrElse(x3280, x15)
val x3283 = x3282.union(x3281)
val x3284 = x3279 + (x3280 -> x3283)

x3284
}
val x3286 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3278,x3285)
val x3287 = x3276 + (x3265 -> x3286)
x5 = x3287
x3277
}
val x3263 = x3262._1
val x3291 = x3290._1
val x3292 = x3290._2
val x3293 = apply_closures_norep(x3263, List(x3291), x3292)
val x3296 = x5
val x3294 = x3293._1
val x3295 = x3293._2
val x3297 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3294,x3295)
val x3298 = x3174.union(x3294)
val x3305 = x3295.foldLeft (x3175) { case (x3299, (x3300, x3301)) =>
val x3302 = x3299.getOrElse(x3300, x15)
val x3303 = x3302.union(x3301)
val x3304 = x3299 + (x3300 -> x3303)

x3304
}
val x3306 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3298,x3305)
val x3307 = x3296 + (x3169 -> x3306)
x5 = x3307
x3297
}
val x3167 = x3166._1
val x3311 = x3310._1
val x3312 = x3310._2
val x3313 = apply_closures_norep(x3167, List(x3311), x3312)
val x3316 = x5
val x3314 = x3313._1
val x3315 = x3313._2
val x3317 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3314,x3315)
val x3318 = x3136.union(x3314)
val x3325 = x3315.foldLeft (x3137) { case (x3319, (x3320, x3321)) =>
val x3322 = x3319.getOrElse(x3320, x15)
val x3323 = x3322.union(x3321)
val x3324 = x3319 + (x3320 -> x3323)

x3324
}
val x3326 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3318,x3325)
val x3327 = x3316 + (x3131 -> x3326)
x5 = x3327
x3317
}
val x3334 = x5
val x3332 = x3330._2
val x3333 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))),x1474,x3332)
val x3335 = x3334.contains(x3333)
val x3474 = if (x3335) {
val x3336 = x3334(x3333)
x3336
} else {
val x3337 = x1483.getOrElse(x3333, x17)
val x3338 = x3337._1
val x3339 = x3337._2
val x3340 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3338,x3339)
val x3341 = x3334 + (x3333 -> x3340)
x5 = x3341
val x3344 = x5
val x3343 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e2"))),x1474,x3332)
val x3345 = x3344.contains(x3343)
val x3426 = if (x3345) {
val x3346 = x3344(x3343)
x3346
} else {
val x3347 = x1483.getOrElse(x3343, x17)
val x3348 = x3347._1
val x3349 = x3347._2
val x3350 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3348,x3349)
val x3351 = x3344 + (x3343 -> x3350)
x5 = x3351
val x3354 = x5
val x3353 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x3332)
val x3355 = x3354.contains(x3353)
val x3378 = if (x3355) {
val x3356 = x3354(x3353)
x3356
} else {
val x3357 = x1483.getOrElse(x3353, x17)
val x3358 = x3357._1
val x3359 = x3357._2
val x3360 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3358,x3359)
val x3361 = x3354 + (x3353 -> x3360)
x5 = x3361
val x3364 = x5
val x1855 = x1474("sub")
val x3363 = x3332.getOrElse(x1855, x15)
val x3365 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3363,x3332)
val x3366 = x3358.union(x3363)
val x3373 = x3332.foldLeft (x3359) { case (x3367, (x3368, x3369)) =>
val x3370 = x3367.getOrElse(x3368, x15)
val x3371 = x3370.union(x3369)
val x3372 = x3367 + (x3368 -> x3371)

x3372
}
val x3374 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3366,x3373)
val x3375 = x3364 + (x3353 -> x3374)
x5 = x3375
x3365
}
val x3382 = x5
val x3380 = x3378._2
val x3381 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x3380)
val x3383 = x3382.contains(x3381)
val x3406 = if (x3383) {
val x3384 = x3382(x3381)
x3384
} else {
val x3385 = x1483.getOrElse(x3381, x17)
val x3386 = x3385._1
val x3387 = x3385._2
val x3388 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3386,x3387)
val x3389 = x3382 + (x3381 -> x3388)
x5 = x3389
val x3392 = x5
val x1626 = x1474("e2")
val x3391 = x3380.getOrElse(x1626, x15)
val x3393 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3391,x3380)
val x3394 = x3386.union(x3391)
val x3401 = x3380.foldLeft (x3387) { case (x3395, (x3396, x3397)) =>
val x3398 = x3395.getOrElse(x3396, x15)
val x3399 = x3398.union(x3397)
val x3400 = x3395 + (x3396 -> x3399)

x3400
}
val x3402 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3394,x3401)
val x3403 = x3392 + (x3381 -> x3402)
x5 = x3403
x3393
}
val x3379 = x3378._1
val x3407 = x3406._1
val x3408 = x3406._2
val x3409 = apply_closures_norep(x3379, List(x3407), x3408)
val x3412 = x5
val x3410 = x3409._1
val x3411 = x3409._2
val x3413 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3410,x3411)
val x3414 = x3348.union(x3410)
val x3421 = x3411.foldLeft (x3349) { case (x3415, (x3416, x3417)) =>
val x3418 = x3415.getOrElse(x3416, x15)
val x3419 = x3418.union(x3417)
val x3420 = x3415 + (x3416 -> x3419)

x3420
}
val x3422 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3414,x3421)
val x3423 = x3412 + (x3343 -> x3422)
x5 = x3423
x3413
}
val x3430 = x5
val x3428 = x3426._2
val x3429 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x3428)
val x3431 = x3430.contains(x3429)
val x3454 = if (x3431) {
val x3432 = x3430(x3429)
x3432
} else {
val x3433 = x1483.getOrElse(x3429, x17)
val x3434 = x3433._1
val x3435 = x3433._2
val x3436 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3434,x3435)
val x3437 = x3430 + (x3429 -> x3436)
x5 = x3437
val x3440 = x5
val x1932 = x1474("church1")
val x3439 = x3428.getOrElse(x1932, x15)
val x3441 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3439,x3428)
val x3442 = x3434.union(x3439)
val x3449 = x3428.foldLeft (x3435) { case (x3443, (x3444, x3445)) =>
val x3446 = x3443.getOrElse(x3444, x15)
val x3447 = x3446.union(x3445)
val x3448 = x3443 + (x3444 -> x3447)

x3448
}
val x3450 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3442,x3449)
val x3451 = x3440 + (x3429 -> x3450)
x5 = x3451
x3441
}
val x3427 = x3426._1
val x3455 = x3454._1
val x3456 = x3454._2
val x3457 = apply_closures_norep(x3427, List(x3455), x3456)
val x3460 = x5
val x3458 = x3457._1
val x3459 = x3457._2
val x3461 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3458,x3459)
val x3462 = x3338.union(x3458)
val x3469 = x3459.foldLeft (x3339) { case (x3463, (x3464, x3465)) =>
val x3466 = x3463.getOrElse(x3464, x15)
val x3467 = x3466.union(x3465)
val x3468 = x3463 + (x3464 -> x3467)

x3468
}
val x3470 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3462,x3469)
val x3471 = x3460 + (x3333 -> x3470)
x5 = x3471
x3461
}
val x3331 = x3330._1
val x3475 = x3474._1
val x3476 = x3474._2
val x3477 = apply_closures_norep(x3331, List(x3475), x3476)
val x3480 = x5
val x3478 = x3477._1
val x3479 = x3477._2
val x3481 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3478,x3479)
val x3482 = x3126.union(x3478)
val x3489 = x3479.foldLeft (x3127) { case (x3483, (x3484, x3485)) =>
val x3486 = x3483.getOrElse(x3484, x15)
val x3487 = x3486.union(x3485)
val x3488 = x3483 + (x3484 -> x3487)

x3488
}
val x3490 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3482,x3489)
val x3491 = x3480 + (x3121 -> x3490)
x5 = x3491
x3481
}
val x3497 = x5
val x3498 = x3497.contains(x3093)
val x3517 = if (x3498) {
val x3499 = x3497(x3093)
x3499
} else {
val x3097 = x1483.getOrElse(x3093, x17)
val x3098 = x3097._1
val x3099 = x3097._2
val x3100 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3098,x3099)
val x3500 = x3497 + (x3093 -> x3100)
x5 = x3500
val x3502 = Set[AbsValue](BoolV())
val x3503 = x5
val x3504 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3502,x3092)
val x3505 = x3098.union(x3502)
val x3512 = x3092.foldLeft (x3099) { case (x3506, (x3507, x3508)) =>
val x3509 = x3506.getOrElse(x3507, x15)
val x3510 = x3509.union(x3508)
val x3511 = x3506 + (x3507 -> x3510)

x3511
}
val x3513 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3505,x3512)
val x3514 = x3503 + (x3093 -> x3513)
x5 = x3514
x3504
}
val x3520 = x5
val x3521 = x3520.contains(x3121)
val x3875 = if (x3521) {
val x3522 = x3520(x3121)
x3522
} else {
val x3125 = x1483.getOrElse(x3121, x17)
val x3126 = x3125._1
val x3127 = x3125._2
val x3128 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3126,x3127)
val x3523 = x3520 + (x3121 -> x3128)
x5 = x3523
val x3525 = x5
val x3131 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),x1474,x3092)
val x3526 = x3525.contains(x3131)
val x3711 = if (x3526) {
val x3527 = x3525(x3131)
x3527
} else {
val x3135 = x1483.getOrElse(x3131, x17)
val x3136 = x3135._1
val x3137 = x3135._2
val x3138 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3136,x3137)
val x3528 = x3525 + (x3131 -> x3138)
x5 = x3528
val x3530 = x5
val x3141 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church=?"),x1474,x3092)
val x3531 = x3530.contains(x3141)
val x3547 = if (x3531) {
val x3532 = x3530(x3141)
x3532
} else {
val x1806 = x1474("church=?")
val x3151 = x3092.getOrElse(x1806, x15)
val x3153 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3151,x3092)
val x3145 = x1483.getOrElse(x3141, x17)
val x3146 = x3145._1
val x3147 = x3145._2
val x3148 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3146,x3147)
val x3533 = x3530 + (x3141 -> x3148)
x5 = x3533
val x3535 = x5
val x3154 = x3146.union(x3151)
val x3542 = x3092.foldLeft (x3147) { case (x3536, (x3537, x3538)) =>
val x3539 = x3536.getOrElse(x3537, x15)
val x3540 = x3539.union(x3538)
val x3541 = x3536 + (x3537 -> x3540)

x3541
}
val x3543 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3154,x3542)
val x3544 = x3535 + (x3141 -> x3543)
x5 = x3544
x3153
}
val x3551 = x5
val x3549 = x3547._2
val x3550 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))),x1474,x3549)
val x3552 = x3551.contains(x3550)
val x3691 = if (x3552) {
val x3553 = x3551(x3550)
x3553
} else {
val x3554 = x1483.getOrElse(x3550, x17)
val x3555 = x3554._1
val x3556 = x3554._2
val x3557 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3555,x3556)
val x3558 = x3551 + (x3550 -> x3557)
x5 = x3558
val x3561 = x5
val x3560 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e1"))),x1474,x3549)
val x3562 = x3561.contains(x3560)
val x3643 = if (x3562) {
val x3563 = x3561(x3560)
x3563
} else {
val x3564 = x1483.getOrElse(x3560, x17)
val x3565 = x3564._1
val x3566 = x3564._2
val x3567 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3565,x3566)
val x3568 = x3561 + (x3560 -> x3567)
x5 = x3568
val x3571 = x5
val x3570 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x3549)
val x3572 = x3571.contains(x3570)
val x3595 = if (x3572) {
val x3573 = x3571(x3570)
x3573
} else {
val x3574 = x1483.getOrElse(x3570, x17)
val x3575 = x3574._1
val x3576 = x3574._2
val x3577 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3575,x3576)
val x3578 = x3571 + (x3570 -> x3577)
x5 = x3578
val x3581 = x5
val x1855 = x1474("sub")
val x3580 = x3549.getOrElse(x1855, x15)
val x3582 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3580,x3549)
val x3583 = x3575.union(x3580)
val x3590 = x3549.foldLeft (x3576) { case (x3584, (x3585, x3586)) =>
val x3587 = x3584.getOrElse(x3585, x15)
val x3588 = x3587.union(x3586)
val x3589 = x3584 + (x3585 -> x3588)

x3589
}
val x3591 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3583,x3590)
val x3592 = x3581 + (x3570 -> x3591)
x5 = x3592
x3582
}
val x3599 = x5
val x3597 = x3595._2
val x3598 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e1"),x1474,x3597)
val x3600 = x3599.contains(x3598)
val x3623 = if (x3600) {
val x3601 = x3599(x3598)
x3601
} else {
val x3602 = x1483.getOrElse(x3598, x17)
val x3603 = x3602._1
val x3604 = x3602._2
val x3605 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3603,x3604)
val x3606 = x3599 + (x3598 -> x3605)
x5 = x3606
val x3609 = x5
val x1539 = x1474("e1")
val x3608 = x3597.getOrElse(x1539, x15)
val x3610 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3608,x3597)
val x3611 = x3603.union(x3608)
val x3618 = x3597.foldLeft (x3604) { case (x3612, (x3613, x3614)) =>
val x3615 = x3612.getOrElse(x3613, x15)
val x3616 = x3615.union(x3614)
val x3617 = x3612 + (x3613 -> x3616)

x3617
}
val x3619 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3611,x3618)
val x3620 = x3609 + (x3598 -> x3619)
x5 = x3620
x3610
}
val x3596 = x3595._1
val x3624 = x3623._1
val x3625 = x3623._2
val x3626 = apply_closures_norep(x3596, List(x3624), x3625)
val x3629 = x5
val x3627 = x3626._1
val x3628 = x3626._2
val x3630 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3627,x3628)
val x3631 = x3565.union(x3627)
val x3638 = x3628.foldLeft (x3566) { case (x3632, (x3633, x3634)) =>
val x3635 = x3632.getOrElse(x3633, x15)
val x3636 = x3635.union(x3634)
val x3637 = x3632 + (x3633 -> x3636)

x3637
}
val x3639 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3631,x3638)
val x3640 = x3629 + (x3560 -> x3639)
x5 = x3640
x3630
}
val x3647 = x5
val x3645 = x3643._2
val x3646 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x3645)
val x3648 = x3647.contains(x3646)
val x3671 = if (x3648) {
val x3649 = x3647(x3646)
x3649
} else {
val x3650 = x1483.getOrElse(x3646, x17)
val x3651 = x3650._1
val x3652 = x3650._2
val x3653 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3651,x3652)
val x3654 = x3647 + (x3646 -> x3653)
x5 = x3654
val x3657 = x5
val x1932 = x1474("church1")
val x3656 = x3645.getOrElse(x1932, x15)
val x3658 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3656,x3645)
val x3659 = x3651.union(x3656)
val x3666 = x3645.foldLeft (x3652) { case (x3660, (x3661, x3662)) =>
val x3663 = x3660.getOrElse(x3661, x15)
val x3664 = x3663.union(x3662)
val x3665 = x3660 + (x3661 -> x3664)

x3665
}
val x3667 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3659,x3666)
val x3668 = x3657 + (x3646 -> x3667)
x5 = x3668
x3658
}
val x3644 = x3643._1
val x3672 = x3671._1
val x3673 = x3671._2
val x3674 = apply_closures_norep(x3644, List(x3672), x3673)
val x3677 = x5
val x3675 = x3674._1
val x3676 = x3674._2
val x3678 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3675,x3676)
val x3679 = x3555.union(x3675)
val x3686 = x3676.foldLeft (x3556) { case (x3680, (x3681, x3682)) =>
val x3683 = x3680.getOrElse(x3681, x15)
val x3684 = x3683.union(x3682)
val x3685 = x3680 + (x3681 -> x3684)

x3685
}
val x3687 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3679,x3686)
val x3688 = x3677 + (x3550 -> x3687)
x5 = x3688
x3678
}
val x3548 = x3547._1
val x3692 = x3691._1
val x3693 = x3691._2
val x3694 = apply_closures_norep(x3548, List(x3692), x3693)
val x3697 = x5
val x3695 = x3694._1
val x3696 = x3694._2
val x3698 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3695,x3696)
val x3699 = x3136.union(x3695)
val x3706 = x3696.foldLeft (x3137) { case (x3700, (x3701, x3702)) =>
val x3703 = x3700.getOrElse(x3701, x15)
val x3704 = x3703.union(x3702)
val x3705 = x3700 + (x3701 -> x3704)

x3705
}
val x3707 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3699,x3706)
val x3708 = x3697 + (x3131 -> x3707)
x5 = x3708
x3698
}
val x3715 = x5
val x3713 = x3711._2
val x3714 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))),x1474,x3713)
val x3716 = x3715.contains(x3714)
val x3855 = if (x3716) {
val x3717 = x3715(x3714)
x3717
} else {
val x3718 = x1483.getOrElse(x3714, x17)
val x3719 = x3718._1
val x3720 = x3718._2
val x3721 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3719,x3720)
val x3722 = x3715 + (x3714 -> x3721)
x5 = x3722
val x3725 = x5
val x3724 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e2"))),x1474,x3713)
val x3726 = x3725.contains(x3724)
val x3807 = if (x3726) {
val x3727 = x3725(x3724)
x3727
} else {
val x3728 = x1483.getOrElse(x3724, x17)
val x3729 = x3728._1
val x3730 = x3728._2
val x3731 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3729,x3730)
val x3732 = x3725 + (x3724 -> x3731)
x5 = x3732
val x3735 = x5
val x3734 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x3713)
val x3736 = x3735.contains(x3734)
val x3759 = if (x3736) {
val x3737 = x3735(x3734)
x3737
} else {
val x3738 = x1483.getOrElse(x3734, x17)
val x3739 = x3738._1
val x3740 = x3738._2
val x3741 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3739,x3740)
val x3742 = x3735 + (x3734 -> x3741)
x5 = x3742
val x3745 = x5
val x1855 = x1474("sub")
val x3744 = x3713.getOrElse(x1855, x15)
val x3746 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3744,x3713)
val x3747 = x3739.union(x3744)
val x3754 = x3713.foldLeft (x3740) { case (x3748, (x3749, x3750)) =>
val x3751 = x3748.getOrElse(x3749, x15)
val x3752 = x3751.union(x3750)
val x3753 = x3748 + (x3749 -> x3752)

x3753
}
val x3755 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3747,x3754)
val x3756 = x3745 + (x3734 -> x3755)
x5 = x3756
x3746
}
val x3763 = x5
val x3761 = x3759._2
val x3762 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x3761)
val x3764 = x3763.contains(x3762)
val x3787 = if (x3764) {
val x3765 = x3763(x3762)
x3765
} else {
val x3766 = x1483.getOrElse(x3762, x17)
val x3767 = x3766._1
val x3768 = x3766._2
val x3769 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3767,x3768)
val x3770 = x3763 + (x3762 -> x3769)
x5 = x3770
val x3773 = x5
val x1626 = x1474("e2")
val x3772 = x3761.getOrElse(x1626, x15)
val x3774 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3772,x3761)
val x3775 = x3767.union(x3772)
val x3782 = x3761.foldLeft (x3768) { case (x3776, (x3777, x3778)) =>
val x3779 = x3776.getOrElse(x3777, x15)
val x3780 = x3779.union(x3778)
val x3781 = x3776 + (x3777 -> x3780)

x3781
}
val x3783 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3775,x3782)
val x3784 = x3773 + (x3762 -> x3783)
x5 = x3784
x3774
}
val x3760 = x3759._1
val x3788 = x3787._1
val x3789 = x3787._2
val x3790 = apply_closures_norep(x3760, List(x3788), x3789)
val x3793 = x5
val x3791 = x3790._1
val x3792 = x3790._2
val x3794 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3791,x3792)
val x3795 = x3729.union(x3791)
val x3802 = x3792.foldLeft (x3730) { case (x3796, (x3797, x3798)) =>
val x3799 = x3796.getOrElse(x3797, x15)
val x3800 = x3799.union(x3798)
val x3801 = x3796 + (x3797 -> x3800)

x3801
}
val x3803 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3795,x3802)
val x3804 = x3793 + (x3724 -> x3803)
x5 = x3804
x3794
}
val x3811 = x5
val x3809 = x3807._2
val x3810 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x3809)
val x3812 = x3811.contains(x3810)
val x3835 = if (x3812) {
val x3813 = x3811(x3810)
x3813
} else {
val x3814 = x1483.getOrElse(x3810, x17)
val x3815 = x3814._1
val x3816 = x3814._2
val x3817 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3815,x3816)
val x3818 = x3811 + (x3810 -> x3817)
x5 = x3818
val x3821 = x5
val x1932 = x1474("church1")
val x3820 = x3809.getOrElse(x1932, x15)
val x3822 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3820,x3809)
val x3823 = x3815.union(x3820)
val x3830 = x3809.foldLeft (x3816) { case (x3824, (x3825, x3826)) =>
val x3827 = x3824.getOrElse(x3825, x15)
val x3828 = x3827.union(x3826)
val x3829 = x3824 + (x3825 -> x3828)

x3829
}
val x3831 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3823,x3830)
val x3832 = x3821 + (x3810 -> x3831)
x5 = x3832
x3822
}
val x3808 = x3807._1
val x3836 = x3835._1
val x3837 = x3835._2
val x3838 = apply_closures_norep(x3808, List(x3836), x3837)
val x3841 = x5
val x3839 = x3838._1
val x3840 = x3838._2
val x3842 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3839,x3840)
val x3843 = x3719.union(x3839)
val x3850 = x3840.foldLeft (x3720) { case (x3844, (x3845, x3846)) =>
val x3847 = x3844.getOrElse(x3845, x15)
val x3848 = x3847.union(x3846)
val x3849 = x3844 + (x3845 -> x3848)

x3849
}
val x3851 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3843,x3850)
val x3852 = x3841 + (x3714 -> x3851)
x5 = x3852
x3842
}
val x3712 = x3711._1
val x3856 = x3855._1
val x3857 = x3855._2
val x3858 = apply_closures_norep(x3712, List(x3856), x3857)
val x3861 = x5
val x3859 = x3858._1
val x3860 = x3858._2
val x3862 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3859,x3860)
val x3863 = x3126.union(x3859)
val x3870 = x3860.foldLeft (x3127) { case (x3864, (x3865, x3866)) =>
val x3867 = x3864.getOrElse(x3865, x15)
val x3868 = x3867.union(x3866)
val x3869 = x3864 + (x3865 -> x3868)

x3869
}
val x3871 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3863,x3870)
val x3872 = x3861 + (x3121 -> x3871)
x5 = x3872
x3862
}
val x3879 = x5
val x3880 = x3879.contains(x3093)
val x3899 = if (x3880) {
val x3881 = x3879(x3093)
x3881
} else {
val x3097 = x1483.getOrElse(x3093, x17)
val x3098 = x3097._1
val x3099 = x3097._2
val x3100 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3098,x3099)
val x3882 = x3879 + (x3093 -> x3100)
x5 = x3882
val x3884 = Set[AbsValue](BoolV())
val x3885 = x5
val x3886 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3884,x3092)
val x3887 = x3098.union(x3884)
val x3894 = x3092.foldLeft (x3099) { case (x3888, (x3889, x3890)) =>
val x3891 = x3888.getOrElse(x3889, x15)
val x3892 = x3891.union(x3890)
val x3893 = x3888 + (x3889 -> x3892)

x3893
}
val x3895 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3887,x3894)
val x3896 = x3885 + (x3093 -> x3895)
x5 = x3896
x3886
}
val x3902 = x5
val x3903 = x3902.contains(x3121)
val x4257 = if (x3903) {
val x3904 = x3902(x3121)
x3904
} else {
val x3125 = x1483.getOrElse(x3121, x17)
val x3126 = x3125._1
val x3127 = x3125._2
val x3128 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3126,x3127)
val x3905 = x3902 + (x3121 -> x3128)
x5 = x3905
val x3907 = x5
val x3131 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),x1474,x3092)
val x3908 = x3907.contains(x3131)
val x4093 = if (x3908) {
val x3909 = x3907(x3131)
x3909
} else {
val x3135 = x1483.getOrElse(x3131, x17)
val x3136 = x3135._1
val x3137 = x3135._2
val x3138 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3136,x3137)
val x3910 = x3907 + (x3131 -> x3138)
x5 = x3910
val x3912 = x5
val x3141 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church=?"),x1474,x3092)
val x3913 = x3912.contains(x3141)
val x3929 = if (x3913) {
val x3914 = x3912(x3141)
x3914
} else {
val x1806 = x1474("church=?")
val x3151 = x3092.getOrElse(x1806, x15)
val x3153 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3151,x3092)
val x3145 = x1483.getOrElse(x3141, x17)
val x3146 = x3145._1
val x3147 = x3145._2
val x3148 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3146,x3147)
val x3915 = x3912 + (x3141 -> x3148)
x5 = x3915
val x3917 = x5
val x3154 = x3146.union(x3151)
val x3924 = x3092.foldLeft (x3147) { case (x3918, (x3919, x3920)) =>
val x3921 = x3918.getOrElse(x3919, x15)
val x3922 = x3921.union(x3920)
val x3923 = x3918 + (x3919 -> x3922)

x3923
}
val x3925 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3154,x3924)
val x3926 = x3917 + (x3141 -> x3925)
x5 = x3926
x3153
}
val x3933 = x5
val x3931 = x3929._2
val x3932 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))),x1474,x3931)
val x3934 = x3933.contains(x3932)
val x4073 = if (x3934) {
val x3935 = x3933(x3932)
x3935
} else {
val x3936 = x1483.getOrElse(x3932, x17)
val x3937 = x3936._1
val x3938 = x3936._2
val x3939 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3937,x3938)
val x3940 = x3933 + (x3932 -> x3939)
x5 = x3940
val x3943 = x5
val x3942 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e1"))),x1474,x3931)
val x3944 = x3943.contains(x3942)
val x4025 = if (x3944) {
val x3945 = x3943(x3942)
x3945
} else {
val x3946 = x1483.getOrElse(x3942, x17)
val x3947 = x3946._1
val x3948 = x3946._2
val x3949 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3947,x3948)
val x3950 = x3943 + (x3942 -> x3949)
x5 = x3950
val x3953 = x5
val x3952 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x3931)
val x3954 = x3953.contains(x3952)
val x3977 = if (x3954) {
val x3955 = x3953(x3952)
x3955
} else {
val x3956 = x1483.getOrElse(x3952, x17)
val x3957 = x3956._1
val x3958 = x3956._2
val x3959 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3957,x3958)
val x3960 = x3953 + (x3952 -> x3959)
x5 = x3960
val x3963 = x5
val x1855 = x1474("sub")
val x3962 = x3931.getOrElse(x1855, x15)
val x3964 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3962,x3931)
val x3965 = x3957.union(x3962)
val x3972 = x3931.foldLeft (x3958) { case (x3966, (x3967, x3968)) =>
val x3969 = x3966.getOrElse(x3967, x15)
val x3970 = x3969.union(x3968)
val x3971 = x3966 + (x3967 -> x3970)

x3971
}
val x3973 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3965,x3972)
val x3974 = x3963 + (x3952 -> x3973)
x5 = x3974
x3964
}
val x3981 = x5
val x3979 = x3977._2
val x3980 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e1"),x1474,x3979)
val x3982 = x3981.contains(x3980)
val x4005 = if (x3982) {
val x3983 = x3981(x3980)
x3983
} else {
val x3984 = x1483.getOrElse(x3980, x17)
val x3985 = x3984._1
val x3986 = x3984._2
val x3987 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3985,x3986)
val x3988 = x3981 + (x3980 -> x3987)
x5 = x3988
val x3991 = x5
val x1539 = x1474("e1")
val x3990 = x3979.getOrElse(x1539, x15)
val x3992 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3990,x3979)
val x3993 = x3985.union(x3990)
val x4000 = x3979.foldLeft (x3986) { case (x3994, (x3995, x3996)) =>
val x3997 = x3994.getOrElse(x3995, x15)
val x3998 = x3997.union(x3996)
val x3999 = x3994 + (x3995 -> x3998)

x3999
}
val x4001 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3993,x4000)
val x4002 = x3991 + (x3980 -> x4001)
x5 = x4002
x3992
}
val x3978 = x3977._1
val x4006 = x4005._1
val x4007 = x4005._2
val x4008 = apply_closures_norep(x3978, List(x4006), x4007)
val x4011 = x5
val x4009 = x4008._1
val x4010 = x4008._2
val x4012 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4009,x4010)
val x4013 = x3947.union(x4009)
val x4020 = x4010.foldLeft (x3948) { case (x4014, (x4015, x4016)) =>
val x4017 = x4014.getOrElse(x4015, x15)
val x4018 = x4017.union(x4016)
val x4019 = x4014 + (x4015 -> x4018)

x4019
}
val x4021 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4013,x4020)
val x4022 = x4011 + (x3942 -> x4021)
x5 = x4022
x4012
}
val x4029 = x5
val x4027 = x4025._2
val x4028 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x4027)
val x4030 = x4029.contains(x4028)
val x4053 = if (x4030) {
val x4031 = x4029(x4028)
x4031
} else {
val x4032 = x1483.getOrElse(x4028, x17)
val x4033 = x4032._1
val x4034 = x4032._2
val x4035 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4033,x4034)
val x4036 = x4029 + (x4028 -> x4035)
x5 = x4036
val x4039 = x5
val x1932 = x1474("church1")
val x4038 = x4027.getOrElse(x1932, x15)
val x4040 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4038,x4027)
val x4041 = x4033.union(x4038)
val x4048 = x4027.foldLeft (x4034) { case (x4042, (x4043, x4044)) =>
val x4045 = x4042.getOrElse(x4043, x15)
val x4046 = x4045.union(x4044)
val x4047 = x4042 + (x4043 -> x4046)

x4047
}
val x4049 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4041,x4048)
val x4050 = x4039 + (x4028 -> x4049)
x5 = x4050
x4040
}
val x4026 = x4025._1
val x4054 = x4053._1
val x4055 = x4053._2
val x4056 = apply_closures_norep(x4026, List(x4054), x4055)
val x4059 = x5
val x4057 = x4056._1
val x4058 = x4056._2
val x4060 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4057,x4058)
val x4061 = x3937.union(x4057)
val x4068 = x4058.foldLeft (x3938) { case (x4062, (x4063, x4064)) =>
val x4065 = x4062.getOrElse(x4063, x15)
val x4066 = x4065.union(x4064)
val x4067 = x4062 + (x4063 -> x4066)

x4067
}
val x4069 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4061,x4068)
val x4070 = x4059 + (x3932 -> x4069)
x5 = x4070
x4060
}
val x3930 = x3929._1
val x4074 = x4073._1
val x4075 = x4073._2
val x4076 = apply_closures_norep(x3930, List(x4074), x4075)
val x4079 = x5
val x4077 = x4076._1
val x4078 = x4076._2
val x4080 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4077,x4078)
val x4081 = x3136.union(x4077)
val x4088 = x4078.foldLeft (x3137) { case (x4082, (x4083, x4084)) =>
val x4085 = x4082.getOrElse(x4083, x15)
val x4086 = x4085.union(x4084)
val x4087 = x4082 + (x4083 -> x4086)

x4087
}
val x4089 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4081,x4088)
val x4090 = x4079 + (x3131 -> x4089)
x5 = x4090
x4080
}
val x4097 = x5
val x4095 = x4093._2
val x4096 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))),x1474,x4095)
val x4098 = x4097.contains(x4096)
val x4237 = if (x4098) {
val x4099 = x4097(x4096)
x4099
} else {
val x4100 = x1483.getOrElse(x4096, x17)
val x4101 = x4100._1
val x4102 = x4100._2
val x4103 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4101,x4102)
val x4104 = x4097 + (x4096 -> x4103)
x5 = x4104
val x4107 = x5
val x4106 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e2"))),x1474,x4095)
val x4108 = x4107.contains(x4106)
val x4189 = if (x4108) {
val x4109 = x4107(x4106)
x4109
} else {
val x4110 = x1483.getOrElse(x4106, x17)
val x4111 = x4110._1
val x4112 = x4110._2
val x4113 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4111,x4112)
val x4114 = x4107 + (x4106 -> x4113)
x5 = x4114
val x4117 = x5
val x4116 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x4095)
val x4118 = x4117.contains(x4116)
val x4141 = if (x4118) {
val x4119 = x4117(x4116)
x4119
} else {
val x4120 = x1483.getOrElse(x4116, x17)
val x4121 = x4120._1
val x4122 = x4120._2
val x4123 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4121,x4122)
val x4124 = x4117 + (x4116 -> x4123)
x5 = x4124
val x4127 = x5
val x1855 = x1474("sub")
val x4126 = x4095.getOrElse(x1855, x15)
val x4128 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4126,x4095)
val x4129 = x4121.union(x4126)
val x4136 = x4095.foldLeft (x4122) { case (x4130, (x4131, x4132)) =>
val x4133 = x4130.getOrElse(x4131, x15)
val x4134 = x4133.union(x4132)
val x4135 = x4130 + (x4131 -> x4134)

x4135
}
val x4137 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4129,x4136)
val x4138 = x4127 + (x4116 -> x4137)
x5 = x4138
x4128
}
val x4145 = x5
val x4143 = x4141._2
val x4144 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x4143)
val x4146 = x4145.contains(x4144)
val x4169 = if (x4146) {
val x4147 = x4145(x4144)
x4147
} else {
val x4148 = x1483.getOrElse(x4144, x17)
val x4149 = x4148._1
val x4150 = x4148._2
val x4151 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4149,x4150)
val x4152 = x4145 + (x4144 -> x4151)
x5 = x4152
val x4155 = x5
val x1626 = x1474("e2")
val x4154 = x4143.getOrElse(x1626, x15)
val x4156 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4154,x4143)
val x4157 = x4149.union(x4154)
val x4164 = x4143.foldLeft (x4150) { case (x4158, (x4159, x4160)) =>
val x4161 = x4158.getOrElse(x4159, x15)
val x4162 = x4161.union(x4160)
val x4163 = x4158 + (x4159 -> x4162)

x4163
}
val x4165 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4157,x4164)
val x4166 = x4155 + (x4144 -> x4165)
x5 = x4166
x4156
}
val x4142 = x4141._1
val x4170 = x4169._1
val x4171 = x4169._2
val x4172 = apply_closures_norep(x4142, List(x4170), x4171)
val x4175 = x5
val x4173 = x4172._1
val x4174 = x4172._2
val x4176 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4173,x4174)
val x4177 = x4111.union(x4173)
val x4184 = x4174.foldLeft (x4112) { case (x4178, (x4179, x4180)) =>
val x4181 = x4178.getOrElse(x4179, x15)
val x4182 = x4181.union(x4180)
val x4183 = x4178 + (x4179 -> x4182)

x4183
}
val x4185 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4177,x4184)
val x4186 = x4175 + (x4106 -> x4185)
x5 = x4186
x4176
}
val x4193 = x5
val x4191 = x4189._2
val x4192 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x4191)
val x4194 = x4193.contains(x4192)
val x4217 = if (x4194) {
val x4195 = x4193(x4192)
x4195
} else {
val x4196 = x1483.getOrElse(x4192, x17)
val x4197 = x4196._1
val x4198 = x4196._2
val x4199 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4197,x4198)
val x4200 = x4193 + (x4192 -> x4199)
x5 = x4200
val x4203 = x5
val x1932 = x1474("church1")
val x4202 = x4191.getOrElse(x1932, x15)
val x4204 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4202,x4191)
val x4205 = x4197.union(x4202)
val x4212 = x4191.foldLeft (x4198) { case (x4206, (x4207, x4208)) =>
val x4209 = x4206.getOrElse(x4207, x15)
val x4210 = x4209.union(x4208)
val x4211 = x4206 + (x4207 -> x4210)

x4211
}
val x4213 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4205,x4212)
val x4214 = x4203 + (x4192 -> x4213)
x5 = x4214
x4204
}
val x4190 = x4189._1
val x4218 = x4217._1
val x4219 = x4217._2
val x4220 = apply_closures_norep(x4190, List(x4218), x4219)
val x4223 = x5
val x4221 = x4220._1
val x4222 = x4220._2
val x4224 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4221,x4222)
val x4225 = x4101.union(x4221)
val x4232 = x4222.foldLeft (x4102) { case (x4226, (x4227, x4228)) =>
val x4229 = x4226.getOrElse(x4227, x15)
val x4230 = x4229.union(x4228)
val x4231 = x4226 + (x4227 -> x4230)

x4231
}
val x4233 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4225,x4232)
val x4234 = x4223 + (x4096 -> x4233)
x5 = x4234
x4224
}
val x4094 = x4093._1
val x4238 = x4237._1
val x4239 = x4237._2
val x4240 = apply_closures_norep(x4094, List(x4238), x4239)
val x4243 = x5
val x4241 = x4240._1
val x4242 = x4240._2
val x4244 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4241,x4242)
val x4245 = x3126.union(x4241)
val x4252 = x4242.foldLeft (x3127) { case (x4246, (x4247, x4248)) =>
val x4249 = x4246.getOrElse(x4247, x15)
val x4250 = x4249.union(x4248)
val x4251 = x4246 + (x4247 -> x4250)

x4251
}
val x4253 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4245,x4252)
val x4254 = x4243 + (x3121 -> x4253)
x5 = x4254
x4244
}
val x4267 = x5
val x3518 = x3517._1
val x3876 = x3875._1
val x3878 = x3518.union(x3876)
val x3901 = x3899._2
val x4259 = x4257._2
val x4266 = x4259.foldLeft (x3901) { case (x4260, (x4261, x4262)) =>
val x4263 = x4260.getOrElse(x4261, x15)
val x4264 = x4263.union(x4262)
val x4265 = x4260 + (x4261 -> x4264)

x4265
}
val x4268 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x3878,x4266)
val x4269 = x1670.union(x3878)
val x4276 = x4266.foldLeft (x1671) { case (x4270, (x4271, x4272)) =>
val x4273 = x4270.getOrElse(x4271, x15)
val x4274 = x4273.union(x4272)
val x4275 = x4270 + (x4271 -> x4274)

x4275
}
val x4277 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4269,x4276)
val x4278 = x4267 + (x1665 -> x4277)
x5 = x4278
x4268
}
val x4285 = x5
val x4286 = x4285.contains(x1578)
val x4355 = if (x4286) {
val x4287 = x4285(x1578)
x4287
} else {
val x1582 = x1483.getOrElse(x1578, x17)
val x1583 = x1582._1
val x1584 = x1582._2
val x1585 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1583,x1584)
val x4288 = x4285 + (x1578 -> x1585)
x5 = x4288
val x4290 = x5
val x1588 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church0?"),x1474,x1577)
val x4291 = x4290.contains(x1588)
val x4307 = if (x4291) {
val x4292 = x4290(x1588)
x4292
} else {
val x1510 = x1474("church0?")
val x1598 = x1577.getOrElse(x1510, x15)
val x1600 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1598,x1577)
val x1592 = x1483.getOrElse(x1588, x17)
val x1593 = x1592._1
val x1594 = x1592._2
val x1595 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1593,x1594)
val x4293 = x4290 + (x1588 -> x1595)
x5 = x4293
val x4295 = x5
val x1601 = x1593.union(x1598)
val x4302 = x1577.foldLeft (x1594) { case (x4296, (x4297, x4298)) =>
val x4299 = x4296.getOrElse(x4297, x15)
val x4300 = x4299.union(x4298)
val x4301 = x4296 + (x4297 -> x4300)

x4301
}
val x4303 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1601,x4302)
val x4304 = x4295 + (x1588 -> x4303)
x5 = x4304
x1600
}
val x4311 = x5
val x4309 = x4307._2
val x4310 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x4309)
val x4312 = x4311.contains(x4310)
val x4335 = if (x4312) {
val x4313 = x4311(x4310)
x4313
} else {
val x4314 = x1483.getOrElse(x4310, x17)
val x4315 = x4314._1
val x4316 = x4314._2
val x4317 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4315,x4316)
val x4318 = x4311 + (x4310 -> x4317)
x5 = x4318
val x4321 = x5
val x1626 = x1474("e2")
val x4320 = x4309.getOrElse(x1626, x15)
val x4322 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4320,x4309)
val x4323 = x4315.union(x4320)
val x4330 = x4309.foldLeft (x4316) { case (x4324, (x4325, x4326)) =>
val x4327 = x4324.getOrElse(x4325, x15)
val x4328 = x4327.union(x4326)
val x4329 = x4324 + (x4325 -> x4328)

x4329
}
val x4331 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4323,x4330)
val x4332 = x4321 + (x4310 -> x4331)
x5 = x4332
x4322
}
val x4308 = x4307._1
val x4336 = x4335._1
val x4337 = x4335._2
val x4338 = apply_closures_norep(x4308, List(x4336), x4337)
val x4341 = x5
val x4339 = x4338._1
val x4340 = x4338._2
val x4342 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4339,x4340)
val x4343 = x1583.union(x4339)
val x4350 = x4340.foldLeft (x1584) { case (x4344, (x4345, x4346)) =>
val x4347 = x4344.getOrElse(x4345, x15)
val x4348 = x4347.union(x4346)
val x4349 = x4344 + (x4345 -> x4348)

x4349
}
val x4351 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4343,x4350)
val x4352 = x4341 + (x1578 -> x4351)
x5 = x4352
x4342
}
val x4358 = x5
val x4359 = x4358.contains(x1665)
val x5624 = if (x4359) {
val x4360 = x4358(x1665)
x4360
} else {
val x1669 = x1483.getOrElse(x1665, x17)
val x1670 = x1669._1
val x1671 = x1669._2
val x1672 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1670,x1671)
val x4361 = x4358 + (x1665 -> x1672)
x5 = x4361
val x4363 = x5
val x4364 = x4363.contains(x1578)
val x4433 = if (x4364) {
val x4365 = x4363(x1578)
x4365
} else {
val x1582 = x1483.getOrElse(x1578, x17)
val x1583 = x1582._1
val x1584 = x1582._2
val x1585 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1583,x1584)
val x4366 = x4363 + (x1578 -> x1585)
x5 = x4366
val x4368 = x5
val x1588 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church0?"),x1474,x1577)
val x4369 = x4368.contains(x1588)
val x4385 = if (x4369) {
val x4370 = x4368(x1588)
x4370
} else {
val x1510 = x1474("church0?")
val x1598 = x1577.getOrElse(x1510, x15)
val x1600 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1598,x1577)
val x1592 = x1483.getOrElse(x1588, x17)
val x1593 = x1592._1
val x1594 = x1592._2
val x1595 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1593,x1594)
val x4371 = x4368 + (x1588 -> x1595)
x5 = x4371
val x4373 = x5
val x1601 = x1593.union(x1598)
val x4380 = x1577.foldLeft (x1594) { case (x4374, (x4375, x4376)) =>
val x4377 = x4374.getOrElse(x4375, x15)
val x4378 = x4377.union(x4376)
val x4379 = x4374 + (x4375 -> x4378)

x4379
}
val x4381 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x1601,x4380)
val x4382 = x4373 + (x1588 -> x4381)
x5 = x4382
x1600
}
val x4389 = x5
val x4387 = x4385._2
val x4388 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x4387)
val x4390 = x4389.contains(x4388)
val x4413 = if (x4390) {
val x4391 = x4389(x4388)
x4391
} else {
val x4392 = x1483.getOrElse(x4388, x17)
val x4393 = x4392._1
val x4394 = x4392._2
val x4395 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4393,x4394)
val x4396 = x4389 + (x4388 -> x4395)
x5 = x4396
val x4399 = x5
val x1626 = x1474("e2")
val x4398 = x4387.getOrElse(x1626, x15)
val x4400 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4398,x4387)
val x4401 = x4393.union(x4398)
val x4408 = x4387.foldLeft (x4394) { case (x4402, (x4403, x4404)) =>
val x4405 = x4402.getOrElse(x4403, x15)
val x4406 = x4405.union(x4404)
val x4407 = x4402 + (x4403 -> x4406)

x4407
}
val x4409 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4401,x4408)
val x4410 = x4399 + (x4388 -> x4409)
x5 = x4410
x4400
}
val x4386 = x4385._1
val x4414 = x4413._1
val x4415 = x4413._2
val x4416 = apply_closures_norep(x4386, List(x4414), x4415)
val x4419 = x5
val x4417 = x4416._1
val x4418 = x4416._2
val x4420 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4417,x4418)
val x4421 = x1583.union(x4417)
val x4428 = x4418.foldLeft (x1584) { case (x4422, (x4423, x4424)) =>
val x4425 = x4422.getOrElse(x4423, x15)
val x4426 = x4425.union(x4424)
val x4427 = x4422 + (x4423 -> x4426)

x4427
}
val x4429 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4421,x4428)
val x4430 = x4419 + (x1578 -> x4429)
x5 = x4430
x4420
}
val x4437 = x5
val x4435 = x4433._2
val x4436 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](BoolLit(false),x1474,x4435)
val x4438 = x4437.contains(x4436)
val x4461 = if (x4438) {
val x4439 = x4437(x4436)
x4439
} else {
val x4440 = x1483.getOrElse(x4436, x17)
val x4441 = x4440._1
val x4442 = x4440._2
val x4443 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4441,x4442)
val x4444 = x4437 + (x4436 -> x4443)
x5 = x4444
val x4446 = Set[AbsValue](BoolV())
val x4447 = x5
val x4448 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4446,x4435)
val x4449 = x4441.union(x4446)
val x4456 = x4435.foldLeft (x4442) { case (x4450, (x4451, x4452)) =>
val x4453 = x4450.getOrElse(x4451, x15)
val x4454 = x4453.union(x4452)
val x4455 = x4450 + (x4451 -> x4454)

x4455
}
val x4457 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4449,x4456)
val x4458 = x4447 + (x4436 -> x4457)
x5 = x4458
x4448
}
val x4465 = x5
val x4464 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))),x1474,x4435)
val x4466 = x4465.contains(x4464)
val x4837 = if (x4466) {
val x4467 = x4465(x4464)
x4467
} else {
val x4468 = x1483.getOrElse(x4464, x17)
val x4469 = x4468._1
val x4470 = x4468._2
val x4471 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4469,x4470)
val x4472 = x4465 + (x4464 -> x4471)
x5 = x4472
val x4475 = x5
val x4474 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),x1474,x4435)
val x4476 = x4475.contains(x4474)
val x4673 = if (x4476) {
val x4477 = x4475(x4474)
x4477
} else {
val x4478 = x1483.getOrElse(x4474, x17)
val x4479 = x4478._1
val x4480 = x4478._2
val x4481 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4479,x4480)
val x4482 = x4475 + (x4474 -> x4481)
x5 = x4482
val x4485 = x5
val x4484 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church=?"),x1474,x4435)
val x4486 = x4485.contains(x4484)
val x4509 = if (x4486) {
val x4487 = x4485(x4484)
x4487
} else {
val x4488 = x1483.getOrElse(x4484, x17)
val x4489 = x4488._1
val x4490 = x4488._2
val x4491 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4489,x4490)
val x4492 = x4485 + (x4484 -> x4491)
x5 = x4492
val x4495 = x5
val x1806 = x1474("church=?")
val x4494 = x4435.getOrElse(x1806, x15)
val x4496 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4494,x4435)
val x4497 = x4489.union(x4494)
val x4504 = x4435.foldLeft (x4490) { case (x4498, (x4499, x4500)) =>
val x4501 = x4498.getOrElse(x4499, x15)
val x4502 = x4501.union(x4500)
val x4503 = x4498 + (x4499 -> x4502)

x4503
}
val x4505 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4497,x4504)
val x4506 = x4495 + (x4484 -> x4505)
x5 = x4506
x4496
}
val x4513 = x5
val x4511 = x4509._2
val x4512 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))),x1474,x4511)
val x4514 = x4513.contains(x4512)
val x4653 = if (x4514) {
val x4515 = x4513(x4512)
x4515
} else {
val x4516 = x1483.getOrElse(x4512, x17)
val x4517 = x4516._1
val x4518 = x4516._2
val x4519 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4517,x4518)
val x4520 = x4513 + (x4512 -> x4519)
x5 = x4520
val x4523 = x5
val x4522 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e1"))),x1474,x4511)
val x4524 = x4523.contains(x4522)
val x4605 = if (x4524) {
val x4525 = x4523(x4522)
x4525
} else {
val x4526 = x1483.getOrElse(x4522, x17)
val x4527 = x4526._1
val x4528 = x4526._2
val x4529 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4527,x4528)
val x4530 = x4523 + (x4522 -> x4529)
x5 = x4530
val x4533 = x5
val x4532 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x4511)
val x4534 = x4533.contains(x4532)
val x4557 = if (x4534) {
val x4535 = x4533(x4532)
x4535
} else {
val x4536 = x1483.getOrElse(x4532, x17)
val x4537 = x4536._1
val x4538 = x4536._2
val x4539 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4537,x4538)
val x4540 = x4533 + (x4532 -> x4539)
x5 = x4540
val x4543 = x5
val x1855 = x1474("sub")
val x4542 = x4511.getOrElse(x1855, x15)
val x4544 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4542,x4511)
val x4545 = x4537.union(x4542)
val x4552 = x4511.foldLeft (x4538) { case (x4546, (x4547, x4548)) =>
val x4549 = x4546.getOrElse(x4547, x15)
val x4550 = x4549.union(x4548)
val x4551 = x4546 + (x4547 -> x4550)

x4551
}
val x4553 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4545,x4552)
val x4554 = x4543 + (x4532 -> x4553)
x5 = x4554
x4544
}
val x4561 = x5
val x4559 = x4557._2
val x4560 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e1"),x1474,x4559)
val x4562 = x4561.contains(x4560)
val x4585 = if (x4562) {
val x4563 = x4561(x4560)
x4563
} else {
val x4564 = x1483.getOrElse(x4560, x17)
val x4565 = x4564._1
val x4566 = x4564._2
val x4567 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4565,x4566)
val x4568 = x4561 + (x4560 -> x4567)
x5 = x4568
val x4571 = x5
val x1539 = x1474("e1")
val x4570 = x4559.getOrElse(x1539, x15)
val x4572 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4570,x4559)
val x4573 = x4565.union(x4570)
val x4580 = x4559.foldLeft (x4566) { case (x4574, (x4575, x4576)) =>
val x4577 = x4574.getOrElse(x4575, x15)
val x4578 = x4577.union(x4576)
val x4579 = x4574 + (x4575 -> x4578)

x4579
}
val x4581 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4573,x4580)
val x4582 = x4571 + (x4560 -> x4581)
x5 = x4582
x4572
}
val x4558 = x4557._1
val x4586 = x4585._1
val x4587 = x4585._2
val x4588 = apply_closures_norep(x4558, List(x4586), x4587)
val x4591 = x5
val x4589 = x4588._1
val x4590 = x4588._2
val x4592 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4589,x4590)
val x4593 = x4527.union(x4589)
val x4600 = x4590.foldLeft (x4528) { case (x4594, (x4595, x4596)) =>
val x4597 = x4594.getOrElse(x4595, x15)
val x4598 = x4597.union(x4596)
val x4599 = x4594 + (x4595 -> x4598)

x4599
}
val x4601 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4593,x4600)
val x4602 = x4591 + (x4522 -> x4601)
x5 = x4602
x4592
}
val x4609 = x5
val x4607 = x4605._2
val x4608 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x4607)
val x4610 = x4609.contains(x4608)
val x4633 = if (x4610) {
val x4611 = x4609(x4608)
x4611
} else {
val x4612 = x1483.getOrElse(x4608, x17)
val x4613 = x4612._1
val x4614 = x4612._2
val x4615 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4613,x4614)
val x4616 = x4609 + (x4608 -> x4615)
x5 = x4616
val x4619 = x5
val x1932 = x1474("church1")
val x4618 = x4607.getOrElse(x1932, x15)
val x4620 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4618,x4607)
val x4621 = x4613.union(x4618)
val x4628 = x4607.foldLeft (x4614) { case (x4622, (x4623, x4624)) =>
val x4625 = x4622.getOrElse(x4623, x15)
val x4626 = x4625.union(x4624)
val x4627 = x4622 + (x4623 -> x4626)

x4627
}
val x4629 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4621,x4628)
val x4630 = x4619 + (x4608 -> x4629)
x5 = x4630
x4620
}
val x4606 = x4605._1
val x4634 = x4633._1
val x4635 = x4633._2
val x4636 = apply_closures_norep(x4606, List(x4634), x4635)
val x4639 = x5
val x4637 = x4636._1
val x4638 = x4636._2
val x4640 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4637,x4638)
val x4641 = x4517.union(x4637)
val x4648 = x4638.foldLeft (x4518) { case (x4642, (x4643, x4644)) =>
val x4645 = x4642.getOrElse(x4643, x15)
val x4646 = x4645.union(x4644)
val x4647 = x4642 + (x4643 -> x4646)

x4647
}
val x4649 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4641,x4648)
val x4650 = x4639 + (x4512 -> x4649)
x5 = x4650
x4640
}
val x4510 = x4509._1
val x4654 = x4653._1
val x4655 = x4653._2
val x4656 = apply_closures_norep(x4510, List(x4654), x4655)
val x4659 = x5
val x4657 = x4656._1
val x4658 = x4656._2
val x4660 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4657,x4658)
val x4661 = x4479.union(x4657)
val x4668 = x4658.foldLeft (x4480) { case (x4662, (x4663, x4664)) =>
val x4665 = x4662.getOrElse(x4663, x15)
val x4666 = x4665.union(x4664)
val x4667 = x4662 + (x4663 -> x4666)

x4667
}
val x4669 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4661,x4668)
val x4670 = x4659 + (x4474 -> x4669)
x5 = x4670
x4660
}
val x4677 = x5
val x4675 = x4673._2
val x4676 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))),x1474,x4675)
val x4678 = x4677.contains(x4676)
val x4817 = if (x4678) {
val x4679 = x4677(x4676)
x4679
} else {
val x4680 = x1483.getOrElse(x4676, x17)
val x4681 = x4680._1
val x4682 = x4680._2
val x4683 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4681,x4682)
val x4684 = x4677 + (x4676 -> x4683)
x5 = x4684
val x4687 = x5
val x4686 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e2"))),x1474,x4675)
val x4688 = x4687.contains(x4686)
val x4769 = if (x4688) {
val x4689 = x4687(x4686)
x4689
} else {
val x4690 = x1483.getOrElse(x4686, x17)
val x4691 = x4690._1
val x4692 = x4690._2
val x4693 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4691,x4692)
val x4694 = x4687 + (x4686 -> x4693)
x5 = x4694
val x4697 = x5
val x4696 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x4675)
val x4698 = x4697.contains(x4696)
val x4721 = if (x4698) {
val x4699 = x4697(x4696)
x4699
} else {
val x4700 = x1483.getOrElse(x4696, x17)
val x4701 = x4700._1
val x4702 = x4700._2
val x4703 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4701,x4702)
val x4704 = x4697 + (x4696 -> x4703)
x5 = x4704
val x4707 = x5
val x1855 = x1474("sub")
val x4706 = x4675.getOrElse(x1855, x15)
val x4708 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4706,x4675)
val x4709 = x4701.union(x4706)
val x4716 = x4675.foldLeft (x4702) { case (x4710, (x4711, x4712)) =>
val x4713 = x4710.getOrElse(x4711, x15)
val x4714 = x4713.union(x4712)
val x4715 = x4710 + (x4711 -> x4714)

x4715
}
val x4717 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4709,x4716)
val x4718 = x4707 + (x4696 -> x4717)
x5 = x4718
x4708
}
val x4725 = x5
val x4723 = x4721._2
val x4724 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x4723)
val x4726 = x4725.contains(x4724)
val x4749 = if (x4726) {
val x4727 = x4725(x4724)
x4727
} else {
val x4728 = x1483.getOrElse(x4724, x17)
val x4729 = x4728._1
val x4730 = x4728._2
val x4731 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4729,x4730)
val x4732 = x4725 + (x4724 -> x4731)
x5 = x4732
val x4735 = x5
val x1626 = x1474("e2")
val x4734 = x4723.getOrElse(x1626, x15)
val x4736 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4734,x4723)
val x4737 = x4729.union(x4734)
val x4744 = x4723.foldLeft (x4730) { case (x4738, (x4739, x4740)) =>
val x4741 = x4738.getOrElse(x4739, x15)
val x4742 = x4741.union(x4740)
val x4743 = x4738 + (x4739 -> x4742)

x4743
}
val x4745 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4737,x4744)
val x4746 = x4735 + (x4724 -> x4745)
x5 = x4746
x4736
}
val x4722 = x4721._1
val x4750 = x4749._1
val x4751 = x4749._2
val x4752 = apply_closures_norep(x4722, List(x4750), x4751)
val x4755 = x5
val x4753 = x4752._1
val x4754 = x4752._2
val x4756 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4753,x4754)
val x4757 = x4691.union(x4753)
val x4764 = x4754.foldLeft (x4692) { case (x4758, (x4759, x4760)) =>
val x4761 = x4758.getOrElse(x4759, x15)
val x4762 = x4761.union(x4760)
val x4763 = x4758 + (x4759 -> x4762)

x4763
}
val x4765 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4757,x4764)
val x4766 = x4755 + (x4686 -> x4765)
x5 = x4766
x4756
}
val x4773 = x5
val x4771 = x4769._2
val x4772 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x4771)
val x4774 = x4773.contains(x4772)
val x4797 = if (x4774) {
val x4775 = x4773(x4772)
x4775
} else {
val x4776 = x1483.getOrElse(x4772, x17)
val x4777 = x4776._1
val x4778 = x4776._2
val x4779 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4777,x4778)
val x4780 = x4773 + (x4772 -> x4779)
x5 = x4780
val x4783 = x5
val x1932 = x1474("church1")
val x4782 = x4771.getOrElse(x1932, x15)
val x4784 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4782,x4771)
val x4785 = x4777.union(x4782)
val x4792 = x4771.foldLeft (x4778) { case (x4786, (x4787, x4788)) =>
val x4789 = x4786.getOrElse(x4787, x15)
val x4790 = x4789.union(x4788)
val x4791 = x4786 + (x4787 -> x4790)

x4791
}
val x4793 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4785,x4792)
val x4794 = x4783 + (x4772 -> x4793)
x5 = x4794
x4784
}
val x4770 = x4769._1
val x4798 = x4797._1
val x4799 = x4797._2
val x4800 = apply_closures_norep(x4770, List(x4798), x4799)
val x4803 = x5
val x4801 = x4800._1
val x4802 = x4800._2
val x4804 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4801,x4802)
val x4805 = x4681.union(x4801)
val x4812 = x4802.foldLeft (x4682) { case (x4806, (x4807, x4808)) =>
val x4809 = x4806.getOrElse(x4807, x15)
val x4810 = x4809.union(x4808)
val x4811 = x4806 + (x4807 -> x4810)

x4811
}
val x4813 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4805,x4812)
val x4814 = x4803 + (x4676 -> x4813)
x5 = x4814
x4804
}
val x4674 = x4673._1
val x4818 = x4817._1
val x4819 = x4817._2
val x4820 = apply_closures_norep(x4674, List(x4818), x4819)
val x4823 = x5
val x4821 = x4820._1
val x4822 = x4820._2
val x4824 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4821,x4822)
val x4825 = x4469.union(x4821)
val x4832 = x4822.foldLeft (x4470) { case (x4826, (x4827, x4828)) =>
val x4829 = x4826.getOrElse(x4827, x15)
val x4830 = x4829.union(x4828)
val x4831 = x4826 + (x4827 -> x4830)

x4831
}
val x4833 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4825,x4832)
val x4834 = x4823 + (x4464 -> x4833)
x5 = x4834
x4824
}
val x4840 = x5
val x4841 = x4840.contains(x4436)
val x4860 = if (x4841) {
val x4842 = x4840(x4436)
x4842
} else {
val x4440 = x1483.getOrElse(x4436, x17)
val x4441 = x4440._1
val x4442 = x4440._2
val x4443 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4441,x4442)
val x4843 = x4840 + (x4436 -> x4443)
x5 = x4843
val x4845 = Set[AbsValue](BoolV())
val x4846 = x5
val x4847 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4845,x4435)
val x4848 = x4441.union(x4845)
val x4855 = x4435.foldLeft (x4442) { case (x4849, (x4850, x4851)) =>
val x4852 = x4849.getOrElse(x4850, x15)
val x4853 = x4852.union(x4851)
val x4854 = x4849 + (x4850 -> x4853)

x4854
}
val x4856 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4848,x4855)
val x4857 = x4846 + (x4436 -> x4856)
x5 = x4857
x4847
}
val x4863 = x5
val x4864 = x4863.contains(x4464)
val x5218 = if (x4864) {
val x4865 = x4863(x4464)
x4865
} else {
val x4468 = x1483.getOrElse(x4464, x17)
val x4469 = x4468._1
val x4470 = x4468._2
val x4471 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4469,x4470)
val x4866 = x4863 + (x4464 -> x4471)
x5 = x4866
val x4868 = x5
val x4474 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),x1474,x4435)
val x4869 = x4868.contains(x4474)
val x5054 = if (x4869) {
val x4870 = x4868(x4474)
x4870
} else {
val x4478 = x1483.getOrElse(x4474, x17)
val x4479 = x4478._1
val x4480 = x4478._2
val x4481 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4479,x4480)
val x4871 = x4868 + (x4474 -> x4481)
x5 = x4871
val x4873 = x5
val x4484 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church=?"),x1474,x4435)
val x4874 = x4873.contains(x4484)
val x4890 = if (x4874) {
val x4875 = x4873(x4484)
x4875
} else {
val x1806 = x1474("church=?")
val x4494 = x4435.getOrElse(x1806, x15)
val x4496 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4494,x4435)
val x4488 = x1483.getOrElse(x4484, x17)
val x4489 = x4488._1
val x4490 = x4488._2
val x4491 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4489,x4490)
val x4876 = x4873 + (x4484 -> x4491)
x5 = x4876
val x4878 = x5
val x4497 = x4489.union(x4494)
val x4885 = x4435.foldLeft (x4490) { case (x4879, (x4880, x4881)) =>
val x4882 = x4879.getOrElse(x4880, x15)
val x4883 = x4882.union(x4881)
val x4884 = x4879 + (x4880 -> x4883)

x4884
}
val x4886 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4497,x4885)
val x4887 = x4878 + (x4484 -> x4886)
x5 = x4887
x4496
}
val x4894 = x5
val x4892 = x4890._2
val x4893 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))),x1474,x4892)
val x4895 = x4894.contains(x4893)
val x5034 = if (x4895) {
val x4896 = x4894(x4893)
x4896
} else {
val x4897 = x1483.getOrElse(x4893, x17)
val x4898 = x4897._1
val x4899 = x4897._2
val x4900 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4898,x4899)
val x4901 = x4894 + (x4893 -> x4900)
x5 = x4901
val x4904 = x5
val x4903 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e1"))),x1474,x4892)
val x4905 = x4904.contains(x4903)
val x4986 = if (x4905) {
val x4906 = x4904(x4903)
x4906
} else {
val x4907 = x1483.getOrElse(x4903, x17)
val x4908 = x4907._1
val x4909 = x4907._2
val x4910 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4908,x4909)
val x4911 = x4904 + (x4903 -> x4910)
x5 = x4911
val x4914 = x5
val x4913 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x4892)
val x4915 = x4914.contains(x4913)
val x4938 = if (x4915) {
val x4916 = x4914(x4913)
x4916
} else {
val x4917 = x1483.getOrElse(x4913, x17)
val x4918 = x4917._1
val x4919 = x4917._2
val x4920 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4918,x4919)
val x4921 = x4914 + (x4913 -> x4920)
x5 = x4921
val x4924 = x5
val x1855 = x1474("sub")
val x4923 = x4892.getOrElse(x1855, x15)
val x4925 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4923,x4892)
val x4926 = x4918.union(x4923)
val x4933 = x4892.foldLeft (x4919) { case (x4927, (x4928, x4929)) =>
val x4930 = x4927.getOrElse(x4928, x15)
val x4931 = x4930.union(x4929)
val x4932 = x4927 + (x4928 -> x4931)

x4932
}
val x4934 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4926,x4933)
val x4935 = x4924 + (x4913 -> x4934)
x5 = x4935
x4925
}
val x4942 = x5
val x4940 = x4938._2
val x4941 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e1"),x1474,x4940)
val x4943 = x4942.contains(x4941)
val x4966 = if (x4943) {
val x4944 = x4942(x4941)
x4944
} else {
val x4945 = x1483.getOrElse(x4941, x17)
val x4946 = x4945._1
val x4947 = x4945._2
val x4948 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4946,x4947)
val x4949 = x4942 + (x4941 -> x4948)
x5 = x4949
val x4952 = x5
val x1539 = x1474("e1")
val x4951 = x4940.getOrElse(x1539, x15)
val x4953 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4951,x4940)
val x4954 = x4946.union(x4951)
val x4961 = x4940.foldLeft (x4947) { case (x4955, (x4956, x4957)) =>
val x4958 = x4955.getOrElse(x4956, x15)
val x4959 = x4958.union(x4957)
val x4960 = x4955 + (x4956 -> x4959)

x4960
}
val x4962 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4954,x4961)
val x4963 = x4952 + (x4941 -> x4962)
x5 = x4963
x4953
}
val x4939 = x4938._1
val x4967 = x4966._1
val x4968 = x4966._2
val x4969 = apply_closures_norep(x4939, List(x4967), x4968)
val x4972 = x5
val x4970 = x4969._1
val x4971 = x4969._2
val x4973 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4970,x4971)
val x4974 = x4908.union(x4970)
val x4981 = x4971.foldLeft (x4909) { case (x4975, (x4976, x4977)) =>
val x4978 = x4975.getOrElse(x4976, x15)
val x4979 = x4978.union(x4977)
val x4980 = x4975 + (x4976 -> x4979)

x4980
}
val x4982 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4974,x4981)
val x4983 = x4972 + (x4903 -> x4982)
x5 = x4983
x4973
}
val x4990 = x5
val x4988 = x4986._2
val x4989 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x4988)
val x4991 = x4990.contains(x4989)
val x5014 = if (x4991) {
val x4992 = x4990(x4989)
x4992
} else {
val x4993 = x1483.getOrElse(x4989, x17)
val x4994 = x4993._1
val x4995 = x4993._2
val x4996 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4994,x4995)
val x4997 = x4990 + (x4989 -> x4996)
x5 = x4997
val x5000 = x5
val x1932 = x1474("church1")
val x4999 = x4988.getOrElse(x1932, x15)
val x5001 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4999,x4988)
val x5002 = x4994.union(x4999)
val x5009 = x4988.foldLeft (x4995) { case (x5003, (x5004, x5005)) =>
val x5006 = x5003.getOrElse(x5004, x15)
val x5007 = x5006.union(x5005)
val x5008 = x5003 + (x5004 -> x5007)

x5008
}
val x5010 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5002,x5009)
val x5011 = x5000 + (x4989 -> x5010)
x5 = x5011
x5001
}
val x4987 = x4986._1
val x5015 = x5014._1
val x5016 = x5014._2
val x5017 = apply_closures_norep(x4987, List(x5015), x5016)
val x5020 = x5
val x5018 = x5017._1
val x5019 = x5017._2
val x5021 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5018,x5019)
val x5022 = x4898.union(x5018)
val x5029 = x5019.foldLeft (x4899) { case (x5023, (x5024, x5025)) =>
val x5026 = x5023.getOrElse(x5024, x15)
val x5027 = x5026.union(x5025)
val x5028 = x5023 + (x5024 -> x5027)

x5028
}
val x5030 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5022,x5029)
val x5031 = x5020 + (x4893 -> x5030)
x5 = x5031
x5021
}
val x4891 = x4890._1
val x5035 = x5034._1
val x5036 = x5034._2
val x5037 = apply_closures_norep(x4891, List(x5035), x5036)
val x5040 = x5
val x5038 = x5037._1
val x5039 = x5037._2
val x5041 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5038,x5039)
val x5042 = x4479.union(x5038)
val x5049 = x5039.foldLeft (x4480) { case (x5043, (x5044, x5045)) =>
val x5046 = x5043.getOrElse(x5044, x15)
val x5047 = x5046.union(x5045)
val x5048 = x5043 + (x5044 -> x5047)

x5048
}
val x5050 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5042,x5049)
val x5051 = x5040 + (x4474 -> x5050)
x5 = x5051
x5041
}
val x5058 = x5
val x5056 = x5054._2
val x5057 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))),x1474,x5056)
val x5059 = x5058.contains(x5057)
val x5198 = if (x5059) {
val x5060 = x5058(x5057)
x5060
} else {
val x5061 = x1483.getOrElse(x5057, x17)
val x5062 = x5061._1
val x5063 = x5061._2
val x5064 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5062,x5063)
val x5065 = x5058 + (x5057 -> x5064)
x5 = x5065
val x5068 = x5
val x5067 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e2"))),x1474,x5056)
val x5069 = x5068.contains(x5067)
val x5150 = if (x5069) {
val x5070 = x5068(x5067)
x5070
} else {
val x5071 = x1483.getOrElse(x5067, x17)
val x5072 = x5071._1
val x5073 = x5071._2
val x5074 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5072,x5073)
val x5075 = x5068 + (x5067 -> x5074)
x5 = x5075
val x5078 = x5
val x5077 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x5056)
val x5079 = x5078.contains(x5077)
val x5102 = if (x5079) {
val x5080 = x5078(x5077)
x5080
} else {
val x5081 = x1483.getOrElse(x5077, x17)
val x5082 = x5081._1
val x5083 = x5081._2
val x5084 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5082,x5083)
val x5085 = x5078 + (x5077 -> x5084)
x5 = x5085
val x5088 = x5
val x1855 = x1474("sub")
val x5087 = x5056.getOrElse(x1855, x15)
val x5089 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5087,x5056)
val x5090 = x5082.union(x5087)
val x5097 = x5056.foldLeft (x5083) { case (x5091, (x5092, x5093)) =>
val x5094 = x5091.getOrElse(x5092, x15)
val x5095 = x5094.union(x5093)
val x5096 = x5091 + (x5092 -> x5095)

x5096
}
val x5098 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5090,x5097)
val x5099 = x5088 + (x5077 -> x5098)
x5 = x5099
x5089
}
val x5106 = x5
val x5104 = x5102._2
val x5105 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x5104)
val x5107 = x5106.contains(x5105)
val x5130 = if (x5107) {
val x5108 = x5106(x5105)
x5108
} else {
val x5109 = x1483.getOrElse(x5105, x17)
val x5110 = x5109._1
val x5111 = x5109._2
val x5112 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5110,x5111)
val x5113 = x5106 + (x5105 -> x5112)
x5 = x5113
val x5116 = x5
val x1626 = x1474("e2")
val x5115 = x5104.getOrElse(x1626, x15)
val x5117 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5115,x5104)
val x5118 = x5110.union(x5115)
val x5125 = x5104.foldLeft (x5111) { case (x5119, (x5120, x5121)) =>
val x5122 = x5119.getOrElse(x5120, x15)
val x5123 = x5122.union(x5121)
val x5124 = x5119 + (x5120 -> x5123)

x5124
}
val x5126 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5118,x5125)
val x5127 = x5116 + (x5105 -> x5126)
x5 = x5127
x5117
}
val x5103 = x5102._1
val x5131 = x5130._1
val x5132 = x5130._2
val x5133 = apply_closures_norep(x5103, List(x5131), x5132)
val x5136 = x5
val x5134 = x5133._1
val x5135 = x5133._2
val x5137 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5134,x5135)
val x5138 = x5072.union(x5134)
val x5145 = x5135.foldLeft (x5073) { case (x5139, (x5140, x5141)) =>
val x5142 = x5139.getOrElse(x5140, x15)
val x5143 = x5142.union(x5141)
val x5144 = x5139 + (x5140 -> x5143)

x5144
}
val x5146 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5138,x5145)
val x5147 = x5136 + (x5067 -> x5146)
x5 = x5147
x5137
}
val x5154 = x5
val x5152 = x5150._2
val x5153 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x5152)
val x5155 = x5154.contains(x5153)
val x5178 = if (x5155) {
val x5156 = x5154(x5153)
x5156
} else {
val x5157 = x1483.getOrElse(x5153, x17)
val x5158 = x5157._1
val x5159 = x5157._2
val x5160 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5158,x5159)
val x5161 = x5154 + (x5153 -> x5160)
x5 = x5161
val x5164 = x5
val x1932 = x1474("church1")
val x5163 = x5152.getOrElse(x1932, x15)
val x5165 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5163,x5152)
val x5166 = x5158.union(x5163)
val x5173 = x5152.foldLeft (x5159) { case (x5167, (x5168, x5169)) =>
val x5170 = x5167.getOrElse(x5168, x15)
val x5171 = x5170.union(x5169)
val x5172 = x5167 + (x5168 -> x5171)

x5172
}
val x5174 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5166,x5173)
val x5175 = x5164 + (x5153 -> x5174)
x5 = x5175
x5165
}
val x5151 = x5150._1
val x5179 = x5178._1
val x5180 = x5178._2
val x5181 = apply_closures_norep(x5151, List(x5179), x5180)
val x5184 = x5
val x5182 = x5181._1
val x5183 = x5181._2
val x5185 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5182,x5183)
val x5186 = x5062.union(x5182)
val x5193 = x5183.foldLeft (x5063) { case (x5187, (x5188, x5189)) =>
val x5190 = x5187.getOrElse(x5188, x15)
val x5191 = x5190.union(x5189)
val x5192 = x5187 + (x5188 -> x5191)

x5192
}
val x5194 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5186,x5193)
val x5195 = x5184 + (x5057 -> x5194)
x5 = x5195
x5185
}
val x5055 = x5054._1
val x5199 = x5198._1
val x5200 = x5198._2
val x5201 = apply_closures_norep(x5055, List(x5199), x5200)
val x5204 = x5
val x5202 = x5201._1
val x5203 = x5201._2
val x5205 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5202,x5203)
val x5206 = x4469.union(x5202)
val x5213 = x5203.foldLeft (x4470) { case (x5207, (x5208, x5209)) =>
val x5210 = x5207.getOrElse(x5208, x15)
val x5211 = x5210.union(x5209)
val x5212 = x5207 + (x5208 -> x5211)

x5212
}
val x5214 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5206,x5213)
val x5215 = x5204 + (x4464 -> x5214)
x5 = x5215
x5205
}
val x5222 = x5
val x5223 = x5222.contains(x4436)
val x5242 = if (x5223) {
val x5224 = x5222(x4436)
x5224
} else {
val x4440 = x1483.getOrElse(x4436, x17)
val x4441 = x4440._1
val x4442 = x4440._2
val x4443 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4441,x4442)
val x5225 = x5222 + (x4436 -> x4443)
x5 = x5225
val x5227 = Set[AbsValue](BoolV())
val x5228 = x5
val x5229 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5227,x4435)
val x5230 = x4441.union(x5227)
val x5237 = x4435.foldLeft (x4442) { case (x5231, (x5232, x5233)) =>
val x5234 = x5231.getOrElse(x5232, x15)
val x5235 = x5234.union(x5233)
val x5236 = x5231 + (x5232 -> x5235)

x5236
}
val x5238 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5230,x5237)
val x5239 = x5228 + (x4436 -> x5238)
x5 = x5239
x5229
}
val x5245 = x5
val x5246 = x5245.contains(x4464)
val x5600 = if (x5246) {
val x5247 = x5245(x4464)
x5247
} else {
val x4468 = x1483.getOrElse(x4464, x17)
val x4469 = x4468._1
val x4470 = x4468._2
val x4471 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4469,x4470)
val x5248 = x5245 + (x4464 -> x4471)
x5 = x5248
val x5250 = x5
val x4474 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),x1474,x4435)
val x5251 = x5250.contains(x4474)
val x5436 = if (x5251) {
val x5252 = x5250(x4474)
x5252
} else {
val x4478 = x1483.getOrElse(x4474, x17)
val x4479 = x4478._1
val x4480 = x4478._2
val x4481 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4479,x4480)
val x5253 = x5250 + (x4474 -> x4481)
x5 = x5253
val x5255 = x5
val x4484 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church=?"),x1474,x4435)
val x5256 = x5255.contains(x4484)
val x5272 = if (x5256) {
val x5257 = x5255(x4484)
x5257
} else {
val x1806 = x1474("church=?")
val x4494 = x4435.getOrElse(x1806, x15)
val x4496 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4494,x4435)
val x4488 = x1483.getOrElse(x4484, x17)
val x4489 = x4488._1
val x4490 = x4488._2
val x4491 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4489,x4490)
val x5258 = x5255 + (x4484 -> x4491)
x5 = x5258
val x5260 = x5
val x4497 = x4489.union(x4494)
val x5267 = x4435.foldLeft (x4490) { case (x5261, (x5262, x5263)) =>
val x5264 = x5261.getOrElse(x5262, x15)
val x5265 = x5264.union(x5263)
val x5266 = x5261 + (x5262 -> x5265)

x5266
}
val x5268 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4497,x5267)
val x5269 = x5260 + (x4484 -> x5268)
x5 = x5269
x4496
}
val x5276 = x5
val x5274 = x5272._2
val x5275 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))),x1474,x5274)
val x5277 = x5276.contains(x5275)
val x5416 = if (x5277) {
val x5278 = x5276(x5275)
x5278
} else {
val x5279 = x1483.getOrElse(x5275, x17)
val x5280 = x5279._1
val x5281 = x5279._2
val x5282 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5280,x5281)
val x5283 = x5276 + (x5275 -> x5282)
x5 = x5283
val x5286 = x5
val x5285 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e1"))),x1474,x5274)
val x5287 = x5286.contains(x5285)
val x5368 = if (x5287) {
val x5288 = x5286(x5285)
x5288
} else {
val x5289 = x1483.getOrElse(x5285, x17)
val x5290 = x5289._1
val x5291 = x5289._2
val x5292 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5290,x5291)
val x5293 = x5286 + (x5285 -> x5292)
x5 = x5293
val x5296 = x5
val x5295 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x5274)
val x5297 = x5296.contains(x5295)
val x5320 = if (x5297) {
val x5298 = x5296(x5295)
x5298
} else {
val x5299 = x1483.getOrElse(x5295, x17)
val x5300 = x5299._1
val x5301 = x5299._2
val x5302 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5300,x5301)
val x5303 = x5296 + (x5295 -> x5302)
x5 = x5303
val x5306 = x5
val x1855 = x1474("sub")
val x5305 = x5274.getOrElse(x1855, x15)
val x5307 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5305,x5274)
val x5308 = x5300.union(x5305)
val x5315 = x5274.foldLeft (x5301) { case (x5309, (x5310, x5311)) =>
val x5312 = x5309.getOrElse(x5310, x15)
val x5313 = x5312.union(x5311)
val x5314 = x5309 + (x5310 -> x5313)

x5314
}
val x5316 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5308,x5315)
val x5317 = x5306 + (x5295 -> x5316)
x5 = x5317
x5307
}
val x5324 = x5
val x5322 = x5320._2
val x5323 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e1"),x1474,x5322)
val x5325 = x5324.contains(x5323)
val x5348 = if (x5325) {
val x5326 = x5324(x5323)
x5326
} else {
val x5327 = x1483.getOrElse(x5323, x17)
val x5328 = x5327._1
val x5329 = x5327._2
val x5330 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5328,x5329)
val x5331 = x5324 + (x5323 -> x5330)
x5 = x5331
val x5334 = x5
val x1539 = x1474("e1")
val x5333 = x5322.getOrElse(x1539, x15)
val x5335 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5333,x5322)
val x5336 = x5328.union(x5333)
val x5343 = x5322.foldLeft (x5329) { case (x5337, (x5338, x5339)) =>
val x5340 = x5337.getOrElse(x5338, x15)
val x5341 = x5340.union(x5339)
val x5342 = x5337 + (x5338 -> x5341)

x5342
}
val x5344 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5336,x5343)
val x5345 = x5334 + (x5323 -> x5344)
x5 = x5345
x5335
}
val x5321 = x5320._1
val x5349 = x5348._1
val x5350 = x5348._2
val x5351 = apply_closures_norep(x5321, List(x5349), x5350)
val x5354 = x5
val x5352 = x5351._1
val x5353 = x5351._2
val x5355 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5352,x5353)
val x5356 = x5290.union(x5352)
val x5363 = x5353.foldLeft (x5291) { case (x5357, (x5358, x5359)) =>
val x5360 = x5357.getOrElse(x5358, x15)
val x5361 = x5360.union(x5359)
val x5362 = x5357 + (x5358 -> x5361)

x5362
}
val x5364 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5356,x5363)
val x5365 = x5354 + (x5285 -> x5364)
x5 = x5365
x5355
}
val x5372 = x5
val x5370 = x5368._2
val x5371 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x5370)
val x5373 = x5372.contains(x5371)
val x5396 = if (x5373) {
val x5374 = x5372(x5371)
x5374
} else {
val x5375 = x1483.getOrElse(x5371, x17)
val x5376 = x5375._1
val x5377 = x5375._2
val x5378 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5376,x5377)
val x5379 = x5372 + (x5371 -> x5378)
x5 = x5379
val x5382 = x5
val x1932 = x1474("church1")
val x5381 = x5370.getOrElse(x1932, x15)
val x5383 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5381,x5370)
val x5384 = x5376.union(x5381)
val x5391 = x5370.foldLeft (x5377) { case (x5385, (x5386, x5387)) =>
val x5388 = x5385.getOrElse(x5386, x15)
val x5389 = x5388.union(x5387)
val x5390 = x5385 + (x5386 -> x5389)

x5390
}
val x5392 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5384,x5391)
val x5393 = x5382 + (x5371 -> x5392)
x5 = x5393
x5383
}
val x5369 = x5368._1
val x5397 = x5396._1
val x5398 = x5396._2
val x5399 = apply_closures_norep(x5369, List(x5397), x5398)
val x5402 = x5
val x5400 = x5399._1
val x5401 = x5399._2
val x5403 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5400,x5401)
val x5404 = x5280.union(x5400)
val x5411 = x5401.foldLeft (x5281) { case (x5405, (x5406, x5407)) =>
val x5408 = x5405.getOrElse(x5406, x15)
val x5409 = x5408.union(x5407)
val x5410 = x5405 + (x5406 -> x5409)

x5410
}
val x5412 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5404,x5411)
val x5413 = x5402 + (x5275 -> x5412)
x5 = x5413
x5403
}
val x5273 = x5272._1
val x5417 = x5416._1
val x5418 = x5416._2
val x5419 = apply_closures_norep(x5273, List(x5417), x5418)
val x5422 = x5
val x5420 = x5419._1
val x5421 = x5419._2
val x5423 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5420,x5421)
val x5424 = x4479.union(x5420)
val x5431 = x5421.foldLeft (x4480) { case (x5425, (x5426, x5427)) =>
val x5428 = x5425.getOrElse(x5426, x15)
val x5429 = x5428.union(x5427)
val x5430 = x5425 + (x5426 -> x5429)

x5430
}
val x5432 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5424,x5431)
val x5433 = x5422 + (x4474 -> x5432)
x5 = x5433
x5423
}
val x5440 = x5
val x5438 = x5436._2
val x5439 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))),x1474,x5438)
val x5441 = x5440.contains(x5439)
val x5580 = if (x5441) {
val x5442 = x5440(x5439)
x5442
} else {
val x5443 = x1483.getOrElse(x5439, x17)
val x5444 = x5443._1
val x5445 = x5443._2
val x5446 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5444,x5445)
val x5447 = x5440 + (x5439 -> x5446)
x5 = x5447
val x5450 = x5
val x5449 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("sub"),List(Var("e2"))),x1474,x5438)
val x5451 = x5450.contains(x5449)
val x5532 = if (x5451) {
val x5452 = x5450(x5449)
x5452
} else {
val x5453 = x1483.getOrElse(x5449, x17)
val x5454 = x5453._1
val x5455 = x5453._2
val x5456 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5454,x5455)
val x5457 = x5450 + (x5449 -> x5456)
x5 = x5457
val x5460 = x5
val x5459 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("sub"),x1474,x5438)
val x5461 = x5460.contains(x5459)
val x5484 = if (x5461) {
val x5462 = x5460(x5459)
x5462
} else {
val x5463 = x1483.getOrElse(x5459, x17)
val x5464 = x5463._1
val x5465 = x5463._2
val x5466 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5464,x5465)
val x5467 = x5460 + (x5459 -> x5466)
x5 = x5467
val x5470 = x5
val x1855 = x1474("sub")
val x5469 = x5438.getOrElse(x1855, x15)
val x5471 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5469,x5438)
val x5472 = x5464.union(x5469)
val x5479 = x5438.foldLeft (x5465) { case (x5473, (x5474, x5475)) =>
val x5476 = x5473.getOrElse(x5474, x15)
val x5477 = x5476.union(x5475)
val x5478 = x5473 + (x5474 -> x5477)

x5478
}
val x5480 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5472,x5479)
val x5481 = x5470 + (x5459 -> x5480)
x5 = x5481
x5471
}
val x5488 = x5
val x5486 = x5484._2
val x5487 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("e2"),x1474,x5486)
val x5489 = x5488.contains(x5487)
val x5512 = if (x5489) {
val x5490 = x5488(x5487)
x5490
} else {
val x5491 = x1483.getOrElse(x5487, x17)
val x5492 = x5491._1
val x5493 = x5491._2
val x5494 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5492,x5493)
val x5495 = x5488 + (x5487 -> x5494)
x5 = x5495
val x5498 = x5
val x1626 = x1474("e2")
val x5497 = x5486.getOrElse(x1626, x15)
val x5499 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5497,x5486)
val x5500 = x5492.union(x5497)
val x5507 = x5486.foldLeft (x5493) { case (x5501, (x5502, x5503)) =>
val x5504 = x5501.getOrElse(x5502, x15)
val x5505 = x5504.union(x5503)
val x5506 = x5501 + (x5502 -> x5505)

x5506
}
val x5508 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5500,x5507)
val x5509 = x5498 + (x5487 -> x5508)
x5 = x5509
x5499
}
val x5485 = x5484._1
val x5513 = x5512._1
val x5514 = x5512._2
val x5515 = apply_closures_norep(x5485, List(x5513), x5514)
val x5518 = x5
val x5516 = x5515._1
val x5517 = x5515._2
val x5519 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5516,x5517)
val x5520 = x5454.union(x5516)
val x5527 = x5517.foldLeft (x5455) { case (x5521, (x5522, x5523)) =>
val x5524 = x5521.getOrElse(x5522, x15)
val x5525 = x5524.union(x5523)
val x5526 = x5521 + (x5522 -> x5525)

x5526
}
val x5528 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5520,x5527)
val x5529 = x5518 + (x5449 -> x5528)
x5 = x5529
x5519
}
val x5536 = x5
val x5534 = x5532._2
val x5535 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("church1"),x1474,x5534)
val x5537 = x5536.contains(x5535)
val x5560 = if (x5537) {
val x5538 = x5536(x5535)
x5538
} else {
val x5539 = x1483.getOrElse(x5535, x17)
val x5540 = x5539._1
val x5541 = x5539._2
val x5542 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5540,x5541)
val x5543 = x5536 + (x5535 -> x5542)
x5 = x5543
val x5546 = x5
val x1932 = x1474("church1")
val x5545 = x5534.getOrElse(x1932, x15)
val x5547 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5545,x5534)
val x5548 = x5540.union(x5545)
val x5555 = x5534.foldLeft (x5541) { case (x5549, (x5550, x5551)) =>
val x5552 = x5549.getOrElse(x5550, x15)
val x5553 = x5552.union(x5551)
val x5554 = x5549 + (x5550 -> x5553)

x5554
}
val x5556 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5548,x5555)
val x5557 = x5546 + (x5535 -> x5556)
x5 = x5557
x5547
}
val x5533 = x5532._1
val x5561 = x5560._1
val x5562 = x5560._2
val x5563 = apply_closures_norep(x5533, List(x5561), x5562)
val x5566 = x5
val x5564 = x5563._1
val x5565 = x5563._2
val x5567 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5564,x5565)
val x5568 = x5444.union(x5564)
val x5575 = x5565.foldLeft (x5445) { case (x5569, (x5570, x5571)) =>
val x5572 = x5569.getOrElse(x5570, x15)
val x5573 = x5572.union(x5571)
val x5574 = x5569 + (x5570 -> x5573)

x5574
}
val x5576 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5568,x5575)
val x5577 = x5566 + (x5439 -> x5576)
x5 = x5577
x5567
}
val x5437 = x5436._1
val x5581 = x5580._1
val x5582 = x5580._2
val x5583 = apply_closures_norep(x5437, List(x5581), x5582)
val x5586 = x5
val x5584 = x5583._1
val x5585 = x5583._2
val x5587 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5584,x5585)
val x5588 = x4469.union(x5584)
val x5595 = x5585.foldLeft (x4470) { case (x5589, (x5590, x5591)) =>
val x5592 = x5589.getOrElse(x5590, x15)
val x5593 = x5592.union(x5591)
val x5594 = x5589 + (x5590 -> x5593)

x5594
}
val x5596 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5588,x5595)
val x5597 = x5586 + (x4464 -> x5596)
x5 = x5597
x5587
}
val x5610 = x5
val x4861 = x4860._1
val x5219 = x5218._1
val x5221 = x4861.union(x5219)
val x5244 = x5242._2
val x5602 = x5600._2
val x5609 = x5602.foldLeft (x5244) { case (x5603, (x5604, x5605)) =>
val x5606 = x5603.getOrElse(x5604, x15)
val x5607 = x5606.union(x5605)
val x5608 = x5603 + (x5604 -> x5607)

x5608
}
val x5611 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5221,x5609)
val x5612 = x1670.union(x5221)
val x5619 = x5609.foldLeft (x1671) { case (x5613, (x5614, x5615)) =>
val x5616 = x5613.getOrElse(x5614, x15)
val x5617 = x5616.union(x5615)
val x5618 = x5613 + (x5614 -> x5617)

x5618
}
val x5620 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5612,x5619)
val x5621 = x5610 + (x1665 -> x5620)
x5 = x5621
x5611
}
val x5634 = x5
val x3013 = x3012._1
val x4282 = x4281._1
val x4284 = x3013.union(x4282)
val x4357 = x4355._2
val x5626 = x5624._2
val x5633 = x5626.foldLeft (x4357) { case (x5627, (x5628, x5629)) =>
val x5630 = x5627.getOrElse(x5628, x15)
val x5631 = x5630.union(x5629)
val x5632 = x5627 + (x5628 -> x5631)

x5632
}
val x5635 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x4284,x5633)
val x5636 = x1485.union(x4284)
val x5643 = x5633.foldLeft (x1486) { case (x5637, (x5638, x5639)) =>
val x5640 = x5637.getOrElse(x5638, x15)
val x5641 = x5640.union(x5639)
val x5642 = x5637 + (x5638 -> x5641)

x5642
}
val x5644 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5636,x5643)
val x5645 = x5634 + (x1479 -> x5644)
x5 = x5645
x5635
}
val x5649 = x5648._1
val x5650 = x5648._2
val x5651 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5649,x5650)
x5651: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x5653 = Set[AbsValue](CompiledClo(x1467,Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1")))))))),x1451))
val x5654 = x5
val x5655 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5653,x1455)
val x5656 = x1462.union(x5653)
val x5663 = x1455.foldLeft (x1463) { case (x5657, (x5658, x5659)) =>
val x5660 = x5657.getOrElse(x5658, x15)
val x5661 = x5660.union(x5659)
val x5662 = x5657 + (x5658 -> x5661)

x5662
}
val x5664 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5656,x5663)
val x5665 = x5654 + (x1456 -> x5664)
x5 = x5665
x5655
}
val x5669 = x5668._1
val x5670 = x5668._2
val x5671 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5669,x5670)
x5671: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x5673 = Set[AbsValue](CompiledClo(x1444,Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))),x635))
val x5674 = x5
val x5675 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5673,x1423)
val x5676 = x1439.union(x5673)
val x5683 = x1423.foldLeft (x1440) { case (x5677, (x5678, x5679)) =>
val x5680 = x5677.getOrElse(x5678, x15)
val x5681 = x5680.union(x5679)
val x5682 = x5677 + (x5678 -> x5681)

x5682
}
val x5684 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5676,x5683)
val x5685 = x5674 + (x1434 -> x5684)
x5 = x5685
x5675
}
val x5691 = Set[AbsValue](VoidV())
val x5696 = x5
val x5690 = x5688._2
val x5692 = x635("church=?")
val x5689 = x5688._1
val x5693 = x5690.getOrElse(x5692, x15)
val x5694 = x5689.union(x5693)
val x5695 = x5690 + (x5692 -> x5694)
val x5697 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5691,x5695)
val x5698 = x1429.union(x5691)
val x5705 = x5695.foldLeft (x1430) { case (x5699, (x5700, x5701)) =>
val x5702 = x5699.getOrElse(x5700, x15)
val x5703 = x5702.union(x5701)
val x5704 = x5699 + (x5700 -> x5703)

x5704
}
val x5706 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5698,x5705)
val x5707 = x5696 + (x1424 -> x5706)
x5 = x5707
x5697
}
val x1422 = x1421._1
val x5711 = x5710._1
val x5712 = x5710._2
val x5713 = apply_closures_norep(x1422, List(x5711), x5712)
val x5716 = x5
val x5714 = x5713._1
val x5715 = x5713._2
val x5717 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5714,x5715)
val x5718 = x646.union(x5714)
val x5725 = x5715.foldLeft (x647) { case (x5719, (x5720, x5721)) =>
val x5722 = x5719.getOrElse(x5720, x15)
val x5723 = x5722.union(x5721)
val x5724 = x5719 + (x5720 -> x5723)

x5724
}
val x5726 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5718,x5725)
val x5727 = x5716 + (x640 -> x5726)
x5 = x5727
x5717
}
val x5731 = x5730._1
val x5732 = x5730._2
val x5733 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5731,x5732)
x5733: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x5735 = Set[AbsValue](CompiledClo(x628,Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),x602))
val x5736 = x5
val x5737 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5735,x606)
val x5738 = x623.union(x5735)
val x5745 = x606.foldLeft (x624) { case (x5739, (x5740, x5741)) =>
val x5742 = x5739.getOrElse(x5740, x15)
val x5743 = x5742.union(x5741)
val x5744 = x5739 + (x5740 -> x5743)

x5744
}
val x5746 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5738,x5745)
val x5747 = x5736 + (x618 -> x5746)
x5 = x5747
x5737
}
val x5754 = x5
val x5752 = x5750._2
val x5753 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Void(),x602,x5752)
val x5755 = x5754.contains(x5753)
val x5778 = if (x5755) {
val x5756 = x5754(x5753)
x5756
} else {
val x5757 = x611.getOrElse(x5753, x17)
val x5758 = x5757._1
val x5759 = x5757._2
val x5760 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5758,x5759)
val x5761 = x5754 + (x5753 -> x5760)
x5 = x5761
val x5763 = Set[AbsValue](VoidV())
val x5764 = x5
val x5765 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5763,x5752)
val x5766 = x5758.union(x5763)
val x5773 = x5752.foldLeft (x5759) { case (x5767, (x5768, x5769)) =>
val x5770 = x5767.getOrElse(x5768, x15)
val x5771 = x5770.union(x5769)
val x5772 = x5767 + (x5768 -> x5771)

x5772
}
val x5774 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5766,x5773)
val x5775 = x5764 + (x5753 -> x5774)
x5 = x5775
x5765
}
val x5751 = x5750._1
val x5779 = x5778._1
val x5780 = x5778._2
val x5781 = apply_closures_norep(x5751, List(x5779), x5780)
val x5784 = x5
val x5782 = x5781._1
val x5783 = x5781._2
val x5785 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5782,x5783)
val x5786 = x613.union(x5782)
val x5793 = x5783.foldLeft (x614) { case (x5787, (x5788, x5789)) =>
val x5790 = x5787.getOrElse(x5788, x15)
val x5791 = x5790.union(x5789)
val x5792 = x5787 + (x5788 -> x5791)

x5792
}
val x5794 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5786,x5793)
val x5795 = x5784 + (x607 -> x5794)
x5 = x5795
x5785
}
val x5799 = x5798._1
val x5800 = x5798._2
val x5801 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5799,x5800)
x5801: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x5803 = Set[AbsValue](CompiledClo(x595,Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),x569))
val x5804 = x5
val x5805 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5803,x573)
val x5806 = x590.union(x5803)
val x5813 = x573.foldLeft (x591) { case (x5807, (x5808, x5809)) =>
val x5810 = x5807.getOrElse(x5808, x15)
val x5811 = x5810.union(x5809)
val x5812 = x5807 + (x5808 -> x5811)

x5812
}
val x5814 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5806,x5813)
val x5815 = x5804 + (x585 -> x5814)
x5 = x5815
x5805
}
val x5822 = x5
val x5820 = x5818._2
val x5821 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true))))),x569,x5820)
val x5823 = x5822.contains(x5821)
val x6081 = if (x5823) {
val x5824 = x5822(x5821)
x5824
} else {
val x5825 = x578.getOrElse(x5821, x17)
val x5826 = x5825._1
val x5827 = x5825._2
val x5828 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5826,x5827)
val x5829 = x5822 + (x5821 -> x5828)
x5 = x5829
val x5832 = x5
val x5831 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))),x569,x5820)
val x5833 = x5832.contains(x5831)
val x6059 = if (x5833) {
val x5834 = x5832(x5831)
x5834
} else {
val x5835 = x578.getOrElse(x5831, x17)
val x5836 = x5835._1
val x5837 = x5835._2
val x5838 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5836,x5837)
val x5839 = x5832 + (x5831 -> x5838)
x5 = x5839
val x5841 = {(x5842:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x5843:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x5846 = Addr("z")
val x5854 = x5
val x5848 = x569 + ("z" -> x5846)
val x5845 = x5843
val x5844 = x5842
val x5849 = x5844.head
val x5850 = x5845.getOrElse(x5846, x15)
val x5851 = x5849.union(x5850)
val x5852 = x5845 + (x5846 -> x5851)
val x5853 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true))),x5848,x5852)
val x5855 = x5854.contains(x5853)
val x6039 = if (x5855) {
val x5856 = x5854(x5853)
x5856
} else {
val x5857 = x4
val x5858 = x5857.getOrElse(x5853, x17)
val x5859 = x5858._1
val x5860 = x5858._2
val x5861 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5859,x5860)
val x5862 = x5854 + (x5853 -> x5861)
x5 = x5862
val x5865 = x5
val x5864 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),x5848,x5852)
val x5866 = x5865.contains(x5864)
val x5991 = if (x5866) {
val x5867 = x5865(x5864)
x5867
} else {
val x5868 = x5857.getOrElse(x5864, x17)
val x5869 = x5868._1
val x5870 = x5868._2
val x5871 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5869,x5870)
val x5872 = x5865 + (x5864 -> x5871)
x5 = x5872
val x5875 = x5
val x5874 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("z"),x5848,x5852)
val x5876 = x5875.contains(x5874)
val x5900 = if (x5876) {
val x5877 = x5875(x5874)
x5877
} else {
val x5878 = x5857.getOrElse(x5874, x17)
val x5879 = x5878._1
val x5880 = x5878._2
val x5881 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5879,x5880)
val x5882 = x5875 + (x5874 -> x5881)
x5 = x5882
val x5886 = x5
val x5884 = x5848("z")
val x5885 = x5852.getOrElse(x5884, x15)
val x5887 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5885,x5852)
val x5888 = x5879.union(x5885)
val x5895 = x5852.foldLeft (x5880) { case (x5889, (x5890, x5891)) =>
val x5892 = x5889.getOrElse(x5890, x15)
val x5893 = x5892.union(x5891)
val x5894 = x5889 + (x5890 -> x5893)

x5894
}
val x5896 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5888,x5895)
val x5897 = x5886 + (x5874 -> x5896)
x5 = x5897
x5887
}
val x5904 = x5
val x5902 = x5900._2
val x5903 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("zx"), BoolLit(false)),x5848,x5902)
val x5905 = x5904.contains(x5903)
val x5971 = if (x5905) {
val x5906 = x5904(x5903)
x5906
} else {
val x5907 = x5857.getOrElse(x5903, x17)
val x5908 = x5907._1
val x5909 = x5907._2
val x5910 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5908,x5909)
val x5911 = x5904 + (x5903 -> x5910)
x5 = x5911
val x5913 = {(x5914:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x5915:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x5918 = Addr("zx")
val x5926 = x5
val x5920 = x5848 + ("zx" -> x5918)
val x5917 = x5915
val x5916 = x5914
val x5921 = x5916.head
val x5922 = x5917.getOrElse(x5918, x15)
val x5923 = x5921.union(x5922)
val x5924 = x5917 + (x5918 -> x5923)
val x5925 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](BoolLit(false),x5920,x5924)
val x5927 = x5926.contains(x5925)
val x5951 = if (x5927) {
val x5928 = x5926(x5925)
x5928
} else {
val x5929 = x4
val x5930 = x5929.getOrElse(x5925, x17)
val x5931 = x5930._1
val x5932 = x5930._2
val x5933 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5931,x5932)
val x5934 = x5926 + (x5925 -> x5933)
x5 = x5934
val x5936 = Set[AbsValue](BoolV())
val x5937 = x5
val x5938 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5936,x5924)
val x5939 = x5931.union(x5936)
val x5946 = x5924.foldLeft (x5932) { case (x5940, (x5941, x5942)) =>
val x5943 = x5940.getOrElse(x5941, x15)
val x5944 = x5943.union(x5942)
val x5945 = x5940 + (x5941 -> x5944)

x5945
}
val x5947 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5939,x5946)
val x5948 = x5937 + (x5925 -> x5947)
x5 = x5948
x5938
}
val x5952 = x5951._1
val x5953 = x5951._2
val x5954 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5952,x5953)
x5954: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x5956 = Set[AbsValue](CompiledClo(x5913,Lam(List("zx"), BoolLit(false)),x5848))
val x5957 = x5
val x5958 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5956,x5902)
val x5959 = x5908.union(x5956)
val x5966 = x5902.foldLeft (x5909) { case (x5960, (x5961, x5962)) =>
val x5963 = x5960.getOrElse(x5961, x15)
val x5964 = x5963.union(x5962)
val x5965 = x5960 + (x5961 -> x5964)

x5965
}
val x5967 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5959,x5966)
val x5968 = x5957 + (x5903 -> x5967)
x5 = x5968
x5958
}
val x5901 = x5900._1
val x5972 = x5971._1
val x5973 = x5971._2
val x5974 = apply_closures_norep(x5901, List(x5972), x5973)
val x5977 = x5
val x5975 = x5974._1
val x5976 = x5974._2
val x5978 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5975,x5976)
val x5979 = x5869.union(x5975)
val x5986 = x5976.foldLeft (x5870) { case (x5980, (x5981, x5982)) =>
val x5983 = x5980.getOrElse(x5981, x15)
val x5984 = x5983.union(x5982)
val x5985 = x5980 + (x5981 -> x5984)

x5985
}
val x5987 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5979,x5986)
val x5988 = x5977 + (x5864 -> x5987)
x5 = x5988
x5978
}
val x5995 = x5
val x5993 = x5991._2
val x5994 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](BoolLit(true),x5848,x5993)
val x5996 = x5995.contains(x5994)
val x6019 = if (x5996) {
val x5997 = x5995(x5994)
x5997
} else {
val x5998 = x5857.getOrElse(x5994, x17)
val x5999 = x5998._1
val x6000 = x5998._2
val x6001 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x5999,x6000)
val x6002 = x5995 + (x5994 -> x6001)
x5 = x6002
val x6004 = Set[AbsValue](BoolV())
val x6005 = x5
val x6006 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6004,x5993)
val x6007 = x5999.union(x6004)
val x6014 = x5993.foldLeft (x6000) { case (x6008, (x6009, x6010)) =>
val x6011 = x6008.getOrElse(x6009, x15)
val x6012 = x6011.union(x6010)
val x6013 = x6008 + (x6009 -> x6012)

x6013
}
val x6015 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6007,x6014)
val x6016 = x6005 + (x5994 -> x6015)
x5 = x6016
x6006
}
val x5992 = x5991._1
val x6020 = x6019._1
val x6021 = x6019._2
val x6022 = apply_closures_norep(x5992, List(x6020), x6021)
val x6025 = x5
val x6023 = x6022._1
val x6024 = x6022._2
val x6026 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6023,x6024)
val x6027 = x5859.union(x6023)
val x6034 = x6024.foldLeft (x5860) { case (x6028, (x6029, x6030)) =>
val x6031 = x6028.getOrElse(x6029, x15)
val x6032 = x6031.union(x6030)
val x6033 = x6028 + (x6029 -> x6032)

x6033
}
val x6035 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6027,x6034)
val x6036 = x6025 + (x5853 -> x6035)
x5 = x6036
x6026
}
val x6040 = x6039._1
val x6041 = x6039._2
val x6042 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6040,x6041)
x6042: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6044 = Set[AbsValue](CompiledClo(x5841,Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))),x569))
val x6045 = x5
val x6046 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6044,x5820)
val x6047 = x5836.union(x6044)
val x6054 = x5820.foldLeft (x5837) { case (x6048, (x6049, x6050)) =>
val x6051 = x6048.getOrElse(x6049, x15)
val x6052 = x6051.union(x6050)
val x6053 = x6048 + (x6049 -> x6052)

x6053
}
val x6055 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6047,x6054)
val x6056 = x6045 + (x5831 -> x6055)
x5 = x6056
x6046
}
val x6062 = Set[AbsValue](VoidV())
val x6067 = x5
val x6061 = x6059._2
val x6063 = x569("church0?")
val x6060 = x6059._1
val x6064 = x6061.getOrElse(x6063, x15)
val x6065 = x6060.union(x6064)
val x6066 = x6061 + (x6063 -> x6065)
val x6068 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6062,x6066)
val x6069 = x5826.union(x6062)
val x6076 = x6066.foldLeft (x5827) { case (x6070, (x6071, x6072)) =>
val x6073 = x6070.getOrElse(x6071, x15)
val x6074 = x6073.union(x6072)
val x6075 = x6070 + (x6071 -> x6074)

x6075
}
val x6077 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6069,x6076)
val x6078 = x6067 + (x5821 -> x6077)
x5 = x6078
x6068
}
val x5819 = x5818._1
val x6082 = x6081._1
val x6083 = x6081._2
val x6084 = apply_closures_norep(x5819, List(x6082), x6083)
val x6087 = x5
val x6085 = x6084._1
val x6086 = x6084._2
val x6088 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6085,x6086)
val x6089 = x580.union(x6085)
val x6096 = x6086.foldLeft (x581) { case (x6090, (x6091, x6092)) =>
val x6093 = x6090.getOrElse(x6091, x15)
val x6094 = x6093.union(x6092)
val x6095 = x6090 + (x6091 -> x6094)

x6095
}
val x6097 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6089,x6096)
val x6098 = x6087 + (x574 -> x6097)
x5 = x6098
x6088
}
val x6102 = x6101._1
val x6103 = x6101._2
val x6104 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6102,x6103)
x6104: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6106 = Set[AbsValue](CompiledClo(x562,Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),x536))
val x6107 = x5
val x6108 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6106,x540)
val x6109 = x557.union(x6106)
val x6116 = x540.foldLeft (x558) { case (x6110, (x6111, x6112)) =>
val x6113 = x6110.getOrElse(x6111, x15)
val x6114 = x6113.union(x6112)
val x6115 = x6110 + (x6111 -> x6114)

x6115
}
val x6117 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6109,x6116)
val x6118 = x6107 + (x552 -> x6117)
x5 = x6118
x6108
}
val x6125 = x5
val x6123 = x6121._2
val x6124 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Void(),x536,x6123)
val x6126 = x6125.contains(x6124)
val x6149 = if (x6126) {
val x6127 = x6125(x6124)
x6127
} else {
val x6128 = x545.getOrElse(x6124, x17)
val x6129 = x6128._1
val x6130 = x6128._2
val x6131 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6129,x6130)
val x6132 = x6125 + (x6124 -> x6131)
x5 = x6132
val x6134 = Set[AbsValue](VoidV())
val x6135 = x5
val x6136 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6134,x6123)
val x6137 = x6129.union(x6134)
val x6144 = x6123.foldLeft (x6130) { case (x6138, (x6139, x6140)) =>
val x6141 = x6138.getOrElse(x6139, x15)
val x6142 = x6141.union(x6140)
val x6143 = x6138 + (x6139 -> x6142)

x6143
}
val x6145 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6137,x6144)
val x6146 = x6135 + (x6124 -> x6145)
x5 = x6146
x6136
}
val x6122 = x6121._1
val x6150 = x6149._1
val x6151 = x6149._2
val x6152 = apply_closures_norep(x6122, List(x6150), x6151)
val x6155 = x5
val x6153 = x6152._1
val x6154 = x6152._2
val x6156 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6153,x6154)
val x6157 = x547.union(x6153)
val x6164 = x6154.foldLeft (x548) { case (x6158, (x6159, x6160)) =>
val x6161 = x6158.getOrElse(x6159, x15)
val x6162 = x6161.union(x6160)
val x6163 = x6158 + (x6159 -> x6162)

x6163
}
val x6165 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6157,x6164)
val x6166 = x6155 + (x541 -> x6165)
x5 = x6166
x6156
}
val x6170 = x6169._1
val x6171 = x6169._2
val x6172 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6170,x6171)
x6172: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6174 = Set[AbsValue](CompiledClo(x529,Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),x503))
val x6175 = x5
val x6176 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6174,x507)
val x6177 = x524.union(x6174)
val x6184 = x507.foldLeft (x525) { case (x6178, (x6179, x6180)) =>
val x6181 = x6178.getOrElse(x6179, x15)
val x6182 = x6181.union(x6180)
val x6183 = x6178 + (x6179 -> x6182)

x6183
}
val x6185 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6177,x6184)
val x6186 = x6175 + (x519 -> x6185)
x5 = x6186
x6176
}
val x6193 = x5
val x6191 = x6189._2
val x6192 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3")))))))))),x503,x6191)
val x6194 = x6193.contains(x6192)
val x6511 = if (x6194) {
val x6195 = x6193(x6192)
x6195
} else {
val x6196 = x512.getOrElse(x6192, x17)
val x6197 = x6196._1
val x6198 = x6196._2
val x6199 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6197,x6198)
val x6200 = x6193 + (x6192 -> x6199)
x5 = x6200
val x6203 = x5
val x6202 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))),x503,x6191)
val x6204 = x6203.contains(x6202)
val x6489 = if (x6204) {
val x6205 = x6203(x6202)
x6205
} else {
val x6206 = x512.getOrElse(x6202, x17)
val x6207 = x6206._1
val x6208 = x6206._2
val x6209 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6207,x6208)
val x6210 = x6203 + (x6202 -> x6209)
x5 = x6210
val x6212 = {(x6213:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x6214:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x6217 = Addr("f3")
val x6225 = x5
val x6219 = x503 + ("f3" -> x6217)
val x6216 = x6214
val x6215 = x6213
val x6220 = x6215.head
val x6221 = x6216.getOrElse(x6217, x15)
val x6222 = x6220.union(x6221)
val x6223 = x6216 + (x6217 -> x6222)
val x6224 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3")))))))),x6219,x6223)
val x6226 = x6225.contains(x6224)
val x6469 = if (x6226) {
val x6227 = x6225(x6224)
x6227
} else {
val x6228 = x4
val x6229 = x6228.getOrElse(x6224, x17)
val x6230 = x6229._1
val x6231 = x6229._2
val x6232 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6230,x6231)
val x6233 = x6225 + (x6224 -> x6232)
x5 = x6233
val x6235 = {(x6236:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x6237:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x6240 = Addr("x3")
val x6248 = x5
val x6242 = x6219 + ("x3" -> x6240)
val x6239 = x6237
val x6238 = x6236
val x6243 = x6238.head
val x6244 = x6239.getOrElse(x6240, x15)
val x6245 = x6243.union(x6244)
val x6246 = x6239 + (x6240 -> x6245)
val x6247 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))),x6242,x6246)
val x6249 = x6248.contains(x6247)
val x6449 = if (x6249) {
val x6250 = x6248(x6247)
x6250
} else {
val x6251 = x4
val x6252 = x6251.getOrElse(x6247, x17)
val x6253 = x6252._1
val x6254 = x6252._2
val x6255 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6253,x6254)
val x6256 = x6248 + (x6247 -> x6255)
x5 = x6256
val x6259 = x5
val x6258 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("f3"),x6242,x6246)
val x6260 = x6259.contains(x6258)
val x6284 = if (x6260) {
val x6261 = x6259(x6258)
x6261
} else {
val x6262 = x6251.getOrElse(x6258, x17)
val x6263 = x6262._1
val x6264 = x6262._2
val x6265 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6263,x6264)
val x6266 = x6259 + (x6258 -> x6265)
x5 = x6266
val x6270 = x5
val x6268 = x6242("f3")
val x6269 = x6246.getOrElse(x6268, x15)
val x6271 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6269,x6246)
val x6272 = x6263.union(x6269)
val x6279 = x6246.foldLeft (x6264) { case (x6273, (x6274, x6275)) =>
val x6276 = x6273.getOrElse(x6274, x15)
val x6277 = x6276.union(x6275)
val x6278 = x6273 + (x6274 -> x6277)

x6278
}
val x6280 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6272,x6279)
val x6281 = x6270 + (x6258 -> x6280)
x5 = x6281
x6271
}
val x6288 = x5
val x6286 = x6284._2
val x6287 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))),x6242,x6286)
val x6289 = x6288.contains(x6287)
val x6429 = if (x6289) {
val x6290 = x6288(x6287)
x6290
} else {
val x6291 = x6251.getOrElse(x6287, x17)
val x6292 = x6291._1
val x6293 = x6291._2
val x6294 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6292,x6293)
val x6295 = x6288 + (x6287 -> x6294)
x5 = x6295
val x6298 = x5
val x6297 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("f3"),x6242,x6286)
val x6299 = x6298.contains(x6297)
val x6322 = if (x6299) {
val x6300 = x6298(x6297)
x6300
} else {
val x6301 = x6251.getOrElse(x6297, x17)
val x6302 = x6301._1
val x6303 = x6301._2
val x6304 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6302,x6303)
val x6305 = x6298 + (x6297 -> x6304)
x5 = x6305
val x6308 = x5
val x6268 = x6242("f3")
val x6307 = x6286.getOrElse(x6268, x15)
val x6309 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6307,x6286)
val x6310 = x6302.union(x6307)
val x6317 = x6286.foldLeft (x6303) { case (x6311, (x6312, x6313)) =>
val x6314 = x6311.getOrElse(x6312, x15)
val x6315 = x6314.union(x6313)
val x6316 = x6311 + (x6312 -> x6315)

x6316
}
val x6318 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6310,x6317)
val x6319 = x6308 + (x6297 -> x6318)
x5 = x6319
x6309
}
val x6326 = x5
val x6324 = x6322._2
val x6325 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("f3"),List(Var("x3"))),x6242,x6324)
val x6327 = x6326.contains(x6325)
val x6409 = if (x6327) {
val x6328 = x6326(x6325)
x6328
} else {
val x6329 = x6251.getOrElse(x6325, x17)
val x6330 = x6329._1
val x6331 = x6329._2
val x6332 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6330,x6331)
val x6333 = x6326 + (x6325 -> x6332)
x5 = x6333
val x6336 = x5
val x6335 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("f3"),x6242,x6324)
val x6337 = x6336.contains(x6335)
val x6360 = if (x6337) {
val x6338 = x6336(x6335)
x6338
} else {
val x6339 = x6251.getOrElse(x6335, x17)
val x6340 = x6339._1
val x6341 = x6339._2
val x6342 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6340,x6341)
val x6343 = x6336 + (x6335 -> x6342)
x5 = x6343
val x6346 = x5
val x6268 = x6242("f3")
val x6345 = x6324.getOrElse(x6268, x15)
val x6347 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6345,x6324)
val x6348 = x6340.union(x6345)
val x6355 = x6324.foldLeft (x6341) { case (x6349, (x6350, x6351)) =>
val x6352 = x6349.getOrElse(x6350, x15)
val x6353 = x6352.union(x6351)
val x6354 = x6349 + (x6350 -> x6353)

x6354
}
val x6356 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6348,x6355)
val x6357 = x6346 + (x6335 -> x6356)
x5 = x6357
x6347
}
val x6364 = x5
val x6362 = x6360._2
val x6363 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("x3"),x6242,x6362)
val x6365 = x6364.contains(x6363)
val x6389 = if (x6365) {
val x6366 = x6364(x6363)
x6366
} else {
val x6367 = x6251.getOrElse(x6363, x17)
val x6368 = x6367._1
val x6369 = x6367._2
val x6370 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6368,x6369)
val x6371 = x6364 + (x6363 -> x6370)
x5 = x6371
val x6375 = x5
val x6373 = x6242("x3")
val x6374 = x6362.getOrElse(x6373, x15)
val x6376 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6374,x6362)
val x6377 = x6368.union(x6374)
val x6384 = x6362.foldLeft (x6369) { case (x6378, (x6379, x6380)) =>
val x6381 = x6378.getOrElse(x6379, x15)
val x6382 = x6381.union(x6380)
val x6383 = x6378 + (x6379 -> x6382)

x6383
}
val x6385 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6377,x6384)
val x6386 = x6375 + (x6363 -> x6385)
x5 = x6386
x6376
}
val x6361 = x6360._1
val x6390 = x6389._1
val x6391 = x6389._2
val x6392 = apply_closures_norep(x6361, List(x6390), x6391)
val x6395 = x5
val x6393 = x6392._1
val x6394 = x6392._2
val x6396 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6393,x6394)
val x6397 = x6330.union(x6393)
val x6404 = x6394.foldLeft (x6331) { case (x6398, (x6399, x6400)) =>
val x6401 = x6398.getOrElse(x6399, x15)
val x6402 = x6401.union(x6400)
val x6403 = x6398 + (x6399 -> x6402)

x6403
}
val x6405 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6397,x6404)
val x6406 = x6395 + (x6325 -> x6405)
x5 = x6406
x6396
}
val x6323 = x6322._1
val x6410 = x6409._1
val x6411 = x6409._2
val x6412 = apply_closures_norep(x6323, List(x6410), x6411)
val x6415 = x5
val x6413 = x6412._1
val x6414 = x6412._2
val x6416 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6413,x6414)
val x6417 = x6292.union(x6413)
val x6424 = x6414.foldLeft (x6293) { case (x6418, (x6419, x6420)) =>
val x6421 = x6418.getOrElse(x6419, x15)
val x6422 = x6421.union(x6420)
val x6423 = x6418 + (x6419 -> x6422)

x6423
}
val x6425 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6417,x6424)
val x6426 = x6415 + (x6287 -> x6425)
x5 = x6426
x6416
}
val x6285 = x6284._1
val x6430 = x6429._1
val x6431 = x6429._2
val x6432 = apply_closures_norep(x6285, List(x6430), x6431)
val x6435 = x5
val x6433 = x6432._1
val x6434 = x6432._2
val x6436 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6433,x6434)
val x6437 = x6253.union(x6433)
val x6444 = x6434.foldLeft (x6254) { case (x6438, (x6439, x6440)) =>
val x6441 = x6438.getOrElse(x6439, x15)
val x6442 = x6441.union(x6440)
val x6443 = x6438 + (x6439 -> x6442)

x6443
}
val x6445 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6437,x6444)
val x6446 = x6435 + (x6247 -> x6445)
x5 = x6446
x6436
}
val x6450 = x6449._1
val x6451 = x6449._2
val x6452 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6450,x6451)
x6452: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6454 = Set[AbsValue](CompiledClo(x6235,Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3")))))))),x6219))
val x6455 = x5
val x6456 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6454,x6223)
val x6457 = x6230.union(x6454)
val x6464 = x6223.foldLeft (x6231) { case (x6458, (x6459, x6460)) =>
val x6461 = x6458.getOrElse(x6459, x15)
val x6462 = x6461.union(x6460)
val x6463 = x6458 + (x6459 -> x6462)

x6463
}
val x6465 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6457,x6464)
val x6466 = x6455 + (x6224 -> x6465)
x5 = x6466
x6456
}
val x6470 = x6469._1
val x6471 = x6469._2
val x6472 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6470,x6471)
x6472: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6474 = Set[AbsValue](CompiledClo(x6212,Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))),x503))
val x6475 = x5
val x6476 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6474,x6191)
val x6477 = x6207.union(x6474)
val x6484 = x6191.foldLeft (x6208) { case (x6478, (x6479, x6480)) =>
val x6481 = x6478.getOrElse(x6479, x15)
val x6482 = x6481.union(x6480)
val x6483 = x6478 + (x6479 -> x6482)

x6483
}
val x6485 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6477,x6484)
val x6486 = x6475 + (x6202 -> x6485)
x5 = x6486
x6476
}
val x6492 = Set[AbsValue](VoidV())
val x6497 = x5
val x6491 = x6489._2
val x6493 = x503("church3")
val x6490 = x6489._1
val x6494 = x6491.getOrElse(x6493, x15)
val x6495 = x6490.union(x6494)
val x6496 = x6491 + (x6493 -> x6495)
val x6498 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6492,x6496)
val x6499 = x6197.union(x6492)
val x6506 = x6496.foldLeft (x6198) { case (x6500, (x6501, x6502)) =>
val x6503 = x6500.getOrElse(x6501, x15)
val x6504 = x6503.union(x6502)
val x6505 = x6500 + (x6501 -> x6504)

x6505
}
val x6507 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6499,x6506)
val x6508 = x6497 + (x6192 -> x6507)
x5 = x6508
x6498
}
val x6190 = x6189._1
val x6512 = x6511._1
val x6513 = x6511._2
val x6514 = apply_closures_norep(x6190, List(x6512), x6513)
val x6517 = x5
val x6515 = x6514._1
val x6516 = x6514._2
val x6518 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6515,x6516)
val x6519 = x514.union(x6515)
val x6526 = x6516.foldLeft (x515) { case (x6520, (x6521, x6522)) =>
val x6523 = x6520.getOrElse(x6521, x15)
val x6524 = x6523.union(x6522)
val x6525 = x6520 + (x6521 -> x6524)

x6525
}
val x6527 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6519,x6526)
val x6528 = x6517 + (x508 -> x6527)
x5 = x6528
x6518
}
val x6532 = x6531._1
val x6533 = x6531._2
val x6534 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6532,x6533)
x6534: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6536 = Set[AbsValue](CompiledClo(x496,Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),x470))
val x6537 = x5
val x6538 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6536,x474)
val x6539 = x491.union(x6536)
val x6546 = x474.foldLeft (x492) { case (x6540, (x6541, x6542)) =>
val x6543 = x6540.getOrElse(x6541, x15)
val x6544 = x6543.union(x6542)
val x6545 = x6540 + (x6541 -> x6544)

x6545
}
val x6547 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6539,x6546)
val x6548 = x6537 + (x486 -> x6547)
x5 = x6548
x6538
}
val x6555 = x5
val x6553 = x6551._2
val x6554 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Void(),x470,x6553)
val x6556 = x6555.contains(x6554)
val x6579 = if (x6556) {
val x6557 = x6555(x6554)
x6557
} else {
val x6558 = x479.getOrElse(x6554, x17)
val x6559 = x6558._1
val x6560 = x6558._2
val x6561 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6559,x6560)
val x6562 = x6555 + (x6554 -> x6561)
x5 = x6562
val x6564 = Set[AbsValue](VoidV())
val x6565 = x5
val x6566 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6564,x6553)
val x6567 = x6559.union(x6564)
val x6574 = x6553.foldLeft (x6560) { case (x6568, (x6569, x6570)) =>
val x6571 = x6568.getOrElse(x6569, x15)
val x6572 = x6571.union(x6570)
val x6573 = x6568 + (x6569 -> x6572)

x6573
}
val x6575 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6567,x6574)
val x6576 = x6565 + (x6554 -> x6575)
x5 = x6576
x6566
}
val x6552 = x6551._1
val x6580 = x6579._1
val x6581 = x6579._2
val x6582 = apply_closures_norep(x6552, List(x6580), x6581)
val x6585 = x5
val x6583 = x6582._1
val x6584 = x6582._2
val x6586 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6583,x6584)
val x6587 = x481.union(x6583)
val x6594 = x6584.foldLeft (x482) { case (x6588, (x6589, x6590)) =>
val x6591 = x6588.getOrElse(x6589, x15)
val x6592 = x6591.union(x6590)
val x6593 = x6588 + (x6589 -> x6592)

x6593
}
val x6595 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6587,x6594)
val x6596 = x6585 + (x475 -> x6595)
x5 = x6596
x6586
}
val x6600 = x6599._1
val x6601 = x6599._2
val x6602 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6600,x6601)
x6602: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6604 = Set[AbsValue](CompiledClo(x463,Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),x437))
val x6605 = x5
val x6606 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6604,x441)
val x6607 = x458.union(x6604)
val x6614 = x441.foldLeft (x459) { case (x6608, (x6609, x6610)) =>
val x6611 = x6608.getOrElse(x6609, x15)
val x6612 = x6611.union(x6610)
val x6613 = x6608 + (x6609 -> x6612)

x6613
}
val x6615 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6607,x6614)
val x6616 = x6605 + (x453 -> x6615)
x5 = x6616
x6606
}
val x6623 = x5
val x6621 = x6619._2
val x6622 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2")))))))),x437,x6621)
val x6624 = x6623.contains(x6622)
val x6883 = if (x6624) {
val x6625 = x6623(x6622)
x6625
} else {
val x6626 = x446.getOrElse(x6622, x17)
val x6627 = x6626._1
val x6628 = x6626._2
val x6629 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6627,x6628)
val x6630 = x6623 + (x6622 -> x6629)
x5 = x6630
val x6633 = x5
val x6632 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))),x437,x6621)
val x6634 = x6633.contains(x6632)
val x6861 = if (x6634) {
val x6635 = x6633(x6632)
x6635
} else {
val x6636 = x446.getOrElse(x6632, x17)
val x6637 = x6636._1
val x6638 = x6636._2
val x6639 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6637,x6638)
val x6640 = x6633 + (x6632 -> x6639)
x5 = x6640
val x6642 = {(x6643:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x6644:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x6647 = Addr("f2")
val x6655 = x5
val x6649 = x437 + ("f2" -> x6647)
val x6646 = x6644
val x6645 = x6643
val x6650 = x6645.head
val x6651 = x6646.getOrElse(x6647, x15)
val x6652 = x6650.union(x6651)
val x6653 = x6646 + (x6647 -> x6652)
val x6654 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2")))))),x6649,x6653)
val x6656 = x6655.contains(x6654)
val x6841 = if (x6656) {
val x6657 = x6655(x6654)
x6657
} else {
val x6658 = x4
val x6659 = x6658.getOrElse(x6654, x17)
val x6660 = x6659._1
val x6661 = x6659._2
val x6662 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6660,x6661)
val x6663 = x6655 + (x6654 -> x6662)
x5 = x6663
val x6665 = {(x6666:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x6667:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x6670 = Addr("x2")
val x6678 = x5
val x6672 = x6649 + ("x2" -> x6670)
val x6669 = x6667
val x6668 = x6666
val x6673 = x6668.head
val x6674 = x6669.getOrElse(x6670, x15)
val x6675 = x6673.union(x6674)
val x6676 = x6669 + (x6670 -> x6675)
val x6677 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))),x6672,x6676)
val x6679 = x6678.contains(x6677)
val x6821 = if (x6679) {
val x6680 = x6678(x6677)
x6680
} else {
val x6681 = x4
val x6682 = x6681.getOrElse(x6677, x17)
val x6683 = x6682._1
val x6684 = x6682._2
val x6685 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6683,x6684)
val x6686 = x6678 + (x6677 -> x6685)
x5 = x6686
val x6689 = x5
val x6688 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("f2"),x6672,x6676)
val x6690 = x6689.contains(x6688)
val x6714 = if (x6690) {
val x6691 = x6689(x6688)
x6691
} else {
val x6692 = x6681.getOrElse(x6688, x17)
val x6693 = x6692._1
val x6694 = x6692._2
val x6695 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6693,x6694)
val x6696 = x6689 + (x6688 -> x6695)
x5 = x6696
val x6700 = x5
val x6698 = x6672("f2")
val x6699 = x6676.getOrElse(x6698, x15)
val x6701 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6699,x6676)
val x6702 = x6693.union(x6699)
val x6709 = x6676.foldLeft (x6694) { case (x6703, (x6704, x6705)) =>
val x6706 = x6703.getOrElse(x6704, x15)
val x6707 = x6706.union(x6705)
val x6708 = x6703 + (x6704 -> x6707)

x6708
}
val x6710 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6702,x6709)
val x6711 = x6700 + (x6688 -> x6710)
x5 = x6711
x6701
}
val x6718 = x5
val x6716 = x6714._2
val x6717 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("f2"),List(Var("x2"))),x6672,x6716)
val x6719 = x6718.contains(x6717)
val x6801 = if (x6719) {
val x6720 = x6718(x6717)
x6720
} else {
val x6721 = x6681.getOrElse(x6717, x17)
val x6722 = x6721._1
val x6723 = x6721._2
val x6724 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6722,x6723)
val x6725 = x6718 + (x6717 -> x6724)
x5 = x6725
val x6728 = x5
val x6727 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("f2"),x6672,x6716)
val x6729 = x6728.contains(x6727)
val x6752 = if (x6729) {
val x6730 = x6728(x6727)
x6730
} else {
val x6731 = x6681.getOrElse(x6727, x17)
val x6732 = x6731._1
val x6733 = x6731._2
val x6734 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6732,x6733)
val x6735 = x6728 + (x6727 -> x6734)
x5 = x6735
val x6738 = x5
val x6698 = x6672("f2")
val x6737 = x6716.getOrElse(x6698, x15)
val x6739 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6737,x6716)
val x6740 = x6732.union(x6737)
val x6747 = x6716.foldLeft (x6733) { case (x6741, (x6742, x6743)) =>
val x6744 = x6741.getOrElse(x6742, x15)
val x6745 = x6744.union(x6743)
val x6746 = x6741 + (x6742 -> x6745)

x6746
}
val x6748 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6740,x6747)
val x6749 = x6738 + (x6727 -> x6748)
x5 = x6749
x6739
}
val x6756 = x5
val x6754 = x6752._2
val x6755 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("x2"),x6672,x6754)
val x6757 = x6756.contains(x6755)
val x6781 = if (x6757) {
val x6758 = x6756(x6755)
x6758
} else {
val x6759 = x6681.getOrElse(x6755, x17)
val x6760 = x6759._1
val x6761 = x6759._2
val x6762 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6760,x6761)
val x6763 = x6756 + (x6755 -> x6762)
x5 = x6763
val x6767 = x5
val x6765 = x6672("x2")
val x6766 = x6754.getOrElse(x6765, x15)
val x6768 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6766,x6754)
val x6769 = x6760.union(x6766)
val x6776 = x6754.foldLeft (x6761) { case (x6770, (x6771, x6772)) =>
val x6773 = x6770.getOrElse(x6771, x15)
val x6774 = x6773.union(x6772)
val x6775 = x6770 + (x6771 -> x6774)

x6775
}
val x6777 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6769,x6776)
val x6778 = x6767 + (x6755 -> x6777)
x5 = x6778
x6768
}
val x6753 = x6752._1
val x6782 = x6781._1
val x6783 = x6781._2
val x6784 = apply_closures_norep(x6753, List(x6782), x6783)
val x6787 = x5
val x6785 = x6784._1
val x6786 = x6784._2
val x6788 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6785,x6786)
val x6789 = x6722.union(x6785)
val x6796 = x6786.foldLeft (x6723) { case (x6790, (x6791, x6792)) =>
val x6793 = x6790.getOrElse(x6791, x15)
val x6794 = x6793.union(x6792)
val x6795 = x6790 + (x6791 -> x6794)

x6795
}
val x6797 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6789,x6796)
val x6798 = x6787 + (x6717 -> x6797)
x5 = x6798
x6788
}
val x6715 = x6714._1
val x6802 = x6801._1
val x6803 = x6801._2
val x6804 = apply_closures_norep(x6715, List(x6802), x6803)
val x6807 = x5
val x6805 = x6804._1
val x6806 = x6804._2
val x6808 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6805,x6806)
val x6809 = x6683.union(x6805)
val x6816 = x6806.foldLeft (x6684) { case (x6810, (x6811, x6812)) =>
val x6813 = x6810.getOrElse(x6811, x15)
val x6814 = x6813.union(x6812)
val x6815 = x6810 + (x6811 -> x6814)

x6815
}
val x6817 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6809,x6816)
val x6818 = x6807 + (x6677 -> x6817)
x5 = x6818
x6808
}
val x6822 = x6821._1
val x6823 = x6821._2
val x6824 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6822,x6823)
x6824: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6826 = Set[AbsValue](CompiledClo(x6665,Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2")))))),x6649))
val x6827 = x5
val x6828 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6826,x6653)
val x6829 = x6660.union(x6826)
val x6836 = x6653.foldLeft (x6661) { case (x6830, (x6831, x6832)) =>
val x6833 = x6830.getOrElse(x6831, x15)
val x6834 = x6833.union(x6832)
val x6835 = x6830 + (x6831 -> x6834)

x6835
}
val x6837 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6829,x6836)
val x6838 = x6827 + (x6654 -> x6837)
x5 = x6838
x6828
}
val x6842 = x6841._1
val x6843 = x6841._2
val x6844 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6842,x6843)
x6844: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6846 = Set[AbsValue](CompiledClo(x6642,Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))),x437))
val x6847 = x5
val x6848 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6846,x6621)
val x6849 = x6637.union(x6846)
val x6856 = x6621.foldLeft (x6638) { case (x6850, (x6851, x6852)) =>
val x6853 = x6850.getOrElse(x6851, x15)
val x6854 = x6853.union(x6852)
val x6855 = x6850 + (x6851 -> x6854)

x6855
}
val x6857 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6849,x6856)
val x6858 = x6847 + (x6632 -> x6857)
x5 = x6858
x6848
}
val x6864 = Set[AbsValue](VoidV())
val x6869 = x5
val x6863 = x6861._2
val x6865 = x437("church2")
val x6862 = x6861._1
val x6866 = x6863.getOrElse(x6865, x15)
val x6867 = x6862.union(x6866)
val x6868 = x6863 + (x6865 -> x6867)
val x6870 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6864,x6868)
val x6871 = x6627.union(x6864)
val x6878 = x6868.foldLeft (x6628) { case (x6872, (x6873, x6874)) =>
val x6875 = x6872.getOrElse(x6873, x15)
val x6876 = x6875.union(x6874)
val x6877 = x6872 + (x6873 -> x6876)

x6877
}
val x6879 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6871,x6878)
val x6880 = x6869 + (x6622 -> x6879)
x5 = x6880
x6870
}
val x6620 = x6619._1
val x6884 = x6883._1
val x6885 = x6883._2
val x6886 = apply_closures_norep(x6620, List(x6884), x6885)
val x6889 = x5
val x6887 = x6886._1
val x6888 = x6886._2
val x6890 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6887,x6888)
val x6891 = x448.union(x6887)
val x6898 = x6888.foldLeft (x449) { case (x6892, (x6893, x6894)) =>
val x6895 = x6892.getOrElse(x6893, x15)
val x6896 = x6895.union(x6894)
val x6897 = x6892 + (x6893 -> x6896)

x6897
}
val x6899 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6891,x6898)
val x6900 = x6889 + (x442 -> x6899)
x5 = x6900
x6890
}
val x6904 = x6903._1
val x6905 = x6903._2
val x6906 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6904,x6905)
x6906: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6908 = Set[AbsValue](CompiledClo(x430,Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),x404))
val x6909 = x5
val x6910 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6908,x408)
val x6911 = x425.union(x6908)
val x6918 = x408.foldLeft (x426) { case (x6912, (x6913, x6914)) =>
val x6915 = x6912.getOrElse(x6913, x15)
val x6916 = x6915.union(x6914)
val x6917 = x6912 + (x6913 -> x6916)

x6917
}
val x6919 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6911,x6918)
val x6920 = x6909 + (x420 -> x6919)
x5 = x6920
x6910
}
val x6927 = x5
val x6925 = x6923._2
val x6926 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Void(),x404,x6925)
val x6928 = x6927.contains(x6926)
val x6951 = if (x6928) {
val x6929 = x6927(x6926)
x6929
} else {
val x6930 = x413.getOrElse(x6926, x17)
val x6931 = x6930._1
val x6932 = x6930._2
val x6933 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6931,x6932)
val x6934 = x6927 + (x6926 -> x6933)
x5 = x6934
val x6936 = Set[AbsValue](VoidV())
val x6937 = x5
val x6938 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6936,x6925)
val x6939 = x6931.union(x6936)
val x6946 = x6925.foldLeft (x6932) { case (x6940, (x6941, x6942)) =>
val x6943 = x6940.getOrElse(x6941, x15)
val x6944 = x6943.union(x6942)
val x6945 = x6940 + (x6941 -> x6944)

x6945
}
val x6947 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6939,x6946)
val x6948 = x6937 + (x6926 -> x6947)
x5 = x6948
x6938
}
val x6924 = x6923._1
val x6952 = x6951._1
val x6953 = x6951._2
val x6954 = apply_closures_norep(x6924, List(x6952), x6953)
val x6957 = x5
val x6955 = x6954._1
val x6956 = x6954._2
val x6958 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6955,x6956)
val x6959 = x415.union(x6955)
val x6966 = x6956.foldLeft (x416) { case (x6960, (x6961, x6962)) =>
val x6963 = x6960.getOrElse(x6961, x15)
val x6964 = x6963.union(x6962)
val x6965 = x6960 + (x6961 -> x6964)

x6965
}
val x6967 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6959,x6966)
val x6968 = x6957 + (x409 -> x6967)
x5 = x6968
x6958
}
val x6972 = x6971._1
val x6973 = x6971._2
val x6974 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6972,x6973)
x6974: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x6976 = Set[AbsValue](CompiledClo(x397,Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),x371))
val x6977 = x5
val x6978 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6976,x375)
val x6979 = x392.union(x6976)
val x6986 = x375.foldLeft (x393) { case (x6980, (x6981, x6982)) =>
val x6983 = x6980.getOrElse(x6981, x15)
val x6984 = x6983.union(x6982)
val x6985 = x6980 + (x6981 -> x6984)

x6985
}
val x6987 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6979,x6986)
val x6988 = x6977 + (x387 -> x6987)
x5 = x6988
x6978
}
val x6995 = x5
val x6993 = x6991._2
val x6994 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1")))))),x371,x6993)
val x6996 = x6995.contains(x6994)
val x7197 = if (x6996) {
val x6997 = x6995(x6994)
x6997
} else {
val x6998 = x380.getOrElse(x6994, x17)
val x6999 = x6998._1
val x7000 = x6998._2
val x7001 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x6999,x7000)
val x7002 = x6995 + (x6994 -> x7001)
x5 = x7002
val x7005 = x5
val x7004 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))),x371,x6993)
val x7006 = x7005.contains(x7004)
val x7175 = if (x7006) {
val x7007 = x7005(x7004)
x7007
} else {
val x7008 = x380.getOrElse(x7004, x17)
val x7009 = x7008._1
val x7010 = x7008._2
val x7011 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7009,x7010)
val x7012 = x7005 + (x7004 -> x7011)
x5 = x7012
val x7014 = {(x7015:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x7016:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x7019 = Addr("f1")
val x7027 = x5
val x7021 = x371 + ("f1" -> x7019)
val x7018 = x7016
val x7017 = x7015
val x7022 = x7017.head
val x7023 = x7018.getOrElse(x7019, x15)
val x7024 = x7022.union(x7023)
val x7025 = x7018 + (x7019 -> x7024)
val x7026 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("x1"), App(Var("f1"),List(Var("x1")))),x7021,x7025)
val x7028 = x7027.contains(x7026)
val x7155 = if (x7028) {
val x7029 = x7027(x7026)
x7029
} else {
val x7030 = x4
val x7031 = x7030.getOrElse(x7026, x17)
val x7032 = x7031._1
val x7033 = x7031._2
val x7034 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7032,x7033)
val x7035 = x7027 + (x7026 -> x7034)
x5 = x7035
val x7037 = {(x7038:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x7039:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x7042 = Addr("x1")
val x7050 = x5
val x7044 = x7021 + ("x1" -> x7042)
val x7041 = x7039
val x7040 = x7038
val x7045 = x7040.head
val x7046 = x7041.getOrElse(x7042, x15)
val x7047 = x7045.union(x7046)
val x7048 = x7041 + (x7042 -> x7047)
val x7049 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("f1"),List(Var("x1"))),x7044,x7048)
val x7051 = x7050.contains(x7049)
val x7135 = if (x7051) {
val x7052 = x7050(x7049)
x7052
} else {
val x7053 = x4
val x7054 = x7053.getOrElse(x7049, x17)
val x7055 = x7054._1
val x7056 = x7054._2
val x7057 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7055,x7056)
val x7058 = x7050 + (x7049 -> x7057)
x5 = x7058
val x7061 = x5
val x7060 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("f1"),x7044,x7048)
val x7062 = x7061.contains(x7060)
val x7086 = if (x7062) {
val x7063 = x7061(x7060)
x7063
} else {
val x7064 = x7053.getOrElse(x7060, x17)
val x7065 = x7064._1
val x7066 = x7064._2
val x7067 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7065,x7066)
val x7068 = x7061 + (x7060 -> x7067)
x5 = x7068
val x7072 = x5
val x7070 = x7044("f1")
val x7071 = x7048.getOrElse(x7070, x15)
val x7073 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7071,x7048)
val x7074 = x7065.union(x7071)
val x7081 = x7048.foldLeft (x7066) { case (x7075, (x7076, x7077)) =>
val x7078 = x7075.getOrElse(x7076, x15)
val x7079 = x7078.union(x7077)
val x7080 = x7075 + (x7076 -> x7079)

x7080
}
val x7082 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7074,x7081)
val x7083 = x7072 + (x7060 -> x7082)
x5 = x7083
x7073
}
val x7090 = x5
val x7088 = x7086._2
val x7089 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("x1"),x7044,x7088)
val x7091 = x7090.contains(x7089)
val x7115 = if (x7091) {
val x7092 = x7090(x7089)
x7092
} else {
val x7093 = x7053.getOrElse(x7089, x17)
val x7094 = x7093._1
val x7095 = x7093._2
val x7096 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7094,x7095)
val x7097 = x7090 + (x7089 -> x7096)
x5 = x7097
val x7101 = x5
val x7099 = x7044("x1")
val x7100 = x7088.getOrElse(x7099, x15)
val x7102 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7100,x7088)
val x7103 = x7094.union(x7100)
val x7110 = x7088.foldLeft (x7095) { case (x7104, (x7105, x7106)) =>
val x7107 = x7104.getOrElse(x7105, x15)
val x7108 = x7107.union(x7106)
val x7109 = x7104 + (x7105 -> x7108)

x7109
}
val x7111 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7103,x7110)
val x7112 = x7101 + (x7089 -> x7111)
x5 = x7112
x7102
}
val x7087 = x7086._1
val x7116 = x7115._1
val x7117 = x7115._2
val x7118 = apply_closures_norep(x7087, List(x7116), x7117)
val x7121 = x5
val x7119 = x7118._1
val x7120 = x7118._2
val x7122 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7119,x7120)
val x7123 = x7055.union(x7119)
val x7130 = x7120.foldLeft (x7056) { case (x7124, (x7125, x7126)) =>
val x7127 = x7124.getOrElse(x7125, x15)
val x7128 = x7127.union(x7126)
val x7129 = x7124 + (x7125 -> x7128)

x7129
}
val x7131 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7123,x7130)
val x7132 = x7121 + (x7049 -> x7131)
x5 = x7132
x7122
}
val x7136 = x7135._1
val x7137 = x7135._2
val x7138 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7136,x7137)
x7138: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7140 = Set[AbsValue](CompiledClo(x7037,Lam(List("x1"), App(Var("f1"),List(Var("x1")))),x7021))
val x7141 = x5
val x7142 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7140,x7025)
val x7143 = x7032.union(x7140)
val x7150 = x7025.foldLeft (x7033) { case (x7144, (x7145, x7146)) =>
val x7147 = x7144.getOrElse(x7145, x15)
val x7148 = x7147.union(x7146)
val x7149 = x7144 + (x7145 -> x7148)

x7149
}
val x7151 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7143,x7150)
val x7152 = x7141 + (x7026 -> x7151)
x5 = x7152
x7142
}
val x7156 = x7155._1
val x7157 = x7155._2
val x7158 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7156,x7157)
x7158: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7160 = Set[AbsValue](CompiledClo(x7014,Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))),x371))
val x7161 = x5
val x7162 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7160,x6993)
val x7163 = x7009.union(x7160)
val x7170 = x6993.foldLeft (x7010) { case (x7164, (x7165, x7166)) =>
val x7167 = x7164.getOrElse(x7165, x15)
val x7168 = x7167.union(x7166)
val x7169 = x7164 + (x7165 -> x7168)

x7169
}
val x7171 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7163,x7170)
val x7172 = x7161 + (x7004 -> x7171)
x5 = x7172
x7162
}
val x7178 = Set[AbsValue](VoidV())
val x7183 = x5
val x7177 = x7175._2
val x7179 = x371("church1")
val x7176 = x7175._1
val x7180 = x7177.getOrElse(x7179, x15)
val x7181 = x7176.union(x7180)
val x7182 = x7177 + (x7179 -> x7181)
val x7184 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7178,x7182)
val x7185 = x6999.union(x7178)
val x7192 = x7182.foldLeft (x7000) { case (x7186, (x7187, x7188)) =>
val x7189 = x7186.getOrElse(x7187, x15)
val x7190 = x7189.union(x7188)
val x7191 = x7186 + (x7187 -> x7190)

x7191
}
val x7193 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7185,x7192)
val x7194 = x7183 + (x6994 -> x7193)
x5 = x7194
x7184
}
val x6992 = x6991._1
val x7198 = x7197._1
val x7199 = x7197._2
val x7200 = apply_closures_norep(x6992, List(x7198), x7199)
val x7203 = x5
val x7201 = x7200._1
val x7202 = x7200._2
val x7204 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7201,x7202)
val x7205 = x382.union(x7201)
val x7212 = x7202.foldLeft (x383) { case (x7206, (x7207, x7208)) =>
val x7209 = x7206.getOrElse(x7207, x15)
val x7210 = x7209.union(x7208)
val x7211 = x7206 + (x7207 -> x7210)

x7211
}
val x7213 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7205,x7212)
val x7214 = x7203 + (x376 -> x7213)
x5 = x7214
x7204
}
val x7218 = x7217._1
val x7219 = x7217._2
val x7220 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7218,x7219)
x7220: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7222 = Set[AbsValue](CompiledClo(x364,Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),x338))
val x7223 = x5
val x7224 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7222,x342)
val x7225 = x359.union(x7222)
val x7232 = x342.foldLeft (x360) { case (x7226, (x7227, x7228)) =>
val x7229 = x7226.getOrElse(x7227, x15)
val x7230 = x7229.union(x7228)
val x7231 = x7226 + (x7227 -> x7230)

x7231
}
val x7233 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7225,x7232)
val x7234 = x7223 + (x354 -> x7233)
x5 = x7234
x7224
}
val x7241 = x5
val x7239 = x7237._2
val x7240 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Void(),x338,x7239)
val x7242 = x7241.contains(x7240)
val x7265 = if (x7242) {
val x7243 = x7241(x7240)
x7243
} else {
val x7244 = x347.getOrElse(x7240, x17)
val x7245 = x7244._1
val x7246 = x7244._2
val x7247 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7245,x7246)
val x7248 = x7241 + (x7240 -> x7247)
x5 = x7248
val x7250 = Set[AbsValue](VoidV())
val x7251 = x5
val x7252 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7250,x7239)
val x7253 = x7245.union(x7250)
val x7260 = x7239.foldLeft (x7246) { case (x7254, (x7255, x7256)) =>
val x7257 = x7254.getOrElse(x7255, x15)
val x7258 = x7257.union(x7256)
val x7259 = x7254 + (x7255 -> x7258)

x7259
}
val x7261 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7253,x7260)
val x7262 = x7251 + (x7240 -> x7261)
x5 = x7262
x7252
}
val x7238 = x7237._1
val x7266 = x7265._1
val x7267 = x7265._2
val x7268 = apply_closures_norep(x7238, List(x7266), x7267)
val x7271 = x5
val x7269 = x7268._1
val x7270 = x7268._2
val x7272 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7269,x7270)
val x7273 = x349.union(x7269)
val x7280 = x7270.foldLeft (x350) { case (x7274, (x7275, x7276)) =>
val x7277 = x7274.getOrElse(x7275, x15)
val x7278 = x7277.union(x7276)
val x7279 = x7274 + (x7275 -> x7278)

x7279
}
val x7281 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7273,x7280)
val x7282 = x7271 + (x343 -> x7281)
x5 = x7282
x7272
}
val x7286 = x7285._1
val x7287 = x7285._2
val x7288 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7286,x7287)
x7288: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7290 = Set[AbsValue](CompiledClo(x331,Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),x305))
val x7291 = x5
val x7292 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7290,x309)
val x7293 = x326.union(x7290)
val x7300 = x309.foldLeft (x327) { case (x7294, (x7295, x7296)) =>
val x7297 = x7294.getOrElse(x7295, x15)
val x7298 = x7297.union(x7296)
val x7299 = x7294 + (x7295 -> x7298)

x7299
}
val x7301 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7293,x7300)
val x7302 = x7291 + (x321 -> x7301)
x5 = x7302
x7292
}
val x7309 = x5
val x7307 = x7305._2
val x7308 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0")))),x305,x7307)
val x7310 = x7309.contains(x7308)
val x7452 = if (x7310) {
val x7311 = x7309(x7308)
x7311
} else {
val x7312 = x314.getOrElse(x7308, x17)
val x7313 = x7312._1
val x7314 = x7312._2
val x7315 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7313,x7314)
val x7316 = x7309 + (x7308 -> x7315)
x5 = x7316
val x7319 = x5
val x7318 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("f0"), Lam(List("x0"), Var("x0"))),x305,x7307)
val x7320 = x7319.contains(x7318)
val x7430 = if (x7320) {
val x7321 = x7319(x7318)
x7321
} else {
val x7322 = x314.getOrElse(x7318, x17)
val x7323 = x7322._1
val x7324 = x7322._2
val x7325 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7323,x7324)
val x7326 = x7319 + (x7318 -> x7325)
x5 = x7326
val x7328 = {(x7329:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x7330:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x7333 = Addr("f0")
val x7341 = x5
val x7335 = x305 + ("f0" -> x7333)
val x7332 = x7330
val x7331 = x7329
val x7336 = x7331.head
val x7337 = x7332.getOrElse(x7333, x15)
val x7338 = x7336.union(x7337)
val x7339 = x7332 + (x7333 -> x7338)
val x7340 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("x0"), Var("x0")),x7335,x7339)
val x7342 = x7341.contains(x7340)
val x7410 = if (x7342) {
val x7343 = x7341(x7340)
x7343
} else {
val x7344 = x4
val x7345 = x7344.getOrElse(x7340, x17)
val x7346 = x7345._1
val x7347 = x7345._2
val x7348 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7346,x7347)
val x7349 = x7341 + (x7340 -> x7348)
x5 = x7349
val x7351 = {(x7352:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x7353:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x7356 = Addr("x0")
val x7364 = x5
val x7358 = x7335 + ("x0" -> x7356)
val x7355 = x7353
val x7354 = x7352
val x7359 = x7354.head
val x7360 = x7355.getOrElse(x7356, x15)
val x7361 = x7359.union(x7360)
val x7362 = x7355 + (x7356 -> x7361)
val x7363 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("x0"),x7358,x7362)
val x7365 = x7364.contains(x7363)
val x7390 = if (x7365) {
val x7366 = x7364(x7363)
x7366
} else {
val x7367 = x4
val x7368 = x7367.getOrElse(x7363, x17)
val x7369 = x7368._1
val x7370 = x7368._2
val x7371 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7369,x7370)
val x7372 = x7364 + (x7363 -> x7371)
x5 = x7372
val x7376 = x5
val x7374 = x7358("x0")
val x7375 = x7362.getOrElse(x7374, x15)
val x7377 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7375,x7362)
val x7378 = x7369.union(x7375)
val x7385 = x7362.foldLeft (x7370) { case (x7379, (x7380, x7381)) =>
val x7382 = x7379.getOrElse(x7380, x15)
val x7383 = x7382.union(x7381)
val x7384 = x7379 + (x7380 -> x7383)

x7384
}
val x7386 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7378,x7385)
val x7387 = x7376 + (x7363 -> x7386)
x5 = x7387
x7377
}
val x7391 = x7390._1
val x7392 = x7390._2
val x7393 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7391,x7392)
x7393: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7395 = Set[AbsValue](CompiledClo(x7351,Lam(List("x0"), Var("x0")),x7335))
val x7396 = x5
val x7397 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7395,x7339)
val x7398 = x7346.union(x7395)
val x7405 = x7339.foldLeft (x7347) { case (x7399, (x7400, x7401)) =>
val x7402 = x7399.getOrElse(x7400, x15)
val x7403 = x7402.union(x7401)
val x7404 = x7399 + (x7400 -> x7403)

x7404
}
val x7406 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7398,x7405)
val x7407 = x7396 + (x7340 -> x7406)
x5 = x7407
x7397
}
val x7411 = x7410._1
val x7412 = x7410._2
val x7413 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7411,x7412)
x7413: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7415 = Set[AbsValue](CompiledClo(x7328,Lam(List("f0"), Lam(List("x0"), Var("x0"))),x305))
val x7416 = x5
val x7417 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7415,x7307)
val x7418 = x7323.union(x7415)
val x7425 = x7307.foldLeft (x7324) { case (x7419, (x7420, x7421)) =>
val x7422 = x7419.getOrElse(x7420, x15)
val x7423 = x7422.union(x7421)
val x7424 = x7419 + (x7420 -> x7423)

x7424
}
val x7426 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7418,x7425)
val x7427 = x7416 + (x7318 -> x7426)
x5 = x7427
x7417
}
val x7433 = Set[AbsValue](VoidV())
val x7438 = x5
val x7432 = x7430._2
val x7434 = x305("church0")
val x7431 = x7430._1
val x7435 = x7432.getOrElse(x7434, x15)
val x7436 = x7431.union(x7435)
val x7437 = x7432 + (x7434 -> x7436)
val x7439 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7433,x7437)
val x7440 = x7313.union(x7433)
val x7447 = x7437.foldLeft (x7314) { case (x7441, (x7442, x7443)) =>
val x7444 = x7441.getOrElse(x7442, x15)
val x7445 = x7444.union(x7443)
val x7446 = x7441 + (x7442 -> x7445)

x7446
}
val x7448 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7440,x7447)
val x7449 = x7438 + (x7308 -> x7448)
x5 = x7449
x7439
}
val x7306 = x7305._1
val x7453 = x7452._1
val x7454 = x7452._2
val x7455 = apply_closures_norep(x7306, List(x7453), x7454)
val x7458 = x5
val x7456 = x7455._1
val x7457 = x7455._2
val x7459 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7456,x7457)
val x7460 = x316.union(x7456)
val x7467 = x7457.foldLeft (x317) { case (x7461, (x7462, x7463)) =>
val x7464 = x7461.getOrElse(x7462, x15)
val x7465 = x7464.union(x7463)
val x7466 = x7461 + (x7462 -> x7465)

x7466
}
val x7468 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7460,x7467)
val x7469 = x7458 + (x310 -> x7468)
x5 = x7469
x7459
}
val x7473 = x7472._1
val x7474 = x7472._2
val x7475 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7473,x7474)
x7475: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7477 = Set[AbsValue](CompiledClo(x298,Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),x272))
val x7478 = x5
val x7479 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7477,x276)
val x7480 = x293.union(x7477)
val x7487 = x276.foldLeft (x294) { case (x7481, (x7482, x7483)) =>
val x7484 = x7481.getOrElse(x7482, x15)
val x7485 = x7484.union(x7483)
val x7486 = x7481 + (x7482 -> x7485)

x7486
}
val x7488 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7480,x7487)
val x7489 = x7478 + (x288 -> x7488)
x5 = x7489
x7479
}
val x7496 = x5
val x7494 = x7492._2
val x7495 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Void(),x272,x7494)
val x7497 = x7496.contains(x7495)
val x7520 = if (x7497) {
val x7498 = x7496(x7495)
x7498
} else {
val x7499 = x281.getOrElse(x7495, x17)
val x7500 = x7499._1
val x7501 = x7499._2
val x7502 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7500,x7501)
val x7503 = x7496 + (x7495 -> x7502)
x5 = x7503
val x7505 = Set[AbsValue](VoidV())
val x7506 = x5
val x7507 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7505,x7494)
val x7508 = x7500.union(x7505)
val x7515 = x7494.foldLeft (x7501) { case (x7509, (x7510, x7511)) =>
val x7512 = x7509.getOrElse(x7510, x15)
val x7513 = x7512.union(x7511)
val x7514 = x7509 + (x7510 -> x7513)

x7514
}
val x7516 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7508,x7515)
val x7517 = x7506 + (x7495 -> x7516)
x5 = x7517
x7507
}
val x7493 = x7492._1
val x7521 = x7520._1
val x7522 = x7520._2
val x7523 = apply_closures_norep(x7493, List(x7521), x7522)
val x7526 = x5
val x7524 = x7523._1
val x7525 = x7523._2
val x7527 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7524,x7525)
val x7528 = x283.union(x7524)
val x7535 = x7525.foldLeft (x284) { case (x7529, (x7530, x7531)) =>
val x7532 = x7529.getOrElse(x7530, x15)
val x7533 = x7532.union(x7531)
val x7534 = x7529 + (x7530 -> x7533)

x7534
}
val x7536 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7528,x7535)
val x7537 = x7526 + (x277 -> x7536)
x5 = x7537
x7527
}
val x7541 = x7540._1
val x7542 = x7540._2
val x7543 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7541,x7542)
x7543: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7545 = Set[AbsValue](CompiledClo(x265,Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),x239))
val x7546 = x5
val x7547 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7545,x243)
val x7548 = x260.union(x7545)
val x7555 = x243.foldLeft (x261) { case (x7549, (x7550, x7551)) =>
val x7552 = x7549.getOrElse(x7550, x15)
val x7553 = x7552.union(x7551)
val x7554 = x7549 + (x7550 -> x7553)

x7554
}
val x7556 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7548,x7555)
val x7557 = x7546 + (x255 -> x7556)
x5 = x7557
x7547
}
val x7564 = x5
val x7562 = x7560._2
val x7563 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1")))))),x239,x7562)
val x7565 = x7564.contains(x7563)
val x7825 = if (x7565) {
val x7566 = x7564(x7563)
x7566
} else {
val x7567 = x248.getOrElse(x7563, x17)
val x7568 = x7567._1
val x7569 = x7567._2
val x7570 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7568,x7569)
val x7571 = x7564 + (x7563 -> x7570)
x5 = x7571
val x7574 = x5
val x7573 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))),x239,x7562)
val x7575 = x7574.contains(x7573)
val x7803 = if (x7575) {
val x7576 = x7574(x7573)
x7576
} else {
val x7577 = x248.getOrElse(x7573, x17)
val x7578 = x7577._1
val x7579 = x7577._2
val x7580 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7578,x7579)
val x7581 = x7574 + (x7573 -> x7580)
x5 = x7581
val x7583 = {(x7584:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x7585:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x7588 = Addr("s1")
val x7596 = x5
val x7590 = x239 + ("s1" -> x7588)
val x7587 = x7585
val x7586 = x7584
val x7591 = x7586.head
val x7592 = x7587.getOrElse(x7588, x15)
val x7593 = x7591.union(x7592)
val x7594 = x7587 + (x7588 -> x7593)
val x7595 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1")))),x7590,x7594)
val x7597 = x7596.contains(x7595)
val x7783 = if (x7597) {
val x7598 = x7596(x7595)
x7598
} else {
val x7599 = x4
val x7600 = x7599.getOrElse(x7595, x17)
val x7601 = x7600._1
val x7602 = x7600._2
val x7603 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7601,x7602)
val x7604 = x7596 + (x7595 -> x7603)
x5 = x7604
val x7606 = {(x7607:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x7608:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x7611 = Addr("s2")
val x7619 = x5
val x7613 = x7590 + ("s2" -> x7611)
val x7610 = x7608
val x7609 = x7607
val x7614 = x7609.head
val x7615 = x7610.getOrElse(x7611, x15)
val x7616 = x7614.union(x7615)
val x7617 = x7610 + (x7611 -> x7616)
val x7618 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))),x7613,x7617)
val x7620 = x7619.contains(x7618)
val x7763 = if (x7620) {
val x7621 = x7619(x7618)
x7621
} else {
val x7622 = x4
val x7623 = x7622.getOrElse(x7618, x17)
val x7624 = x7623._1
val x7625 = x7623._2
val x7626 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7624,x7625)
val x7627 = x7619 + (x7618 -> x7626)
x5 = x7627
val x7630 = x5
val x7629 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("s2"),List(Var("pred"))),x7613,x7617)
val x7631 = x7630.contains(x7629)
val x7714 = if (x7631) {
val x7632 = x7630(x7629)
x7632
} else {
val x7633 = x7622.getOrElse(x7629, x17)
val x7634 = x7633._1
val x7635 = x7633._2
val x7636 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7634,x7635)
val x7637 = x7630 + (x7629 -> x7636)
x5 = x7637
val x7640 = x5
val x7639 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("s2"),x7613,x7617)
val x7641 = x7640.contains(x7639)
val x7665 = if (x7641) {
val x7642 = x7640(x7639)
x7642
} else {
val x7643 = x7622.getOrElse(x7639, x17)
val x7644 = x7643._1
val x7645 = x7643._2
val x7646 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7644,x7645)
val x7647 = x7640 + (x7639 -> x7646)
x5 = x7647
val x7651 = x5
val x7649 = x7613("s2")
val x7650 = x7617.getOrElse(x7649, x15)
val x7652 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7650,x7617)
val x7653 = x7644.union(x7650)
val x7660 = x7617.foldLeft (x7645) { case (x7654, (x7655, x7656)) =>
val x7657 = x7654.getOrElse(x7655, x15)
val x7658 = x7657.union(x7656)
val x7659 = x7654 + (x7655 -> x7658)

x7659
}
val x7661 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7653,x7660)
val x7662 = x7651 + (x7639 -> x7661)
x5 = x7662
x7652
}
val x7669 = x5
val x7667 = x7665._2
val x7668 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("pred"),x7613,x7667)
val x7670 = x7669.contains(x7668)
val x7694 = if (x7670) {
val x7671 = x7669(x7668)
x7671
} else {
val x7672 = x7622.getOrElse(x7668, x17)
val x7673 = x7672._1
val x7674 = x7672._2
val x7675 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7673,x7674)
val x7676 = x7669 + (x7668 -> x7675)
x5 = x7676
val x7680 = x5
val x7678 = x7613("pred")
val x7679 = x7667.getOrElse(x7678, x15)
val x7681 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7679,x7667)
val x7682 = x7673.union(x7679)
val x7689 = x7667.foldLeft (x7674) { case (x7683, (x7684, x7685)) =>
val x7686 = x7683.getOrElse(x7684, x15)
val x7687 = x7686.union(x7685)
val x7688 = x7683 + (x7684 -> x7687)

x7688
}
val x7690 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7682,x7689)
val x7691 = x7680 + (x7668 -> x7690)
x5 = x7691
x7681
}
val x7666 = x7665._1
val x7695 = x7694._1
val x7696 = x7694._2
val x7697 = apply_closures_norep(x7666, List(x7695), x7696)
val x7700 = x5
val x7698 = x7697._1
val x7699 = x7697._2
val x7701 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7698,x7699)
val x7702 = x7634.union(x7698)
val x7709 = x7699.foldLeft (x7635) { case (x7703, (x7704, x7705)) =>
val x7706 = x7703.getOrElse(x7704, x15)
val x7707 = x7706.union(x7705)
val x7708 = x7703 + (x7704 -> x7707)

x7708
}
val x7710 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7702,x7709)
val x7711 = x7700 + (x7629 -> x7710)
x5 = x7711
x7701
}
val x7718 = x5
val x7716 = x7714._2
val x7717 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("s1"),x7613,x7716)
val x7719 = x7718.contains(x7717)
val x7743 = if (x7719) {
val x7720 = x7718(x7717)
x7720
} else {
val x7721 = x7622.getOrElse(x7717, x17)
val x7722 = x7721._1
val x7723 = x7721._2
val x7724 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7722,x7723)
val x7725 = x7718 + (x7717 -> x7724)
x5 = x7725
val x7729 = x5
val x7727 = x7613("s1")
val x7728 = x7716.getOrElse(x7727, x15)
val x7730 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7728,x7716)
val x7731 = x7722.union(x7728)
val x7738 = x7716.foldLeft (x7723) { case (x7732, (x7733, x7734)) =>
val x7735 = x7732.getOrElse(x7733, x15)
val x7736 = x7735.union(x7734)
val x7737 = x7732 + (x7733 -> x7736)

x7737
}
val x7739 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7731,x7738)
val x7740 = x7729 + (x7717 -> x7739)
x5 = x7740
x7730
}
val x7715 = x7714._1
val x7744 = x7743._1
val x7745 = x7743._2
val x7746 = apply_closures_norep(x7715, List(x7744), x7745)
val x7749 = x5
val x7747 = x7746._1
val x7748 = x7746._2
val x7750 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7747,x7748)
val x7751 = x7624.union(x7747)
val x7758 = x7748.foldLeft (x7625) { case (x7752, (x7753, x7754)) =>
val x7755 = x7752.getOrElse(x7753, x15)
val x7756 = x7755.union(x7754)
val x7757 = x7752 + (x7753 -> x7756)

x7757
}
val x7759 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7751,x7758)
val x7760 = x7749 + (x7618 -> x7759)
x5 = x7760
x7750
}
val x7764 = x7763._1
val x7765 = x7763._2
val x7766 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7764,x7765)
x7766: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7768 = Set[AbsValue](CompiledClo(x7606,Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1")))),x7590))
val x7769 = x5
val x7770 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7768,x7594)
val x7771 = x7601.union(x7768)
val x7778 = x7594.foldLeft (x7602) { case (x7772, (x7773, x7774)) =>
val x7775 = x7772.getOrElse(x7773, x15)
val x7776 = x7775.union(x7774)
val x7777 = x7772 + (x7773 -> x7776)

x7777
}
val x7779 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7771,x7778)
val x7780 = x7769 + (x7595 -> x7779)
x5 = x7780
x7770
}
val x7784 = x7783._1
val x7785 = x7783._2
val x7786 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7784,x7785)
x7786: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7788 = Set[AbsValue](CompiledClo(x7583,Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))),x239))
val x7789 = x5
val x7790 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7788,x7562)
val x7791 = x7578.union(x7788)
val x7798 = x7562.foldLeft (x7579) { case (x7792, (x7793, x7794)) =>
val x7795 = x7792.getOrElse(x7793, x15)
val x7796 = x7795.union(x7794)
val x7797 = x7792 + (x7793 -> x7796)

x7797
}
val x7799 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7791,x7798)
val x7800 = x7789 + (x7573 -> x7799)
x5 = x7800
x7790
}
val x7806 = Set[AbsValue](VoidV())
val x7811 = x5
val x7805 = x7803._2
val x7807 = x239("sub")
val x7804 = x7803._1
val x7808 = x7805.getOrElse(x7807, x15)
val x7809 = x7804.union(x7808)
val x7810 = x7805 + (x7807 -> x7809)
val x7812 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7806,x7810)
val x7813 = x7568.union(x7806)
val x7820 = x7810.foldLeft (x7569) { case (x7814, (x7815, x7816)) =>
val x7817 = x7814.getOrElse(x7815, x15)
val x7818 = x7817.union(x7816)
val x7819 = x7814 + (x7815 -> x7818)

x7819
}
val x7821 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7813,x7820)
val x7822 = x7811 + (x7563 -> x7821)
x5 = x7822
x7812
}
val x7561 = x7560._1
val x7826 = x7825._1
val x7827 = x7825._2
val x7828 = apply_closures_norep(x7561, List(x7826), x7827)
val x7831 = x5
val x7829 = x7828._1
val x7830 = x7828._2
val x7832 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7829,x7830)
val x7833 = x250.union(x7829)
val x7840 = x7830.foldLeft (x251) { case (x7834, (x7835, x7836)) =>
val x7837 = x7834.getOrElse(x7835, x15)
val x7838 = x7837.union(x7836)
val x7839 = x7834 + (x7835 -> x7838)

x7839
}
val x7841 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7833,x7840)
val x7842 = x7831 + (x244 -> x7841)
x5 = x7842
x7832
}
val x7846 = x7845._1
val x7847 = x7845._2
val x7848 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7846,x7847)
x7848: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7850 = Set[AbsValue](CompiledClo(x232,Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),x206))
val x7851 = x5
val x7852 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7850,x210)
val x7853 = x227.union(x7850)
val x7860 = x210.foldLeft (x228) { case (x7854, (x7855, x7856)) =>
val x7857 = x7854.getOrElse(x7855, x15)
val x7858 = x7857.union(x7856)
val x7859 = x7854 + (x7855 -> x7858)

x7859
}
val x7861 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7853,x7860)
val x7862 = x7851 + (x222 -> x7861)
x5 = x7862
x7852
}
val x7869 = x5
val x7867 = x7865._2
val x7868 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Void(),x206,x7867)
val x7870 = x7869.contains(x7868)
val x7893 = if (x7870) {
val x7871 = x7869(x7868)
x7871
} else {
val x7872 = x215.getOrElse(x7868, x17)
val x7873 = x7872._1
val x7874 = x7872._2
val x7875 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7873,x7874)
val x7876 = x7869 + (x7868 -> x7875)
x5 = x7876
val x7878 = Set[AbsValue](VoidV())
val x7879 = x5
val x7880 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7878,x7867)
val x7881 = x7873.union(x7878)
val x7888 = x7867.foldLeft (x7874) { case (x7882, (x7883, x7884)) =>
val x7885 = x7882.getOrElse(x7883, x15)
val x7886 = x7885.union(x7884)
val x7887 = x7882 + (x7883 -> x7886)

x7887
}
val x7889 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7881,x7888)
val x7890 = x7879 + (x7868 -> x7889)
x5 = x7890
x7880
}
val x7866 = x7865._1
val x7894 = x7893._1
val x7895 = x7893._2
val x7896 = apply_closures_norep(x7866, List(x7894), x7895)
val x7899 = x5
val x7897 = x7896._1
val x7898 = x7896._2
val x7900 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7897,x7898)
val x7901 = x217.union(x7897)
val x7908 = x7898.foldLeft (x218) { case (x7902, (x7903, x7904)) =>
val x7905 = x7902.getOrElse(x7903, x15)
val x7906 = x7905.union(x7904)
val x7907 = x7902 + (x7903 -> x7906)

x7907
}
val x7909 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7901,x7908)
val x7910 = x7899 + (x211 -> x7909)
x5 = x7910
x7900
}
val x7914 = x7913._1
val x7915 = x7913._2
val x7916 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7914,x7915)
x7916: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x7918 = Set[AbsValue](CompiledClo(x199,Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),x173))
val x7919 = x5
val x7920 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7918,x177)
val x7921 = x194.union(x7918)
val x7928 = x177.foldLeft (x195) { case (x7922, (x7923, x7924)) =>
val x7925 = x7922.getOrElse(x7923, x15)
val x7926 = x7925.union(x7924)
val x7927 = x7922 + (x7923 -> x7926)

x7927
}
val x7929 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7921,x7928)
val x7930 = x7919 + (x189 -> x7929)
x5 = x7930
x7920
}
val x7937 = x5
val x7935 = x7933._2
val x7936 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id")))))))),x173,x7935)
val x7938 = x7937.contains(x7936)
val x8590 = if (x7938) {
val x7939 = x7937(x7936)
x7939
} else {
val x7940 = x182.getOrElse(x7936, x17)
val x7941 = x7940._1
val x7942 = x7940._2
val x7943 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7941,x7942)
val x7944 = x7937 + (x7936 -> x7943)
x5 = x7944
val x7947 = x5
val x7946 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))),x173,x7935)
val x7948 = x7947.contains(x7946)
val x8568 = if (x7948) {
val x7949 = x7947(x7946)
x7949
} else {
val x7950 = x182.getOrElse(x7946, x17)
val x7951 = x7950._1
val x7952 = x7950._2
val x7953 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7951,x7952)
val x7954 = x7947 + (x7946 -> x7953)
x5 = x7954
val x7956 = {(x7957:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x7958:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x7961 = Addr("n")
val x7969 = x5
val x7963 = x173 + ("n" -> x7961)
val x7960 = x7958
val x7959 = x7957
val x7964 = x7959.head
val x7965 = x7960.getOrElse(x7961, x15)
val x7966 = x7964.union(x7965)
val x7967 = x7960 + (x7961 -> x7966)
val x7968 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id")))))),x7963,x7967)
val x7970 = x7969.contains(x7968)
val x8548 = if (x7970) {
val x7971 = x7969(x7968)
x7971
} else {
val x7972 = x4
val x7973 = x7972.getOrElse(x7968, x17)
val x7974 = x7973._1
val x7975 = x7973._2
val x7976 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7974,x7975)
val x7977 = x7969 + (x7968 -> x7976)
x5 = x7977
val x7979 = {(x7980:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x7981:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x7984 = Addr("rf")
val x7992 = x5
val x7986 = x7963 + ("rf" -> x7984)
val x7983 = x7981
val x7982 = x7980
val x7987 = x7982.head
val x7988 = x7983.getOrElse(x7984, x15)
val x7989 = x7987.union(x7988)
val x7990 = x7983 + (x7984 -> x7989)
val x7991 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))),x7986,x7990)
val x7993 = x7992.contains(x7991)
val x8528 = if (x7993) {
val x7994 = x7992(x7991)
x7994
} else {
val x7995 = x4
val x7996 = x7995.getOrElse(x7991, x17)
val x7997 = x7996._1
val x7998 = x7996._2
val x7999 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x7997,x7998)
val x8000 = x7992 + (x7991 -> x7999)
x5 = x8000
val x8002 = {(x8003:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x8004:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x8007 = Addr("rx")
val x8015 = x5
val x8009 = x7986 + ("rx" -> x8007)
val x8006 = x8004
val x8005 = x8003
val x8010 = x8005.head
val x8011 = x8006.getOrElse(x8007, x15)
val x8012 = x8010.union(x8011)
val x8013 = x8006 + (x8007 -> x8012)
val x8014 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id")))),x8009,x8013)
val x8016 = x8015.contains(x8014)
val x8508 = if (x8016) {
val x8017 = x8015(x8014)
x8017
} else {
val x8018 = x4
val x8019 = x8018.getOrElse(x8014, x17)
val x8020 = x8019._1
val x8021 = x8019._2
val x8022 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8020,x8021)
val x8023 = x8015 + (x8014 -> x8022)
x5 = x8023
val x8026 = x5
val x8025 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),x8009,x8013)
val x8027 = x8026.contains(x8025)
val x8416 = if (x8027) {
val x8028 = x8026(x8025)
x8028
} else {
val x8029 = x8018.getOrElse(x8025, x17)
val x8030 = x8029._1
val x8031 = x8029._2
val x8032 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8030,x8031)
val x8033 = x8026 + (x8025 -> x8032)
x5 = x8033
val x8036 = x5
val x8035 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),x8009,x8013)
val x8037 = x8036.contains(x8035)
val x8324 = if (x8037) {
val x8038 = x8036(x8035)
x8038
} else {
val x8039 = x8018.getOrElse(x8035, x17)
val x8040 = x8039._1
val x8041 = x8039._2
val x8042 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8040,x8041)
val x8043 = x8036 + (x8035 -> x8042)
x5 = x8043
val x8046 = x5
val x8045 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("n"),x8009,x8013)
val x8047 = x8046.contains(x8045)
val x8071 = if (x8047) {
val x8048 = x8046(x8045)
x8048
} else {
val x8049 = x8018.getOrElse(x8045, x17)
val x8050 = x8049._1
val x8051 = x8049._2
val x8052 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8050,x8051)
val x8053 = x8046 + (x8045 -> x8052)
x5 = x8053
val x8057 = x5
val x8055 = x8009("n")
val x8056 = x8013.getOrElse(x8055, x15)
val x8058 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8056,x8013)
val x8059 = x8050.union(x8056)
val x8066 = x8013.foldLeft (x8051) { case (x8060, (x8061, x8062)) =>
val x8063 = x8060.getOrElse(x8061, x15)
val x8064 = x8063.union(x8062)
val x8065 = x8060 + (x8061 -> x8064)

x8065
}
val x8067 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8059,x8066)
val x8068 = x8057 + (x8045 -> x8067)
x5 = x8068
x8058
}
val x8075 = x5
val x8073 = x8071._2
val x8074 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))),x8009,x8073)
val x8076 = x8075.contains(x8074)
val x8304 = if (x8076) {
val x8077 = x8075(x8074)
x8077
} else {
val x8078 = x8018.getOrElse(x8074, x17)
val x8079 = x8078._1
val x8080 = x8078._2
val x8081 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8079,x8080)
val x8082 = x8075 + (x8074 -> x8081)
x5 = x8082
val x8084 = {(x8085:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x8086:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x8089 = Addr("g")
val x8097 = x5
val x8091 = x8009 + ("g" -> x8089)
val x8088 = x8086
val x8087 = x8085
val x8092 = x8087.head
val x8093 = x8088.getOrElse(x8089, x15)
val x8094 = x8092.union(x8093)
val x8095 = x8088 + (x8089 -> x8094)
val x8096 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf")))))),x8091,x8095)
val x8098 = x8097.contains(x8096)
val x8284 = if (x8098) {
val x8099 = x8097(x8096)
x8099
} else {
val x8100 = x4
val x8101 = x8100.getOrElse(x8096, x17)
val x8102 = x8101._1
val x8103 = x8101._2
val x8104 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8102,x8103)
val x8105 = x8097 + (x8096 -> x8104)
x5 = x8105
val x8107 = {(x8108:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x8109:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x8112 = Addr("h")
val x8120 = x5
val x8114 = x8091 + ("h" -> x8112)
val x8111 = x8109
val x8110 = x8108
val x8115 = x8110.head
val x8116 = x8111.getOrElse(x8112, x15)
val x8117 = x8115.union(x8116)
val x8118 = x8111 + (x8112 -> x8117)
val x8119 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("h"),List(App(Var("g"),List(Var("rf"))))),x8114,x8118)
val x8121 = x8120.contains(x8119)
val x8264 = if (x8121) {
val x8122 = x8120(x8119)
x8122
} else {
val x8123 = x4
val x8124 = x8123.getOrElse(x8119, x17)
val x8125 = x8124._1
val x8126 = x8124._2
val x8127 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8125,x8126)
val x8128 = x8120 + (x8119 -> x8127)
x5 = x8128
val x8131 = x5
val x8130 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("h"),x8114,x8118)
val x8132 = x8131.contains(x8130)
val x8156 = if (x8132) {
val x8133 = x8131(x8130)
x8133
} else {
val x8134 = x8123.getOrElse(x8130, x17)
val x8135 = x8134._1
val x8136 = x8134._2
val x8137 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8135,x8136)
val x8138 = x8131 + (x8130 -> x8137)
x5 = x8138
val x8142 = x5
val x8140 = x8114("h")
val x8141 = x8118.getOrElse(x8140, x15)
val x8143 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8141,x8118)
val x8144 = x8135.union(x8141)
val x8151 = x8118.foldLeft (x8136) { case (x8145, (x8146, x8147)) =>
val x8148 = x8145.getOrElse(x8146, x15)
val x8149 = x8148.union(x8147)
val x8150 = x8145 + (x8146 -> x8149)

x8150
}
val x8152 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8144,x8151)
val x8153 = x8142 + (x8130 -> x8152)
x5 = x8153
x8143
}
val x8160 = x5
val x8158 = x8156._2
val x8159 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("g"),List(Var("rf"))),x8114,x8158)
val x8161 = x8160.contains(x8159)
val x8244 = if (x8161) {
val x8162 = x8160(x8159)
x8162
} else {
val x8163 = x8123.getOrElse(x8159, x17)
val x8164 = x8163._1
val x8165 = x8163._2
val x8166 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8164,x8165)
val x8167 = x8160 + (x8159 -> x8166)
x5 = x8167
val x8170 = x5
val x8169 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("g"),x8114,x8158)
val x8171 = x8170.contains(x8169)
val x8195 = if (x8171) {
val x8172 = x8170(x8169)
x8172
} else {
val x8173 = x8123.getOrElse(x8169, x17)
val x8174 = x8173._1
val x8175 = x8173._2
val x8176 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8174,x8175)
val x8177 = x8170 + (x8169 -> x8176)
x5 = x8177
val x8181 = x5
val x8179 = x8114("g")
val x8180 = x8158.getOrElse(x8179, x15)
val x8182 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8180,x8158)
val x8183 = x8174.union(x8180)
val x8190 = x8158.foldLeft (x8175) { case (x8184, (x8185, x8186)) =>
val x8187 = x8184.getOrElse(x8185, x15)
val x8188 = x8187.union(x8186)
val x8189 = x8184 + (x8185 -> x8188)

x8189
}
val x8191 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8183,x8190)
val x8192 = x8181 + (x8169 -> x8191)
x5 = x8192
x8182
}
val x8199 = x5
val x8197 = x8195._2
val x8198 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("rf"),x8114,x8197)
val x8200 = x8199.contains(x8198)
val x8224 = if (x8200) {
val x8201 = x8199(x8198)
x8201
} else {
val x8202 = x8123.getOrElse(x8198, x17)
val x8203 = x8202._1
val x8204 = x8202._2
val x8205 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8203,x8204)
val x8206 = x8199 + (x8198 -> x8205)
x5 = x8206
val x8210 = x5
val x8208 = x8114("rf")
val x8209 = x8197.getOrElse(x8208, x15)
val x8211 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8209,x8197)
val x8212 = x8203.union(x8209)
val x8219 = x8197.foldLeft (x8204) { case (x8213, (x8214, x8215)) =>
val x8216 = x8213.getOrElse(x8214, x15)
val x8217 = x8216.union(x8215)
val x8218 = x8213 + (x8214 -> x8217)

x8218
}
val x8220 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8212,x8219)
val x8221 = x8210 + (x8198 -> x8220)
x5 = x8221
x8211
}
val x8196 = x8195._1
val x8225 = x8224._1
val x8226 = x8224._2
val x8227 = apply_closures_norep(x8196, List(x8225), x8226)
val x8230 = x5
val x8228 = x8227._1
val x8229 = x8227._2
val x8231 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8228,x8229)
val x8232 = x8164.union(x8228)
val x8239 = x8229.foldLeft (x8165) { case (x8233, (x8234, x8235)) =>
val x8236 = x8233.getOrElse(x8234, x15)
val x8237 = x8236.union(x8235)
val x8238 = x8233 + (x8234 -> x8237)

x8238
}
val x8240 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8232,x8239)
val x8241 = x8230 + (x8159 -> x8240)
x5 = x8241
x8231
}
val x8157 = x8156._1
val x8245 = x8244._1
val x8246 = x8244._2
val x8247 = apply_closures_norep(x8157, List(x8245), x8246)
val x8250 = x5
val x8248 = x8247._1
val x8249 = x8247._2
val x8251 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8248,x8249)
val x8252 = x8125.union(x8248)
val x8259 = x8249.foldLeft (x8126) { case (x8253, (x8254, x8255)) =>
val x8256 = x8253.getOrElse(x8254, x15)
val x8257 = x8256.union(x8255)
val x8258 = x8253 + (x8254 -> x8257)

x8258
}
val x8260 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8252,x8259)
val x8261 = x8250 + (x8119 -> x8260)
x5 = x8261
x8251
}
val x8265 = x8264._1
val x8266 = x8264._2
val x8267 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8265,x8266)
x8267: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8269 = Set[AbsValue](CompiledClo(x8107,Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf")))))),x8091))
val x8270 = x5
val x8271 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8269,x8095)
val x8272 = x8102.union(x8269)
val x8279 = x8095.foldLeft (x8103) { case (x8273, (x8274, x8275)) =>
val x8276 = x8273.getOrElse(x8274, x15)
val x8277 = x8276.union(x8275)
val x8278 = x8273 + (x8274 -> x8277)

x8278
}
val x8280 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8272,x8279)
val x8281 = x8270 + (x8096 -> x8280)
x5 = x8281
x8271
}
val x8285 = x8284._1
val x8286 = x8284._2
val x8287 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8285,x8286)
x8287: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8289 = Set[AbsValue](CompiledClo(x8084,Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))),x8009))
val x8290 = x5
val x8291 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8289,x8073)
val x8292 = x8079.union(x8289)
val x8299 = x8073.foldLeft (x8080) { case (x8293, (x8294, x8295)) =>
val x8296 = x8293.getOrElse(x8294, x15)
val x8297 = x8296.union(x8295)
val x8298 = x8293 + (x8294 -> x8297)

x8298
}
val x8300 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8292,x8299)
val x8301 = x8290 + (x8074 -> x8300)
x5 = x8301
x8291
}
val x8072 = x8071._1
val x8305 = x8304._1
val x8306 = x8304._2
val x8307 = apply_closures_norep(x8072, List(x8305), x8306)
val x8310 = x5
val x8308 = x8307._1
val x8309 = x8307._2
val x8311 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8308,x8309)
val x8312 = x8040.union(x8308)
val x8319 = x8309.foldLeft (x8041) { case (x8313, (x8314, x8315)) =>
val x8316 = x8313.getOrElse(x8314, x15)
val x8317 = x8316.union(x8315)
val x8318 = x8313 + (x8314 -> x8317)

x8318
}
val x8320 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8312,x8319)
val x8321 = x8310 + (x8035 -> x8320)
x5 = x8321
x8311
}
val x8328 = x5
val x8326 = x8324._2
val x8327 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("ignored"), Var("rx")),x8009,x8326)
val x8329 = x8328.contains(x8327)
val x8396 = if (x8329) {
val x8330 = x8328(x8327)
x8330
} else {
val x8331 = x8018.getOrElse(x8327, x17)
val x8332 = x8331._1
val x8333 = x8331._2
val x8334 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8332,x8333)
val x8335 = x8328 + (x8327 -> x8334)
x5 = x8335
val x8337 = {(x8338:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x8339:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x8342 = Addr("ignored")
val x8350 = x5
val x8344 = x8009 + ("ignored" -> x8342)
val x8341 = x8339
val x8340 = x8338
val x8345 = x8340.head
val x8346 = x8341.getOrElse(x8342, x15)
val x8347 = x8345.union(x8346)
val x8348 = x8341 + (x8342 -> x8347)
val x8349 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("rx"),x8344,x8348)
val x8351 = x8350.contains(x8349)
val x8376 = if (x8351) {
val x8352 = x8350(x8349)
x8352
} else {
val x8353 = x4
val x8354 = x8353.getOrElse(x8349, x17)
val x8355 = x8354._1
val x8356 = x8354._2
val x8357 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8355,x8356)
val x8358 = x8350 + (x8349 -> x8357)
x5 = x8358
val x8362 = x5
val x8360 = x8344("rx")
val x8361 = x8348.getOrElse(x8360, x15)
val x8363 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8361,x8348)
val x8364 = x8355.union(x8361)
val x8371 = x8348.foldLeft (x8356) { case (x8365, (x8366, x8367)) =>
val x8368 = x8365.getOrElse(x8366, x15)
val x8369 = x8368.union(x8367)
val x8370 = x8365 + (x8366 -> x8369)

x8370
}
val x8372 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8364,x8371)
val x8373 = x8362 + (x8349 -> x8372)
x5 = x8373
x8363
}
val x8377 = x8376._1
val x8378 = x8376._2
val x8379 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8377,x8378)
x8379: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8381 = Set[AbsValue](CompiledClo(x8337,Lam(List("ignored"), Var("rx")),x8009))
val x8382 = x5
val x8383 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8381,x8326)
val x8384 = x8332.union(x8381)
val x8391 = x8326.foldLeft (x8333) { case (x8385, (x8386, x8387)) =>
val x8388 = x8385.getOrElse(x8386, x15)
val x8389 = x8388.union(x8387)
val x8390 = x8385 + (x8386 -> x8389)

x8390
}
val x8392 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8384,x8391)
val x8393 = x8382 + (x8327 -> x8392)
x5 = x8393
x8383
}
val x8325 = x8324._1
val x8397 = x8396._1
val x8398 = x8396._2
val x8399 = apply_closures_norep(x8325, List(x8397), x8398)
val x8402 = x5
val x8400 = x8399._1
val x8401 = x8399._2
val x8403 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8400,x8401)
val x8404 = x8030.union(x8400)
val x8411 = x8401.foldLeft (x8031) { case (x8405, (x8406, x8407)) =>
val x8408 = x8405.getOrElse(x8406, x15)
val x8409 = x8408.union(x8407)
val x8410 = x8405 + (x8406 -> x8409)

x8410
}
val x8412 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8404,x8411)
val x8413 = x8402 + (x8025 -> x8412)
x5 = x8413
x8403
}
val x8420 = x5
val x8418 = x8416._2
val x8419 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("id"), Var("id")),x8009,x8418)
val x8421 = x8420.contains(x8419)
val x8488 = if (x8421) {
val x8422 = x8420(x8419)
x8422
} else {
val x8423 = x8018.getOrElse(x8419, x17)
val x8424 = x8423._1
val x8425 = x8423._2
val x8426 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8424,x8425)
val x8427 = x8420 + (x8419 -> x8426)
x5 = x8427
val x8429 = {(x8430:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x8431:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x8434 = Addr("id")
val x8442 = x5
val x8436 = x8009 + ("id" -> x8434)
val x8433 = x8431
val x8432 = x8430
val x8437 = x8432.head
val x8438 = x8433.getOrElse(x8434, x15)
val x8439 = x8437.union(x8438)
val x8440 = x8433 + (x8434 -> x8439)
val x8441 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("id"),x8436,x8440)
val x8443 = x8442.contains(x8441)
val x8468 = if (x8443) {
val x8444 = x8442(x8441)
x8444
} else {
val x8445 = x4
val x8446 = x8445.getOrElse(x8441, x17)
val x8447 = x8446._1
val x8448 = x8446._2
val x8449 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8447,x8448)
val x8450 = x8442 + (x8441 -> x8449)
x5 = x8450
val x8454 = x5
val x8452 = x8436("id")
val x8453 = x8440.getOrElse(x8452, x15)
val x8455 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8453,x8440)
val x8456 = x8447.union(x8453)
val x8463 = x8440.foldLeft (x8448) { case (x8457, (x8458, x8459)) =>
val x8460 = x8457.getOrElse(x8458, x15)
val x8461 = x8460.union(x8459)
val x8462 = x8457 + (x8458 -> x8461)

x8462
}
val x8464 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8456,x8463)
val x8465 = x8454 + (x8441 -> x8464)
x5 = x8465
x8455
}
val x8469 = x8468._1
val x8470 = x8468._2
val x8471 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8469,x8470)
x8471: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8473 = Set[AbsValue](CompiledClo(x8429,Lam(List("id"), Var("id")),x8009))
val x8474 = x5
val x8475 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8473,x8418)
val x8476 = x8424.union(x8473)
val x8483 = x8418.foldLeft (x8425) { case (x8477, (x8478, x8479)) =>
val x8480 = x8477.getOrElse(x8478, x15)
val x8481 = x8480.union(x8479)
val x8482 = x8477 + (x8478 -> x8481)

x8482
}
val x8484 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8476,x8483)
val x8485 = x8474 + (x8419 -> x8484)
x5 = x8485
x8475
}
val x8417 = x8416._1
val x8489 = x8488._1
val x8490 = x8488._2
val x8491 = apply_closures_norep(x8417, List(x8489), x8490)
val x8494 = x5
val x8492 = x8491._1
val x8493 = x8491._2
val x8495 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8492,x8493)
val x8496 = x8020.union(x8492)
val x8503 = x8493.foldLeft (x8021) { case (x8497, (x8498, x8499)) =>
val x8500 = x8497.getOrElse(x8498, x15)
val x8501 = x8500.union(x8499)
val x8502 = x8497 + (x8498 -> x8501)

x8502
}
val x8504 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8496,x8503)
val x8505 = x8494 + (x8014 -> x8504)
x5 = x8505
x8495
}
val x8509 = x8508._1
val x8510 = x8508._2
val x8511 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8509,x8510)
x8511: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8513 = Set[AbsValue](CompiledClo(x8002,Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))),x7986))
val x8514 = x5
val x8515 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8513,x7990)
val x8516 = x7997.union(x8513)
val x8523 = x7990.foldLeft (x7998) { case (x8517, (x8518, x8519)) =>
val x8520 = x8517.getOrElse(x8518, x15)
val x8521 = x8520.union(x8519)
val x8522 = x8517 + (x8518 -> x8521)

x8522
}
val x8524 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8516,x8523)
val x8525 = x8514 + (x7991 -> x8524)
x5 = x8525
x8515
}
val x8529 = x8528._1
val x8530 = x8528._2
val x8531 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8529,x8530)
x8531: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8533 = Set[AbsValue](CompiledClo(x7979,Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id")))))),x7963))
val x8534 = x5
val x8535 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8533,x7967)
val x8536 = x7974.union(x8533)
val x8543 = x7967.foldLeft (x7975) { case (x8537, (x8538, x8539)) =>
val x8540 = x8537.getOrElse(x8538, x15)
val x8541 = x8540.union(x8539)
val x8542 = x8537 + (x8538 -> x8541)

x8542
}
val x8544 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8536,x8543)
val x8545 = x8534 + (x7968 -> x8544)
x5 = x8545
x8535
}
val x8549 = x8548._1
val x8550 = x8548._2
val x8551 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8549,x8550)
x8551: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8553 = Set[AbsValue](CompiledClo(x7956,Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))),x173))
val x8554 = x5
val x8555 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8553,x7935)
val x8556 = x7951.union(x8553)
val x8563 = x7935.foldLeft (x7952) { case (x8557, (x8558, x8559)) =>
val x8560 = x8557.getOrElse(x8558, x15)
val x8561 = x8560.union(x8559)
val x8562 = x8557 + (x8558 -> x8561)

x8562
}
val x8564 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8556,x8563)
val x8565 = x8554 + (x7946 -> x8564)
x5 = x8565
x8555
}
val x8571 = Set[AbsValue](VoidV())
val x8576 = x5
val x8570 = x8568._2
val x8572 = x173("pred")
val x8569 = x8568._1
val x8573 = x8570.getOrElse(x8572, x15)
val x8574 = x8569.union(x8573)
val x8575 = x8570 + (x8572 -> x8574)
val x8577 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8571,x8575)
val x8578 = x7941.union(x8571)
val x8585 = x8575.foldLeft (x7942) { case (x8579, (x8580, x8581)) =>
val x8582 = x8579.getOrElse(x8580, x15)
val x8583 = x8582.union(x8581)
val x8584 = x8579 + (x8580 -> x8583)

x8584
}
val x8586 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8578,x8585)
val x8587 = x8576 + (x7936 -> x8586)
x5 = x8587
x8577
}
val x7934 = x7933._1
val x8591 = x8590._1
val x8592 = x8590._2
val x8593 = apply_closures_norep(x7934, List(x8591), x8592)
val x8596 = x5
val x8594 = x8593._1
val x8595 = x8593._2
val x8597 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8594,x8595)
val x8598 = x184.union(x8594)
val x8605 = x8595.foldLeft (x185) { case (x8599, (x8600, x8601)) =>
val x8602 = x8599.getOrElse(x8600, x15)
val x8603 = x8602.union(x8601)
val x8604 = x8599 + (x8600 -> x8603)

x8604
}
val x8606 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8598,x8605)
val x8607 = x8596 + (x178 -> x8606)
x5 = x8607
x8597
}
val x8611 = x8610._1
val x8612 = x8610._2
val x8613 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8611,x8612)
x8613: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8615 = Set[AbsValue](CompiledClo(x166,Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),x140))
val x8616 = x5
val x8617 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8615,x144)
val x8618 = x161.union(x8615)
val x8625 = x144.foldLeft (x162) { case (x8619, (x8620, x8621)) =>
val x8622 = x8619.getOrElse(x8620, x15)
val x8623 = x8622.union(x8621)
val x8624 = x8619 + (x8620 -> x8623)

x8624
}
val x8626 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8618,x8625)
val x8627 = x8616 + (x156 -> x8626)
x5 = x8627
x8617
}
val x8634 = x5
val x8632 = x8630._2
val x8633 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Void(),x140,x8632)
val x8635 = x8634.contains(x8633)
val x8658 = if (x8635) {
val x8636 = x8634(x8633)
x8636
} else {
val x8637 = x149.getOrElse(x8633, x17)
val x8638 = x8637._1
val x8639 = x8637._2
val x8640 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8638,x8639)
val x8641 = x8634 + (x8633 -> x8640)
x5 = x8641
val x8643 = Set[AbsValue](VoidV())
val x8644 = x5
val x8645 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8643,x8632)
val x8646 = x8638.union(x8643)
val x8653 = x8632.foldLeft (x8639) { case (x8647, (x8648, x8649)) =>
val x8650 = x8647.getOrElse(x8648, x15)
val x8651 = x8650.union(x8649)
val x8652 = x8647 + (x8648 -> x8651)

x8652
}
val x8654 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8646,x8653)
val x8655 = x8644 + (x8633 -> x8654)
x5 = x8655
x8645
}
val x8631 = x8630._1
val x8659 = x8658._1
val x8660 = x8658._2
val x8661 = apply_closures_norep(x8631, List(x8659), x8660)
val x8664 = x5
val x8662 = x8661._1
val x8663 = x8661._2
val x8665 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8662,x8663)
val x8666 = x151.union(x8662)
val x8673 = x8663.foldLeft (x152) { case (x8667, (x8668, x8669)) =>
val x8670 = x8667.getOrElse(x8668, x15)
val x8671 = x8670.union(x8669)
val x8672 = x8667 + (x8668 -> x8671)

x8672
}
val x8674 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8666,x8673)
val x8675 = x8664 + (x145 -> x8674)
x5 = x8675
x8665
}
val x8679 = x8678._1
val x8680 = x8678._2
val x8681 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8679,x8680)
x8681: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8683 = Set[AbsValue](CompiledClo(x133,Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),x107))
val x8684 = x5
val x8685 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8683,x111)
val x8686 = x128.union(x8683)
val x8693 = x111.foldLeft (x129) { case (x8687, (x8688, x8689)) =>
val x8690 = x8687.getOrElse(x8688, x15)
val x8691 = x8690.union(x8689)
val x8692 = x8687 + (x8688 -> x8691)

x8692
}
val x8694 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8686,x8693)
val x8695 = x8684 + (x123 -> x8694)
x5 = x8695
x8685
}
val x8702 = x5
val x8700 = x8698._2
val x8701 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf"))))))))),x107,x8700)
val x8703 = x8702.contains(x8701)
val x9006 = if (x8703) {
val x8704 = x8702(x8701)
x8704
} else {
val x8705 = x116.getOrElse(x8701, x17)
val x8706 = x8705._1
val x8707 = x8705._2
val x8708 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8706,x8707)
val x8709 = x8702 + (x8701 -> x8708)
x5 = x8709
val x8712 = x5
val x8711 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))),x107,x8700)
val x8713 = x8712.contains(x8711)
val x8984 = if (x8713) {
val x8714 = x8712(x8711)
x8714
} else {
val x8715 = x116.getOrElse(x8711, x17)
val x8716 = x8715._1
val x8717 = x8715._2
val x8718 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8716,x8717)
val x8719 = x8712 + (x8711 -> x8718)
x5 = x8719
val x8721 = {(x8722:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x8723:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x8726 = Addr("m1")
val x8734 = x5
val x8728 = x107 + ("m1" -> x8726)
val x8725 = x8723
val x8724 = x8722
val x8729 = x8724.head
val x8730 = x8725.getOrElse(x8726, x15)
val x8731 = x8729.union(x8730)
val x8732 = x8725 + (x8726 -> x8731)
val x8733 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf"))))))),x8728,x8732)
val x8735 = x8734.contains(x8733)
val x8964 = if (x8735) {
val x8736 = x8734(x8733)
x8736
} else {
val x8737 = x4
val x8738 = x8737.getOrElse(x8733, x17)
val x8739 = x8738._1
val x8740 = x8738._2
val x8741 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8739,x8740)
val x8742 = x8734 + (x8733 -> x8741)
x5 = x8742
val x8744 = {(x8745:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x8746:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x8749 = Addr("m2")
val x8757 = x5
val x8751 = x8728 + ("m2" -> x8749)
val x8748 = x8746
val x8747 = x8745
val x8752 = x8747.head
val x8753 = x8748.getOrElse(x8749, x15)
val x8754 = x8752.union(x8753)
val x8755 = x8748 + (x8749 -> x8754)
val x8756 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))),x8751,x8755)
val x8758 = x8757.contains(x8756)
val x8944 = if (x8758) {
val x8759 = x8757(x8756)
x8759
} else {
val x8760 = x4
val x8761 = x8760.getOrElse(x8756, x17)
val x8762 = x8761._1
val x8763 = x8761._2
val x8764 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8762,x8763)
val x8765 = x8757 + (x8756 -> x8764)
x5 = x8765
val x8767 = {(x8768:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x8769:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x8772 = Addr("mf")
val x8780 = x5
val x8774 = x8751 + ("mf" -> x8772)
val x8771 = x8769
val x8770 = x8768
val x8775 = x8770.head
val x8776 = x8771.getOrElse(x8772, x15)
val x8777 = x8775.union(x8776)
val x8778 = x8771 + (x8772 -> x8777)
val x8779 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("m2"),List(App(Var("m1"),List(Var("mf"))))),x8774,x8778)
val x8781 = x8780.contains(x8779)
val x8924 = if (x8781) {
val x8782 = x8780(x8779)
x8782
} else {
val x8783 = x4
val x8784 = x8783.getOrElse(x8779, x17)
val x8785 = x8784._1
val x8786 = x8784._2
val x8787 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8785,x8786)
val x8788 = x8780 + (x8779 -> x8787)
x5 = x8788
val x8791 = x5
val x8790 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("m2"),x8774,x8778)
val x8792 = x8791.contains(x8790)
val x8816 = if (x8792) {
val x8793 = x8791(x8790)
x8793
} else {
val x8794 = x8783.getOrElse(x8790, x17)
val x8795 = x8794._1
val x8796 = x8794._2
val x8797 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8795,x8796)
val x8798 = x8791 + (x8790 -> x8797)
x5 = x8798
val x8802 = x5
val x8800 = x8774("m2")
val x8801 = x8778.getOrElse(x8800, x15)
val x8803 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8801,x8778)
val x8804 = x8795.union(x8801)
val x8811 = x8778.foldLeft (x8796) { case (x8805, (x8806, x8807)) =>
val x8808 = x8805.getOrElse(x8806, x15)
val x8809 = x8808.union(x8807)
val x8810 = x8805 + (x8806 -> x8809)

x8810
}
val x8812 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8804,x8811)
val x8813 = x8802 + (x8790 -> x8812)
x5 = x8813
x8803
}
val x8820 = x5
val x8818 = x8816._2
val x8819 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("m1"),List(Var("mf"))),x8774,x8818)
val x8821 = x8820.contains(x8819)
val x8904 = if (x8821) {
val x8822 = x8820(x8819)
x8822
} else {
val x8823 = x8783.getOrElse(x8819, x17)
val x8824 = x8823._1
val x8825 = x8823._2
val x8826 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8824,x8825)
val x8827 = x8820 + (x8819 -> x8826)
x5 = x8827
val x8830 = x5
val x8829 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("m1"),x8774,x8818)
val x8831 = x8830.contains(x8829)
val x8855 = if (x8831) {
val x8832 = x8830(x8829)
x8832
} else {
val x8833 = x8783.getOrElse(x8829, x17)
val x8834 = x8833._1
val x8835 = x8833._2
val x8836 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8834,x8835)
val x8837 = x8830 + (x8829 -> x8836)
x5 = x8837
val x8841 = x5
val x8839 = x8774("m1")
val x8840 = x8818.getOrElse(x8839, x15)
val x8842 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8840,x8818)
val x8843 = x8834.union(x8840)
val x8850 = x8818.foldLeft (x8835) { case (x8844, (x8845, x8846)) =>
val x8847 = x8844.getOrElse(x8845, x15)
val x8848 = x8847.union(x8846)
val x8849 = x8844 + (x8845 -> x8848)

x8849
}
val x8851 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8843,x8850)
val x8852 = x8841 + (x8829 -> x8851)
x5 = x8852
x8842
}
val x8859 = x5
val x8857 = x8855._2
val x8858 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("mf"),x8774,x8857)
val x8860 = x8859.contains(x8858)
val x8884 = if (x8860) {
val x8861 = x8859(x8858)
x8861
} else {
val x8862 = x8783.getOrElse(x8858, x17)
val x8863 = x8862._1
val x8864 = x8862._2
val x8865 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8863,x8864)
val x8866 = x8859 + (x8858 -> x8865)
x5 = x8866
val x8870 = x5
val x8868 = x8774("mf")
val x8869 = x8857.getOrElse(x8868, x15)
val x8871 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8869,x8857)
val x8872 = x8863.union(x8869)
val x8879 = x8857.foldLeft (x8864) { case (x8873, (x8874, x8875)) =>
val x8876 = x8873.getOrElse(x8874, x15)
val x8877 = x8876.union(x8875)
val x8878 = x8873 + (x8874 -> x8877)

x8878
}
val x8880 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8872,x8879)
val x8881 = x8870 + (x8858 -> x8880)
x5 = x8881
x8871
}
val x8856 = x8855._1
val x8885 = x8884._1
val x8886 = x8884._2
val x8887 = apply_closures_norep(x8856, List(x8885), x8886)
val x8890 = x5
val x8888 = x8887._1
val x8889 = x8887._2
val x8891 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8888,x8889)
val x8892 = x8824.union(x8888)
val x8899 = x8889.foldLeft (x8825) { case (x8893, (x8894, x8895)) =>
val x8896 = x8893.getOrElse(x8894, x15)
val x8897 = x8896.union(x8895)
val x8898 = x8893 + (x8894 -> x8897)

x8898
}
val x8900 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8892,x8899)
val x8901 = x8890 + (x8819 -> x8900)
x5 = x8901
x8891
}
val x8817 = x8816._1
val x8905 = x8904._1
val x8906 = x8904._2
val x8907 = apply_closures_norep(x8817, List(x8905), x8906)
val x8910 = x5
val x8908 = x8907._1
val x8909 = x8907._2
val x8911 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8908,x8909)
val x8912 = x8785.union(x8908)
val x8919 = x8909.foldLeft (x8786) { case (x8913, (x8914, x8915)) =>
val x8916 = x8913.getOrElse(x8914, x15)
val x8917 = x8916.union(x8915)
val x8918 = x8913 + (x8914 -> x8917)

x8918
}
val x8920 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8912,x8919)
val x8921 = x8910 + (x8779 -> x8920)
x5 = x8921
x8911
}
val x8925 = x8924._1
val x8926 = x8924._2
val x8927 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8925,x8926)
x8927: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8929 = Set[AbsValue](CompiledClo(x8767,Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))),x8751))
val x8930 = x5
val x8931 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8929,x8755)
val x8932 = x8762.union(x8929)
val x8939 = x8755.foldLeft (x8763) { case (x8933, (x8934, x8935)) =>
val x8936 = x8933.getOrElse(x8934, x15)
val x8937 = x8936.union(x8935)
val x8938 = x8933 + (x8934 -> x8937)

x8938
}
val x8940 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8932,x8939)
val x8941 = x8930 + (x8756 -> x8940)
x5 = x8941
x8931
}
val x8945 = x8944._1
val x8946 = x8944._2
val x8947 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8945,x8946)
x8947: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8949 = Set[AbsValue](CompiledClo(x8744,Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf"))))))),x8728))
val x8950 = x5
val x8951 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8949,x8732)
val x8952 = x8739.union(x8949)
val x8959 = x8732.foldLeft (x8740) { case (x8953, (x8954, x8955)) =>
val x8956 = x8953.getOrElse(x8954, x15)
val x8957 = x8956.union(x8955)
val x8958 = x8953 + (x8954 -> x8957)

x8958
}
val x8960 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8952,x8959)
val x8961 = x8950 + (x8733 -> x8960)
x5 = x8961
x8951
}
val x8965 = x8964._1
val x8966 = x8964._2
val x8967 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8965,x8966)
x8967: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x8969 = Set[AbsValue](CompiledClo(x8721,Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))),x107))
val x8970 = x5
val x8971 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8969,x8700)
val x8972 = x8716.union(x8969)
val x8979 = x8700.foldLeft (x8717) { case (x8973, (x8974, x8975)) =>
val x8976 = x8973.getOrElse(x8974, x15)
val x8977 = x8976.union(x8975)
val x8978 = x8973 + (x8974 -> x8977)

x8978
}
val x8980 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8972,x8979)
val x8981 = x8970 + (x8711 -> x8980)
x5 = x8981
x8971
}
val x8987 = Set[AbsValue](VoidV())
val x8992 = x5
val x8986 = x8984._2
val x8988 = x107("mult")
val x8985 = x8984._1
val x8989 = x8986.getOrElse(x8988, x15)
val x8990 = x8985.union(x8989)
val x8991 = x8986 + (x8988 -> x8990)
val x8993 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8987,x8991)
val x8994 = x8706.union(x8987)
val x9001 = x8991.foldLeft (x8707) { case (x8995, (x8996, x8997)) =>
val x8998 = x8995.getOrElse(x8996, x15)
val x8999 = x8998.union(x8997)
val x9000 = x8995 + (x8996 -> x8999)

x9000
}
val x9002 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x8994,x9001)
val x9003 = x8992 + (x8701 -> x9002)
x5 = x9003
x8993
}
val x8699 = x8698._1
val x9007 = x9006._1
val x9008 = x9006._2
val x9009 = apply_closures_norep(x8699, List(x9007), x9008)
val x9012 = x5
val x9010 = x9009._1
val x9011 = x9009._2
val x9013 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9010,x9011)
val x9014 = x118.union(x9010)
val x9021 = x9011.foldLeft (x119) { case (x9015, (x9016, x9017)) =>
val x9018 = x9015.getOrElse(x9016, x15)
val x9019 = x9018.union(x9017)
val x9020 = x9015 + (x9016 -> x9019)

x9020
}
val x9022 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9014,x9021)
val x9023 = x9012 + (x112 -> x9022)
x5 = x9023
x9013
}
val x9027 = x9026._1
val x9028 = x9026._2
val x9029 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9027,x9028)
x9029: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x9031 = Set[AbsValue](CompiledClo(x100,Lam(List("mult"), App(Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),List(Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))))))),x74))
val x9032 = x5
val x9033 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9031,x78)
val x9034 = x95.union(x9031)
val x9041 = x78.foldLeft (x96) { case (x9035, (x9036, x9037)) =>
val x9038 = x9035.getOrElse(x9036, x15)
val x9039 = x9038.union(x9037)
val x9040 = x9035 + (x9036 -> x9039)

x9040
}
val x9042 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9034,x9041)
val x9043 = x9032 + (x90 -> x9042)
x5 = x9043
x9033
}
val x9050 = x5
val x9048 = x9046._2
val x9049 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Void(),x74,x9048)
val x9051 = x9050.contains(x9049)
val x9074 = if (x9051) {
val x9052 = x9050(x9049)
x9052
} else {
val x9053 = x83.getOrElse(x9049, x17)
val x9054 = x9053._1
val x9055 = x9053._2
val x9056 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9054,x9055)
val x9057 = x9050 + (x9049 -> x9056)
x5 = x9057
val x9059 = Set[AbsValue](VoidV())
val x9060 = x5
val x9061 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9059,x9048)
val x9062 = x9054.union(x9059)
val x9069 = x9048.foldLeft (x9055) { case (x9063, (x9064, x9065)) =>
val x9066 = x9063.getOrElse(x9064, x15)
val x9067 = x9066.union(x9065)
val x9068 = x9063 + (x9064 -> x9067)

x9068
}
val x9070 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9062,x9069)
val x9071 = x9060 + (x9049 -> x9070)
x5 = x9071
x9061
}
val x9047 = x9046._1
val x9075 = x9074._1
val x9076 = x9074._2
val x9077 = apply_closures_norep(x9047, List(x9075), x9076)
val x9080 = x5
val x9078 = x9077._1
val x9079 = x9077._2
val x9081 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9078,x9079)
val x9082 = x85.union(x9078)
val x9089 = x9079.foldLeft (x86) { case (x9083, (x9084, x9085)) =>
val x9086 = x9083.getOrElse(x9084, x15)
val x9087 = x9086.union(x9085)
val x9088 = x9083 + (x9084 -> x9087)

x9088
}
val x9090 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9082,x9089)
val x9091 = x9080 + (x79 -> x9090)
x5 = x9091
x9081
}
val x9095 = x9094._1
val x9096 = x9094._2
val x9097 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9095,x9096)
x9097: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x9099 = Set[AbsValue](CompiledClo(x67,Lam(List("__$0"), App(Lam(List("mult"), App(Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),List(Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))))))),List(Void()))),x41))
val x9100 = x5
val x9101 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9099,x45)
val x9102 = x62.union(x9099)
val x9109 = x45.foldLeft (x63) { case (x9103, (x9104, x9105)) =>
val x9106 = x9103.getOrElse(x9104, x15)
val x9107 = x9106.union(x9105)
val x9108 = x9103 + (x9104 -> x9107)

x9108
}
val x9110 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9102,x9109)
val x9111 = x9100 + (x57 -> x9110)
x5 = x9111
x9101
}
val x9118 = x5
val x9116 = x9114._2
val x9117 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Set_!("plus", Lam(List("p1"), Lam(List("p2"), Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x")))))))))),x41,x9116)
val x9119 = x9118.contains(x9117)
val x9582 = if (x9119) {
val x9120 = x9118(x9117)
x9120
} else {
val x9121 = x50.getOrElse(x9117, x17)
val x9122 = x9121._1
val x9123 = x9121._2
val x9124 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9122,x9123)
val x9125 = x9118 + (x9117 -> x9124)
x5 = x9125
val x9128 = x5
val x9127 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("p1"), Lam(List("p2"), Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x"))))))))),x41,x9116)
val x9129 = x9128.contains(x9127)
val x9560 = if (x9129) {
val x9130 = x9128(x9127)
x9130
} else {
val x9131 = x50.getOrElse(x9127, x17)
val x9132 = x9131._1
val x9133 = x9131._2
val x9134 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9132,x9133)
val x9135 = x9128 + (x9127 -> x9134)
x5 = x9135
val x9137 = {(x9138:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x9139:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x9142 = Addr("p1")
val x9150 = x5
val x9144 = x41 + ("p1" -> x9142)
val x9141 = x9139
val x9140 = x9138
val x9145 = x9140.head
val x9146 = x9141.getOrElse(x9142, x15)
val x9147 = x9145.union(x9146)
val x9148 = x9141 + (x9142 -> x9147)
val x9149 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("p2"), Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x")))))))),x9144,x9148)
val x9151 = x9150.contains(x9149)
val x9540 = if (x9151) {
val x9152 = x9150(x9149)
x9152
} else {
val x9153 = x4
val x9154 = x9153.getOrElse(x9149, x17)
val x9155 = x9154._1
val x9156 = x9154._2
val x9157 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9155,x9156)
val x9158 = x9150 + (x9149 -> x9157)
x5 = x9158
val x9160 = {(x9161:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x9162:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x9165 = Addr("p2")
val x9173 = x5
val x9167 = x9144 + ("p2" -> x9165)
val x9164 = x9162
val x9163 = x9161
val x9168 = x9163.head
val x9169 = x9164.getOrElse(x9165, x15)
val x9170 = x9168.union(x9169)
val x9171 = x9164 + (x9165 -> x9170)
val x9172 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x"))))))),x9167,x9171)
val x9174 = x9173.contains(x9172)
val x9520 = if (x9174) {
val x9175 = x9173(x9172)
x9175
} else {
val x9176 = x4
val x9177 = x9176.getOrElse(x9172, x17)
val x9178 = x9177._1
val x9179 = x9177._2
val x9180 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9178,x9179)
val x9181 = x9173 + (x9172 -> x9180)
x5 = x9181
val x9183 = {(x9184:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x9185:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x9188 = Addr("pf")
val x9196 = x5
val x9190 = x9167 + ("pf" -> x9188)
val x9187 = x9185
val x9186 = x9184
val x9191 = x9186.head
val x9192 = x9187.getOrElse(x9188, x15)
val x9193 = x9191.union(x9192)
val x9194 = x9187 + (x9188 -> x9193)
val x9195 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x")))))),x9190,x9194)
val x9197 = x9196.contains(x9195)
val x9500 = if (x9197) {
val x9198 = x9196(x9195)
x9198
} else {
val x9199 = x4
val x9200 = x9199.getOrElse(x9195, x17)
val x9201 = x9200._1
val x9202 = x9200._2
val x9203 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9201,x9202)
val x9204 = x9196 + (x9195 -> x9203)
x5 = x9204
val x9206 = {(x9207:scala.collection.immutable.List[scala.collection.immutable.Set[AbsValue]],x9208:scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]) => 
val x9211 = Addr("x")
val x9219 = x5
val x9213 = x9190 + ("x" -> x9211)
val x9210 = x9208
val x9209 = x9207
val x9214 = x9209.head
val x9215 = x9210.getOrElse(x9211, x15)
val x9216 = x9214.union(x9215)
val x9217 = x9210 + (x9211 -> x9216)
val x9218 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x"))))),x9213,x9217)
val x9220 = x9219.contains(x9218)
val x9480 = if (x9220) {
val x9221 = x9219(x9218)
x9221
} else {
val x9222 = x4
val x9223 = x9222.getOrElse(x9218, x17)
val x9224 = x9223._1
val x9225 = x9223._2
val x9226 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9224,x9225)
val x9227 = x9219 + (x9218 -> x9226)
x5 = x9227
val x9230 = x5
val x9229 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("p1"),List(Var("pf"))),x9213,x9217)
val x9231 = x9230.contains(x9229)
val x9314 = if (x9231) {
val x9232 = x9230(x9229)
x9232
} else {
val x9233 = x9222.getOrElse(x9229, x17)
val x9234 = x9233._1
val x9235 = x9233._2
val x9236 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9234,x9235)
val x9237 = x9230 + (x9229 -> x9236)
x5 = x9237
val x9240 = x5
val x9239 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("p1"),x9213,x9217)
val x9241 = x9240.contains(x9239)
val x9265 = if (x9241) {
val x9242 = x9240(x9239)
x9242
} else {
val x9243 = x9222.getOrElse(x9239, x17)
val x9244 = x9243._1
val x9245 = x9243._2
val x9246 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9244,x9245)
val x9247 = x9240 + (x9239 -> x9246)
x5 = x9247
val x9251 = x5
val x9249 = x9213("p1")
val x9250 = x9217.getOrElse(x9249, x15)
val x9252 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9250,x9217)
val x9253 = x9244.union(x9250)
val x9260 = x9217.foldLeft (x9245) { case (x9254, (x9255, x9256)) =>
val x9257 = x9254.getOrElse(x9255, x15)
val x9258 = x9257.union(x9256)
val x9259 = x9254 + (x9255 -> x9258)

x9259
}
val x9261 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9253,x9260)
val x9262 = x9251 + (x9239 -> x9261)
x5 = x9262
x9252
}
val x9269 = x5
val x9267 = x9265._2
val x9268 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("pf"),x9213,x9267)
val x9270 = x9269.contains(x9268)
val x9294 = if (x9270) {
val x9271 = x9269(x9268)
x9271
} else {
val x9272 = x9222.getOrElse(x9268, x17)
val x9273 = x9272._1
val x9274 = x9272._2
val x9275 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9273,x9274)
val x9276 = x9269 + (x9268 -> x9275)
x5 = x9276
val x9280 = x5
val x9278 = x9213("pf")
val x9279 = x9267.getOrElse(x9278, x15)
val x9281 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9279,x9267)
val x9282 = x9273.union(x9279)
val x9289 = x9267.foldLeft (x9274) { case (x9283, (x9284, x9285)) =>
val x9286 = x9283.getOrElse(x9284, x15)
val x9287 = x9286.union(x9285)
val x9288 = x9283 + (x9284 -> x9287)

x9288
}
val x9290 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9282,x9289)
val x9291 = x9280 + (x9268 -> x9290)
x5 = x9291
x9281
}
val x9266 = x9265._1
val x9295 = x9294._1
val x9296 = x9294._2
val x9297 = apply_closures_norep(x9266, List(x9295), x9296)
val x9300 = x5
val x9298 = x9297._1
val x9299 = x9297._2
val x9301 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9298,x9299)
val x9302 = x9234.union(x9298)
val x9309 = x9299.foldLeft (x9235) { case (x9303, (x9304, x9305)) =>
val x9306 = x9303.getOrElse(x9304, x15)
val x9307 = x9306.union(x9305)
val x9308 = x9303 + (x9304 -> x9307)

x9308
}
val x9310 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9302,x9309)
val x9311 = x9300 + (x9229 -> x9310)
x5 = x9311
x9301
}
val x9318 = x5
val x9316 = x9314._2
val x9317 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(App(Var("p2"),List(Var("pf"))),List(Var("x"))),x9213,x9316)
val x9319 = x9318.contains(x9317)
val x9460 = if (x9319) {
val x9320 = x9318(x9317)
x9320
} else {
val x9321 = x9222.getOrElse(x9317, x17)
val x9322 = x9321._1
val x9323 = x9321._2
val x9324 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9322,x9323)
val x9325 = x9318 + (x9317 -> x9324)
x5 = x9325
val x9328 = x5
val x9327 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](App(Var("p2"),List(Var("pf"))),x9213,x9316)
val x9329 = x9328.contains(x9327)
val x9411 = if (x9329) {
val x9330 = x9328(x9327)
x9330
} else {
val x9331 = x9222.getOrElse(x9327, x17)
val x9332 = x9331._1
val x9333 = x9331._2
val x9334 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9332,x9333)
val x9335 = x9328 + (x9327 -> x9334)
x5 = x9335
val x9338 = x5
val x9337 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("p2"),x9213,x9316)
val x9339 = x9338.contains(x9337)
val x9363 = if (x9339) {
val x9340 = x9338(x9337)
x9340
} else {
val x9341 = x9222.getOrElse(x9337, x17)
val x9342 = x9341._1
val x9343 = x9341._2
val x9344 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9342,x9343)
val x9345 = x9338 + (x9337 -> x9344)
x5 = x9345
val x9349 = x5
val x9347 = x9213("p2")
val x9348 = x9316.getOrElse(x9347, x15)
val x9350 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9348,x9316)
val x9351 = x9342.union(x9348)
val x9358 = x9316.foldLeft (x9343) { case (x9352, (x9353, x9354)) =>
val x9355 = x9352.getOrElse(x9353, x15)
val x9356 = x9355.union(x9354)
val x9357 = x9352 + (x9353 -> x9356)

x9357
}
val x9359 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9351,x9358)
val x9360 = x9349 + (x9337 -> x9359)
x5 = x9360
x9350
}
val x9367 = x5
val x9365 = x9363._2
val x9366 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("pf"),x9213,x9365)
val x9368 = x9367.contains(x9366)
val x9391 = if (x9368) {
val x9369 = x9367(x9366)
x9369
} else {
val x9370 = x9222.getOrElse(x9366, x17)
val x9371 = x9370._1
val x9372 = x9370._2
val x9373 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9371,x9372)
val x9374 = x9367 + (x9366 -> x9373)
x5 = x9374
val x9377 = x5
val x9278 = x9213("pf")
val x9376 = x9365.getOrElse(x9278, x15)
val x9378 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9376,x9365)
val x9379 = x9371.union(x9376)
val x9386 = x9365.foldLeft (x9372) { case (x9380, (x9381, x9382)) =>
val x9383 = x9380.getOrElse(x9381, x15)
val x9384 = x9383.union(x9382)
val x9385 = x9380 + (x9381 -> x9384)

x9385
}
val x9387 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9379,x9386)
val x9388 = x9377 + (x9366 -> x9387)
x5 = x9388
x9378
}
val x9364 = x9363._1
val x9392 = x9391._1
val x9393 = x9391._2
val x9394 = apply_closures_norep(x9364, List(x9392), x9393)
val x9397 = x5
val x9395 = x9394._1
val x9396 = x9394._2
val x9398 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9395,x9396)
val x9399 = x9332.union(x9395)
val x9406 = x9396.foldLeft (x9333) { case (x9400, (x9401, x9402)) =>
val x9403 = x9400.getOrElse(x9401, x15)
val x9404 = x9403.union(x9402)
val x9405 = x9400 + (x9401 -> x9404)

x9405
}
val x9407 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9399,x9406)
val x9408 = x9397 + (x9327 -> x9407)
x5 = x9408
x9398
}
val x9415 = x5
val x9413 = x9411._2
val x9414 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Var("x"),x9213,x9413)
val x9416 = x9415.contains(x9414)
val x9440 = if (x9416) {
val x9417 = x9415(x9414)
x9417
} else {
val x9418 = x9222.getOrElse(x9414, x17)
val x9419 = x9418._1
val x9420 = x9418._2
val x9421 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9419,x9420)
val x9422 = x9415 + (x9414 -> x9421)
x5 = x9422
val x9426 = x5
val x9424 = x9213("x")
val x9425 = x9413.getOrElse(x9424, x15)
val x9427 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9425,x9413)
val x9428 = x9419.union(x9425)
val x9435 = x9413.foldLeft (x9420) { case (x9429, (x9430, x9431)) =>
val x9432 = x9429.getOrElse(x9430, x15)
val x9433 = x9432.union(x9431)
val x9434 = x9429 + (x9430 -> x9433)

x9434
}
val x9436 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9428,x9435)
val x9437 = x9426 + (x9414 -> x9436)
x5 = x9437
x9427
}
val x9412 = x9411._1
val x9441 = x9440._1
val x9442 = x9440._2
val x9443 = apply_closures_norep(x9412, List(x9441), x9442)
val x9446 = x5
val x9444 = x9443._1
val x9445 = x9443._2
val x9447 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9444,x9445)
val x9448 = x9322.union(x9444)
val x9455 = x9445.foldLeft (x9323) { case (x9449, (x9450, x9451)) =>
val x9452 = x9449.getOrElse(x9450, x15)
val x9453 = x9452.union(x9451)
val x9454 = x9449 + (x9450 -> x9453)

x9454
}
val x9456 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9448,x9455)
val x9457 = x9446 + (x9317 -> x9456)
x5 = x9457
x9447
}
val x9315 = x9314._1
val x9461 = x9460._1
val x9462 = x9460._2
val x9463 = apply_closures_norep(x9315, List(x9461), x9462)
val x9466 = x5
val x9464 = x9463._1
val x9465 = x9463._2
val x9467 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9464,x9465)
val x9468 = x9224.union(x9464)
val x9475 = x9465.foldLeft (x9225) { case (x9469, (x9470, x9471)) =>
val x9472 = x9469.getOrElse(x9470, x15)
val x9473 = x9472.union(x9471)
val x9474 = x9469 + (x9470 -> x9473)

x9474
}
val x9476 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9468,x9475)
val x9477 = x9466 + (x9218 -> x9476)
x5 = x9477
x9467
}
val x9481 = x9480._1
val x9482 = x9480._2
val x9483 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9481,x9482)
x9483: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x9485 = Set[AbsValue](CompiledClo(x9206,Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x")))))),x9190))
val x9486 = x5
val x9487 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9485,x9194)
val x9488 = x9201.union(x9485)
val x9495 = x9194.foldLeft (x9202) { case (x9489, (x9490, x9491)) =>
val x9492 = x9489.getOrElse(x9490, x15)
val x9493 = x9492.union(x9491)
val x9494 = x9489 + (x9490 -> x9493)

x9494
}
val x9496 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9488,x9495)
val x9497 = x9486 + (x9195 -> x9496)
x5 = x9497
x9487
}
val x9501 = x9500._1
val x9502 = x9500._2
val x9503 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9501,x9502)
x9503: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x9505 = Set[AbsValue](CompiledClo(x9183,Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x"))))))),x9167))
val x9506 = x5
val x9507 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9505,x9171)
val x9508 = x9178.union(x9505)
val x9515 = x9171.foldLeft (x9179) { case (x9509, (x9510, x9511)) =>
val x9512 = x9509.getOrElse(x9510, x15)
val x9513 = x9512.union(x9511)
val x9514 = x9509 + (x9510 -> x9513)

x9514
}
val x9516 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9508,x9515)
val x9517 = x9506 + (x9172 -> x9516)
x5 = x9517
x9507
}
val x9521 = x9520._1
val x9522 = x9520._2
val x9523 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9521,x9522)
x9523: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x9525 = Set[AbsValue](CompiledClo(x9160,Lam(List("p2"), Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x")))))))),x9144))
val x9526 = x5
val x9527 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9525,x9148)
val x9528 = x9155.union(x9525)
val x9535 = x9148.foldLeft (x9156) { case (x9529, (x9530, x9531)) =>
val x9532 = x9529.getOrElse(x9530, x15)
val x9533 = x9532.union(x9531)
val x9534 = x9529 + (x9530 -> x9533)

x9534
}
val x9536 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9528,x9535)
val x9537 = x9526 + (x9149 -> x9536)
x5 = x9537
x9527
}
val x9541 = x9540._1
val x9542 = x9540._2
val x9543 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9541,x9542)
x9543: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x9545 = Set[AbsValue](CompiledClo(x9137,Lam(List("p1"), Lam(List("p2"), Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x"))))))))),x41))
val x9546 = x5
val x9547 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9545,x9116)
val x9548 = x9132.union(x9545)
val x9555 = x9116.foldLeft (x9133) { case (x9549, (x9550, x9551)) =>
val x9552 = x9549.getOrElse(x9550, x15)
val x9553 = x9552.union(x9551)
val x9554 = x9549 + (x9550 -> x9553)

x9554
}
val x9556 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9548,x9555)
val x9557 = x9546 + (x9127 -> x9556)
x5 = x9557
x9547
}
val x9563 = Set[AbsValue](VoidV())
val x9568 = x5
val x9562 = x9560._2
val x9564 = x41("plus")
val x9561 = x9560._1
val x9565 = x9562.getOrElse(x9564, x15)
val x9566 = x9561.union(x9565)
val x9567 = x9562 + (x9564 -> x9566)
val x9569 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9563,x9567)
val x9570 = x9122.union(x9563)
val x9577 = x9567.foldLeft (x9123) { case (x9571, (x9572, x9573)) =>
val x9574 = x9571.getOrElse(x9572, x15)
val x9575 = x9574.union(x9573)
val x9576 = x9571 + (x9572 -> x9575)

x9576
}
val x9578 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9570,x9577)
val x9579 = x9568 + (x9117 -> x9578)
x5 = x9579
x9569
}
val x9115 = x9114._1
val x9583 = x9582._1
val x9584 = x9582._2
val x9585 = apply_closures_norep(x9115, List(x9583), x9584)
val x9588 = x5
val x9586 = x9585._1
val x9587 = x9585._2
val x9589 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9586,x9587)
val x9590 = x52.union(x9586)
val x9597 = x9587.foldLeft (x53) { case (x9591, (x9592, x9593)) =>
val x9594 = x9591.getOrElse(x9592, x15)
val x9595 = x9594.union(x9593)
val x9596 = x9591 + (x9592 -> x9595)

x9596
}
val x9598 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9590,x9597)
val x9599 = x9588 + (x46 -> x9598)
x5 = x9599
x9589
}
val x9603 = x9602._1
val x9604 = x9602._2
val x9605 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9603,x9604)
x9605: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
x6 = {() => 
val x7 = x5
x4 = x7
x5 = x3
val x11 = x5
val x12 = x11.contains(x10)
val x9670 = if (x12) {
val x13 = x11(x10)
x13
} else {
val x14 = x4
val x18 = x14.getOrElse(x10, x17)
val x19 = x18._1
val x20 = x18._2
val x21 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x19,x20)
val x22 = x11 + (x10 -> x21)
x5 = x22
val x25 = x5
val x26 = x25.contains(x24)
val x9622 = if (x26) {
val x27 = x25(x24)
x27
} else {
val x28 = x14.getOrElse(x24, x17)
val x29 = x28._1
val x30 = x28._2
val x31 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x29,x30)
val x32 = x25 + (x24 -> x31)
x5 = x32
val x9607 = Set[AbsValue](CompiledClo(x34,Lam(List("plus"), App(Lam(List("__$0"), App(Lam(List("mult"), App(Lam(List("__$1"), App(Lam(List("pred"), App(Lam(List("__$2"), App(Lam(List("sub"), App(Lam(List("__$3"), App(Lam(List("church0"), App(Lam(List("__$4"), App(Lam(List("church1"), App(Lam(List("__$5"), App(Lam(List("church2"), App(Lam(List("__$6"), App(Lam(List("church3"), App(Lam(List("__$7"), App(Lam(List("church0?"), App(Lam(List("__$8"), App(Lam(List("church=?"), App(Lam(List("__$9"), App(App(Var("church=?"),List(App(App(Var("mult"),List(Var("church2"))),List(App(App(Var("plus"),List(Var("church1"))),List(Var("church3"))))))),List(App(App(Var("plus"),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church1"))))),List(App(App(Var("mult"),List(Var("church2"))),List(Var("church3")))))))),List(Set_!("church=?", Lam(List("e1"), Lam(List("e2"), If(App(Var("church0?"),List(Var("e1"))),App(Var("church0?"),List(Var("e2"))),If(App(Var("church0?"),List(Var("e2"))),BoolLit(false),App(App(Var("church=?"),List(App(App(Var("sub"),List(Var("e1"))),List(Var("church1"))))),List(App(App(Var("sub"),List(Var("e2"))),List(Var("church1"))))))))))))),List(Void()))),List(Set_!("church0?", Lam(List("z"), App(App(Var("z"),List(Lam(List("zx"), BoolLit(false)))),List(BoolLit(true)))))))),List(Void()))),List(Set_!("church3", Lam(List("f3"), Lam(List("x3"), App(Var("f3"),List(App(Var("f3"),List(App(Var("f3"),List(Var("x3"))))))))))))),List(Void()))),List(Set_!("church2", Lam(List("f2"), Lam(List("x2"), App(Var("f2"),List(App(Var("f2"),List(Var("x2"))))))))))),List(Void()))),List(Set_!("church1", Lam(List("f1"), Lam(List("x1"), App(Var("f1"),List(Var("x1"))))))))),List(Void()))),List(Set_!("church0", Lam(List("f0"), Lam(List("x0"), Var("x0"))))))),List(Void()))),List(Set_!("sub", Lam(List("s1"), Lam(List("s2"), App(App(Var("s2"),List(Var("pred"))),List(Var("s1"))))))))),List(Void()))),List(Set_!("pred", Lam(List("n"), Lam(List("rf"), Lam(List("rx"), App(App(App(Var("n"),List(Lam(List("g"), Lam(List("h"), App(Var("h"),List(App(Var("g"),List(Var("rf"))))))))),List(Lam(List("ignored"), Var("rx")))),List(Lam(List("id"), Var("id"))))))))))),List(Void()))),List(Set_!("mult", Lam(List("m1"), Lam(List("m2"), Lam(List("mf"), App(Var("m2"),List(App(Var("m1"),List(Var("mf")))))))))))),List(Void()))),List(Set_!("plus", Lam(List("p1"), Lam(List("p2"), Lam(List("pf"), Lam(List("x"), App(App(Var("p1"),List(Var("pf"))),List(App(App(Var("p2"),List(Var("pf"))),List(Var("x"))))))))))))),x0))
val x9608 = x5
val x9609 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9607,x1)
val x9610 = x29.union(x9607)
val x9617 = x1.foldLeft (x30) { case (x9611, (x9612, x9613)) =>
val x9614 = x9611.getOrElse(x9612, x15)
val x9615 = x9614.union(x9613)
val x9616 = x9611 + (x9612 -> x9615)

x9616
}
val x9618 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9610,x9617)
val x9619 = x9608 + (x24 -> x9618)
x5 = x9619
x9609
}
val x9626 = x5
val x9624 = x9622._2
val x9625 = new Tuple3[sai.direct.large.parser.Expr,scala.collection.immutable.Map[java.lang.String, Addr],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](Void(),x0,x9624)
val x9627 = x9626.contains(x9625)
val x9650 = if (x9627) {
val x9628 = x9626(x9625)
x9628
} else {
val x9629 = x14.getOrElse(x9625, x17)
val x9630 = x9629._1
val x9631 = x9629._2
val x9632 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9630,x9631)
val x9633 = x9626 + (x9625 -> x9632)
x5 = x9633
val x9635 = Set[AbsValue](VoidV())
val x9636 = x5
val x9637 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9635,x9624)
val x9638 = x9630.union(x9635)
val x9645 = x9624.foldLeft (x9631) { case (x9639, (x9640, x9641)) =>
val x9642 = x9639.getOrElse(x9640, x15)
val x9643 = x9642.union(x9641)
val x9644 = x9639 + (x9640 -> x9643)

x9644
}
val x9646 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9638,x9645)
val x9647 = x9636 + (x9625 -> x9646)
x5 = x9647
x9637
}
val x9623 = x9622._1
val x9651 = x9650._1
val x9652 = x9650._2
val x9653 = apply_closures_norep(x9623, List(x9651), x9652)
val x9656 = x5
val x9654 = x9653._1
val x9655 = x9653._2
val x9657 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9654,x9655)
val x9658 = x19.union(x9654)
val x9665 = x9655.foldLeft (x20) { case (x9659, (x9660, x9661)) =>
val x9662 = x9659.getOrElse(x9660, x15)
val x9663 = x9662.union(x9661)
val x9664 = x9659 + (x9660 -> x9663)

x9664
}
val x9666 = new Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]](x9658,x9665)
val x9667 = x9656 + (x10 -> x9666)
x5 = x9667
x9657
}
val x9671 = x4
val x9672 = x5
val x9673 = x9671 == x9672
val x9677 = if (x9673) {
val x9674 = x9672(x10)
x9674
} else {
val x9675 = x6()
x9675
}
x9677: Tuple2[scala.collection.immutable.Set[AbsValue],scala.collection.immutable.Map[Addr, scala.collection.immutable.Set[AbsValue]]]
}
val x9679 = x6()
val x9680 = x9679._1
val x9682 = println(x9680)
val x9681 = x9679._2
val x9683 = println(x9681)
x9683
}
}

object GenCode {
  def main(args: Array[String]) {
    val s = new Snippet()
    s(())
  }
}
