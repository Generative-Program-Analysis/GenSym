(module
  (type $s (struct (field i32) (field i32)))
  (type $f0 (func (param i32)))
  (type $c0 (cont $f0))
  (type $f1 (func))
  (type $c1 (cont $f1))

  (tag $a)
  (tag $b)
  (tag $c)
  (tag $d)
  (tag $e)
  (tag $f)
  (tag $g)

  (func $func_g (param i32)
    (suspend $g)
  )
  (elem declare func $func_g)

  (func $func_f (param i32)
    (if (i32.eqz (local.get 0))
      (then (suspend $f))
      (else
        (resume $c0
          (i32.sub (local.get 0) (i32.const 1))
          (cont.new $c0 (ref.func $func_g))
        )
      )
    )
  )
  (elem declare func $func_f)

  (func $func_e (param i32)
    (if (i32.eqz (local.get 0))
      (then (suspend $e))
      (else
        (resume $c0
          (i32.sub (local.get 0) (i32.const 1))
          (cont.new $c0 (ref.func $func_f))
        )
      )
    )
  )
  (elem declare func $func_e)

  (func $func_d (param i32)
    (if (i32.eqz (local.get 0))
      (then (suspend $d))
      (else
        (resume $c0
          (i32.sub (local.get 0) (i32.const 1))
          (cont.new $c0 (ref.func $func_e))
        )
      )
    )
  )
  (elem declare func $func_d)

  (func $func_c (param i32)
    (if (i32.eqz (local.get 0))
      (then (suspend $c))
      (else
        (resume $c0
          (i32.sub (local.get 0) (i32.const 1))
          (cont.new $c0 (ref.func $func_d))
        )
      )
    )
  )
  (elem declare func $func_c)

  (func $func_b (param i32)
    (if (i32.eqz (local.get 0))
      (then (suspend $b))
      (else
        (resume $c0
          (i32.sub (local.get 0) (i32.const 1))
          (cont.new $c0 (ref.func $func_c))
        )
      )
    )
  )
  (elem declare func $func_b)

  (func $func_a (param i32)
    (if (i32.eqz (local.get 0))
      (then (suspend $a))
      (else
        (resume $c0
          (i32.sub (local.get 0) (i32.const 1))
          (cont.new $c0 (ref.func $func_b))
        )
      )
    )
  )
  (elem declare func $func_a)

  (func (export "main") (param i32) (result i32)
  
    (block $jump_a (result (ref null $c1))
      (block $jump_b (result (ref null $c1))
        (block $jump_c (result (ref null $c1))
          (block $jump_d (result (ref null $c1))
            (block $jump_e (result (ref null $c1))
              (block $jump_f (result (ref null $c1))
                (block $jump_g (result (ref null $c1))
                  (resume $c0
                    (on $a $jump_a)
                    (on $b $jump_b)
                    (on $c $jump_c)
                    (on $d $jump_d)
                    (on $e $jump_e)
                    (on $f $jump_f)
                    (on $g $jump_g)

                    (local.get 0)
                    (cont.new $c0 (ref.func $func_a))
                  )
                  (ref.null $c1)
                )
                (return (i32.const 6))
              )
              (return (i32.const 5))
            )
            (return (i32.const 4))
          )
          (return (i32.const 3))
        )
        (return (i32.const 2))
      )
      (return (i32.const 1))
    )
    (return (i32.const 0))
  )
)

(assert_return (invoke "main" (i32.const 0)) (i32.const 0))
(assert_return (invoke "main" (i32.const 1)) (i32.const 1))
(assert_return (invoke "main" (i32.const 2)) (i32.const 2))
(assert_return (invoke "main" (i32.const 3)) (i32.const 3))
(assert_return (invoke "main" (i32.const 4)) (i32.const 4))
(assert_return (invoke "main" (i32.const 5)) (i32.const 5))
(assert_return (invoke "main" (i32.const 6)) (i32.const 6))
(assert_return (invoke "main" (i32.const 7)) (i32.const 6))
(assert_return (invoke "main" (i32.const 8)) (i32.const 6))
(assert_return (invoke "main" (i32.const 65536)) (i32.const 6))
