(module definition binary
  "\00\61\73\6d\01\00\00\00\01\bd\80\80\80\00\0b\60"
  "\02\7f\7f\01\7f\60\00\00\60\00\01\7f\60\01\7f\00"
  "\60\03\7f\7c\7f\03\7f\7c\7f\60\00\03\7f\7e\7f\60"
  "\01\7f\01\7f\60\00\02\7f\7f\60\00\02\7d\7d\60\00"
  "\03\7f\7f\7e\60\02\7f\7f\02\7f\7f\03\b0\80\80\80"
  "\00\2f\01\01\02\02\02\02\02\02\02\01\02\02\02\02"
  "\02\02\00\01\01\02\06\02\02\01\02\02\02\02\02\02"
  "\02\02\02\02\02\02\02\09\02\02\02\02\02\02\02\02"
  "\01\05\83\80\80\80\00\01\00\01\06\86\80\80\80\00"
  "\01\7f\01\41\0a\0b\07\b4\85\80\80\00\2c\05\65\6d"
  "\70\74\79\00\01\08\73\69\6e\67\75\6c\61\72\00\02"
  "\05\6d\75\6c\74\69\00\03\06\6e\65\73\74\65\64\00"
  "\04\04\64\65\65\70\00\05\0d\61\73\2d\6c\6f\6f\70"
  "\2d\66\69\72\73\74\00\06\0b\61\73\2d\6c\6f\6f\70"
  "\2d\6d\69\64\00\07\0c\61\73\2d\6c\6f\6f\70\2d\6c"
  "\61\73\74\00\08\0f\61\73\2d\69\66\2d\63\6f\6e\64"
  "\69\74\69\6f\6e\00\09\0a\61\73\2d\69\66\2d\74\68"
  "\65\6e\00\0a\0a\61\73\2d\69\66\2d\65\6c\73\65\00"
  "\0b\0e\61\73\2d\62\72\5f\69\66\2d\66\69\72\73\74"
  "\00\0c\0d\61\73\2d\62\72\5f\69\66\2d\6c\61\73\74"
  "\00\0d\11\61\73\2d\62\72\5f\74\61\62\6c\65\2d\66"
  "\69\72\73\74\00\0e\10\61\73\2d\62\72\5f\74\61\62"
  "\6c\65\2d\6c\61\73\74\00\0f\0e\61\73\2d\73\74\6f"
  "\72\65\2d\66\69\72\73\74\00\11\0d\61\73\2d\73\74"
  "\6f\72\65\2d\6c\61\73\74\00\12\14\61\73\2d\6d\65"
  "\6d\6f\72\79\2e\67\72\6f\77\2d\76\61\6c\75\65\00"
  "\13\0d\61\73\2d\63\61\6c\6c\2d\76\61\6c\75\65\00"
  "\15\0f\61\73\2d\72\65\74\75\72\6e\2d\76\61\6c\75"
  "\65\00\16\0f\61\73\2d\64\72\6f\70\2d\6f\70\65\72"
  "\61\6e\64\00\17\0b\61\73\2d\62\72\2d\76\61\6c\75"
  "\65\00\18\12\61\73\2d\6c\6f\63\61\6c\2e\73\65\74"
  "\2d\76\61\6c\75\65\00\19\12\61\73\2d\6c\6f\63\61"
  "\6c\2e\74\65\65\2d\76\61\6c\75\65\00\1a\13\61\73"
  "\2d\67\6c\6f\62\61\6c\2e\73\65\74\2d\76\61\6c\75"
  "\65\00\1b\0f\61\73\2d\6c\6f\61\64\2d\6f\70\65\72"
  "\61\6e\64\00\1c\11\61\73\2d\62\69\6e\61\72\79\2d"
  "\6f\70\65\72\61\6e\64\00\1d\0f\61\73\2d\74\65\73"
  "\74\2d\6f\70\65\72\61\6e\64\00\1e\12\61\73\2d\63"
  "\6f\6d\70\61\72\65\2d\6f\70\65\72\61\6e\64\00\1f"
  "\12\61\73\2d\62\69\6e\61\72\79\2d\6f\70\65\72\61"
  "\6e\64\73\00\20\13\61\73\2d\63\6f\6d\70\61\72\65"
  "\2d\6f\70\65\72\61\6e\64\73\00\21\11\61\73\2d\6d"
  "\69\78\65\64\2d\6f\70\65\72\61\6e\64\73\00\22\0a"
  "\62\72\65\61\6b\2d\62\61\72\65\00\23\0b\62\72\65"
  "\61\6b\2d\76\61\6c\75\65\00\24\11\62\72\65\61\6b"
  "\2d\6d\75\6c\74\69\2d\76\61\6c\75\65\00\25\0e\62"
  "\72\65\61\6b\2d\72\65\70\65\61\74\65\64\00\26\05"
  "\70\61\72\61\6d\00\27\06\70\61\72\61\6d\73\00\28"
  "\09\70\61\72\61\6d\73\2d\69\64\00\29\0b\70\61\72"
  "\61\6d\2d\62\72\65\61\6b\00\2a\0c\70\61\72\61\6d"
  "\73\2d\62\72\65\61\6b\00\2b\0f\70\61\72\61\6d\73"
  "\2d\69\64\2d\62\72\65\61\6b\00\2c\07\65\66\66\65"
  "\63\74\73\00\2d\08\74\79\70\65\2d\75\73\65\00\2e"
  "\0a\e0\88\80\80\00\2f\82\80\80\80\00\00\0b\88\80"
  "\80\80\00\00\02\40\0b\02\40\0b\0b\8b\80\80\80\00"
  "\00\02\40\01\0b\02\7f\41\07\0b\0b\be\80\80\80\00"
  "\00\02\40\10\00\10\00\10\00\10\00\0b\02\7f\10\00"
  "\10\00\10\00\41\07\10\00\0b\1a\02\05\10\00\10\00"
  "\10\00\41\08\10\00\10\00\10\00\10\00\42\07\10\00"
  "\10\00\10\00\10\00\41\09\10\00\0b\1a\1a\0b\95\80"
  "\80\80\00\00\02\7f\02\40\10\00\02\40\0b\01\0b\02"
  "\7f\10\00\41\09\0b\0b\0b\f9\80\80\80\00\00\02\7f"
  "\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f"
  "\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f"
  "\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f"
  "\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f\02\7f"
  "\02\7f\02\7f\02\7f\02\7f\02\7f\10\00\41\96\01\0b"
  "\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b"
  "\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b"
  "\0b\0b\0b\0b\0b\0b\8e\80\80\80\00\00\03\7f\02\7f"
  "\41\01\0b\10\00\10\00\0b\0b\8e\80\80\80\00\00\03"
  "\7f\10\00\02\7f\41\01\0b\10\00\0b\0b\8e\80\80\80"
  "\00\00\03\7f\10\00\10\00\02\7f\41\01\0b\0b\0b\8c"
  "\80\80\80\00\00\02\7f\41\01\0b\04\40\10\00\0b\0b"
  "\8f\80\80\80\00\00\41\01\04\7f\02\7f\41\01\0b\05"
  "\41\02\0b\0b\8f\80\80\80\00\00\41\01\04\7f\41\02"
  "\05\02\7f\41\01\0b\0b\0b\8e\80\80\80\00\00\02\7f"
  "\02\7f\41\01\0b\41\02\0d\00\0b\0b\8e\80\80\80\00"
  "\00\02\7f\41\02\02\7f\41\01\0b\0d\00\0b\0b\90\80"
  "\80\80\00\00\02\7f\02\7f\41\01\0b\41\02\0e\01\00"
  "\00\0b\0b\90\80\80\80\00\00\02\7f\41\02\02\7f\41"
  "\01\0b\0e\01\00\00\0b\0b\84\80\80\80\00\00\20\00"
  "\0b\8c\80\80\80\00\00\02\7f\41\01\0b\41\01\36\02"
  "\00\0b\8c\80\80\80\00\00\41\0a\02\7f\41\01\0b\36"
  "\02\00\0b\89\80\80\80\00\00\02\7f\41\01\0b\40\00"
  "\0b\84\80\80\80\00\00\20\00\0b\89\80\80\80\00\00"
  "\02\7f\41\01\0b\10\14\0b\88\80\80\80\00\00\02\7f"
  "\41\01\0b\0f\0b\88\80\80\80\00\00\02\7f\41\01\0b"
  "\1a\0b\8c\80\80\80\00\00\02\7f\02\7f\41\01\0b\0c"
  "\00\0b\0b\8d\80\80\80\00\01\01\7f\02\7f\41\01\0b"
  "\21\00\20\00\0b\8b\80\80\80\00\01\01\7f\02\7f\41"
  "\01\0b\22\00\0b\8b\80\80\80\00\00\02\7f\41\01\0b"
  "\24\00\23\00\0b\8a\80\80\80\00\00\02\7f\41\01\0b"
  "\28\02\00\0b\91\80\80\80\00\00\02\7f\10\00\41\03"
  "\0b\02\7f\10\00\41\04\0b\6c\0b\8a\80\80\80\00\00"
  "\02\7f\10\00\41\0d\0b\45\0b\97\80\80\80\00\00\02"
  "\7d\10\00\43\00\00\40\40\0b\02\7d\10\00\43\00\00"
  "\40\40\0b\5e\0b\8e\80\80\80\00\00\02\07\10\00\41"
  "\03\10\00\41\04\0b\6c\0b\94\80\80\80\00\00\02\08"
  "\10\00\43\00\00\40\40\10\00\43\00\00\40\40\0b\5e"
  "\0b\91\80\80\80\00\00\02\07\10\00\41\03\10\00\41"
  "\04\0b\41\05\6a\6c\0b\a6\80\80\80\00\00\02\40\0c"
  "\00\00\0b\02\40\41\01\0d\00\00\0b\02\40\41\00\0e"
  "\00\00\00\0b\02\40\41\01\0e\02\00\00\00\00\0b\41"
  "\13\0b\8b\80\80\80\00\00\02\7f\41\12\0c\00\41\13"
  "\0b\0b\93\80\80\80\00\00\02\09\41\12\41\6e\42\12"
  "\0c\00\41\13\41\6d\42\13\0b\0b\b1\80\80\80\00\00"
  "\02\7f\41\12\0c\00\41\13\0c\00\41\14\41\00\0d\00"
  "\1a\41\14\41\01\0d\00\1a\41\15\0c\00\41\16\41\04"
  "\0e\00\00\41\17\41\01\0e\02\00\00\00\41\15\0b\0b"
  "\8a\80\80\80\00\00\41\01\02\06\41\02\6a\0b\0b\8a"
  "\80\80\80\00\00\41\01\41\02\02\00\6a\0b\0b\8a\80"
  "\80\80\00\00\41\01\41\02\02\0a\0b\6a\0b\8c\80\80"
  "\80\00\00\41\01\02\06\41\02\6a\0c\00\0b\0b\8c\80"
  "\80\80\00\00\41\01\41\02\02\00\6a\0c\00\0b\0b\8c"
  "\80\80\80\00\00\41\01\41\02\02\0a\0c\00\0b\6a\0b"
  "\af\80\80\80\00\01\01\7f\02\40\41\01\21\00\20\00"
  "\41\03\6c\21\00\20\00\41\05\6b\21\00\20\00\41\07"
  "\6c\21\00\0c\00\20\00\41\e4\00\6c\21\00\0b\20\00"
  "\41\72\46\0b\bd\80\80\80\00\00\02\01\0b\02\02\41"
  "\00\0b\02\03\1a\0b\41\00\44\00\00\00\00\00\00\00"
  "\00\41\00\02\04\0b\1a\1a\1a\02\02\41\00\0b\02\03"
  "\1a\0b\41\00\44\00\00\00\00\00\00\00\00\41\00\02"
  "\04\0b\1a\1a\1a\0b"
)
(module instance)
(assert_return (invoke "empty"))
(assert_return (invoke "singular") (i32.const 0x7))
(assert_return (invoke "multi") (i32.const 0x8))
(assert_return (invoke "nested") (i32.const 0x9))
(assert_return (invoke "deep") (i32.const 0x96))
(assert_return (invoke "as-loop-first") (i32.const 0x1))
(assert_return (invoke "as-loop-mid") (i32.const 0x1))
(assert_return (invoke "as-loop-last") (i32.const 0x1))
(assert_return (invoke "as-if-condition"))
(assert_return (invoke "as-if-then") (i32.const 0x1))
(assert_return (invoke "as-if-else") (i32.const 0x2))
(assert_return (invoke "as-br_if-first") (i32.const 0x1))
(assert_return (invoke "as-br_if-last") (i32.const 0x2))
(assert_return (invoke "as-br_table-first") (i32.const 0x1))
(assert_return (invoke "as-br_table-last") (i32.const 0x2))
(assert_return (invoke "as-memory.grow-value") (i32.const 0x1))
(assert_return (invoke "as-call-value") (i32.const 0x1))
(assert_return (invoke "as-return-value") (i32.const 0x1))
(assert_return (invoke "as-drop-operand"))
(assert_return (invoke "as-br-value") (i32.const 0x1))
(assert_return (invoke "as-binary-operand") (i32.const 0xc))
(assert_return (invoke "as-test-operand") (i32.const 0x0))
(assert_return (invoke "break-bare") (i32.const 0x13))
(assert_return (invoke "break-value") (i32.const 0x12))
(assert_return (invoke "break-repeated") (i32.const 0x12))
(assert_return (invoke "param") (i32.const 0x3))
(assert_return (invoke "params") (i32.const 0x3))
(assert_return (invoke "params-id") (i32.const 0x3))
(assert_return (invoke "param-break") (i32.const 0x3))
(assert_return (invoke "params-break") (i32.const 0x3))
(assert_return (invoke "params-id-break") (i32.const 0x3))